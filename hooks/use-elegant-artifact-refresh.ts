/**
 * @file hooks/use-elegant-artifact-refresh.ts
 * @description React hook –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–±—ã—Ö page.reload()
 * @version 1.0.0
 * @date 2025-06-27
 * @updated –°–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã UI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ API –æ–ø–µ—Ä–∞—Ü–∏–π
 */

/** HISTORY:
 * v1.0.0 (2025-06-27): –°–æ–∑–¥–∞–Ω —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π hook –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

'use client'

import { useCallback } from 'react'
import { toast } from '@/components/toast'

/**
 * @description React hook –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 * @feature –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å–ø–∏—Å–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: –≥–ª–∞–≤–Ω—ã–π grid, sidebar, "–ú–æ–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
 * @feature –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
 * @feature Debounced –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * @returns –§—É–Ω–∫—Ü–∏—è refreshArtifacts –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 */
export function useElegantArtifactRefresh() {
  /**
   * @description –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
   * @param options –û–ø—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const refreshArtifacts = useCallback(async (options?: {
    showToast?: boolean
    endpoints?: string[]
    timeout?: number
  }) => {
    const { showToast = true, endpoints, timeout = 5000 } = options || {}
    
    if (showToast) {
      toast({ 
        type: 'loading', 
        description: '–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...'
      })
    }
    
    try {
      // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ SWR mutate —Ñ—É–Ω–∫—Ü–∏–∏
      const globalRefreshSuccess = await tryGlobalSWRRefresh(endpoints)
      
      if (globalRefreshSuccess) {
        if (showToast) {
          toast({ 
            type: 'success', 
            description: '–°–ø–∏—Å–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!' 
          })
        }
        return true
      }
      
      // –ú–µ—Ç–æ–¥ 2: Fallback —á–µ—Ä–µ–∑ window events –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const eventRefreshSuccess = await tryWindowEventRefresh()
      
      if (eventRefreshSuccess) {
        if (showToast) {
          toast({ 
            type: 'success', 
            description: '–°–ø–∏—Å–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!' 
          })
        }
        return true
      }
      
      // –ú–µ—Ç–æ–¥ 3: Force refresh –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö endpoints
      await tryForceRefreshKnownEndpoints()
      
      if (showToast) {
        toast({ 
          type: 'success', 
          description: '–°–ø–∏—Å–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!' 
        })
      }
      
      return true
      
    } catch (error) {
      console.error('‚ùå Failed to refresh artifact lists:', error)
      
      if (showToast) {
        toast({ 
          type: 'error', 
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤' 
        })
      }
      
      return false
    }
  }, [])
  
  return { refreshArtifacts }
}

/**
 * @description –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ SWR mutate —Ñ—É–Ω–∫—Ü–∏–∏
 * @param endpoints –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ endpoints –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns Promise<boolean>
 */
async function tryGlobalSWRRefresh(endpoints?: string[]): Promise<boolean> {
  try {
    if (typeof window === 'undefined') return false
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π SWR cache
    const globalSWRCache = (window as any).__SWR_CACHE__
    if (!globalSWRCache) return false
    
    console.log('üéØ Using global SWR cache refresh...')
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoints –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const targetEndpoints = endpoints || [
      '/api/artifacts?page=1',
      '/api/artifacts',
      'artifacts-sidebar',
      'my-artifacts'
    ]
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ endpoints
    const promises = targetEndpoints.map(endpoint => {
      return new Promise(resolve => {
        try {
          // Invalidate –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π endpoint –≤ SWR cache
          if (globalSWRCache.delete) {
            globalSWRCache.delete(endpoint)
          }
          resolve(true)
        } catch (error) {
          console.error(`Failed to refresh ${endpoint}:`, error)
          resolve(false)
        }
      })
    })
    
    const results = await Promise.all(promises)
    const successCount = results.filter(Boolean).length
    
    console.log(`‚úÖ Global SWR refresh: ${successCount}/${targetEndpoints.length} endpoints`)
    return successCount > 0
    
  } catch (error) {
    console.error('‚ùå Global SWR refresh failed:', error)
    return false
  }
}

/**
 * @description –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ window events –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * @returns Promise<boolean>
 */
async function tryWindowEventRefresh(): Promise<boolean> {
  try {
    if (typeof window === 'undefined') return false
    
    console.log('üì° Using window events for artifact refresh...')
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º custom event –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const refreshEvent = new CustomEvent('artifact-list-refresh', {
      detail: { timestamp: Date.now(), source: 'elegant-refresh' }
    })
    
    window.dispatchEvent(refreshEvent)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º focus event (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ SWR –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —ç—Ç–æ)
    const focusEvent = new Event('focus')
    window.dispatchEvent(focusEvent)
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    console.log('‚úÖ Window events dispatched for artifact refresh')
    return true
    
  } catch (error) {
    console.error('‚ùå Window events refresh failed:', error)
    return false
  }
}

/**
 * @description Force refresh –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö artifact endpoints
 * @returns Promise<void>
 */
async function tryForceRefreshKnownEndpoints(): Promise<void> {
  try {
    console.log('üîÑ Force refreshing known artifact endpoints...')
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º revalidation —á–µ—Ä–µ–∑ fetch —Å cache invalidation
    const endpoints = [
      '/api/artifacts?page=1&pageSize=12',
      '/api/artifacts?groupByVersions=true',
      '/api/artifacts/recent'
    ]
    
    const fetchPromises = endpoints.map(endpoint => 
      fetch(endpoint, { 
        method: 'GET',
        cache: 'no-cache',
        headers: { 'Cache-Control': 'no-cache' }
      }).catch(error => {
        console.error(`Failed to force refresh ${endpoint}:`, error)
      })
    )
    
    await Promise.all(fetchPromises)
    console.log('‚úÖ Force refresh completed for known endpoints')
    
  } catch (error) {
    console.error('‚ùå Force refresh failed:', error)
  }
}

/**
 * @description Debounced –≤–µ—Ä—Å–∏—è hook –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
 * @param delay –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns Debounced —Ñ—É–Ω–∫—Ü–∏—è refreshArtifacts
 */
export function useDebouncedArtifactRefresh(delay = 1000) {
  const { refreshArtifacts } = useElegantArtifactRefresh()
  
  return useCallback(
    debounce(refreshArtifacts, delay),
    [refreshArtifacts, delay]
  )
}

/**
 * @description –ü—Ä–æ—Å—Ç–∞—è debounce —Ñ—É–Ω–∫—Ü–∏—è
 * @param func –§—É–Ω–∫—Ü–∏—è –¥–ª—è debounce
 * @param delay –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns Debounced —Ñ—É–Ω–∫—Ü–∏—è
 */
function debounce<T extends (...args: any[]) => any>(func: T, delay: number): T {
  let timeoutId: NodeJS.Timeout | null = null
  
  return ((...args: Parameters<T>) => {
    if (timeoutId) {
      clearTimeout(timeoutId)
    }
    
    timeoutId = setTimeout(() => {
      func(...args)
    }, delay)
  }) as T
}

// END OF: hooks/use-elegant-artifact-refresh.ts
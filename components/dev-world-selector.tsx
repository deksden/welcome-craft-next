/**
 * @file components/dev-world-selector.tsx
 * @description Dev-only —Å–µ–ª–µ–∫—Ç–æ—Ä –º–∏—Ä–æ–≤ —Å –±—ã—Å—Ç—Ä–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * @version 1.5.0
 * @date 2025-06-28
 * @updated –ü–û–õ–ù–ê–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–Ø - —Ç–æ–ª—å–∫–æ test-session cookie –∫–∞–∫ –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ –º–∏—Ä–µ
 */

/** HISTORY:
 * v1.5.0 (2025-06-28): –ü–û–õ–ù–ê–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–Ø - —É–±—Ä–∞–Ω—ã –≤—Å–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ cookies, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ test-session —Å worldId –≤–Ω—É—Ç—Ä–∏
 * v1.4.0 (2025-06-28): –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –ú–ò–†–ù–û–ô –°–ò–°–¢–ï–ú–´ - —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ cookie –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å WorldIndicator –∏ world-context
 * v1.3.0 (2025-06-28): FEATURE - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ User IDs, API –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–æ–≤
 * v1.2.1 (2025-06-28): BUG FIX - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ JSX
 * v1.2.0 (2025-06-28): UX IMPROVEMENT - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—é—â–∞—è—Å—è –æ–±–ª–∞—Å—Ç—å (max-h-[60vh]) –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–∏—Ä–æ–≤
 * v1.1.0 (2025-06-28): BUG FIX - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ runtime –æ—à–∏–±–∫–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º –∏–∫–æ–Ω–æ–∫ –∏ toast —Ç–∏–ø–∞–º–∏
 * v1.0.0 (2025-06-28): –°–æ–∑–¥–∞–Ω–∏–µ dev-only –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏ —Å –±—ã—Å—Ç—Ä–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */

'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Badge } from '@/components/ui/badge'
import { GlobeIcon, UserIcon, BoxIcon } from '@/components/icons'
import { toast } from '@/components/toast'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∏—Ä–æ–≤
const WORLDS_CONFIG = {
  CLEAN_USER_WORKSPACE: {
    name: '–ß–∏—Å—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
    user: { id: 'user-sarah', name: 'Sarah Wilson', email: 'sarah@example.com' },
    description: 'AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—è'
  },
  SITE_READY_FOR_PUBLICATION: {
    name: '–ì–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç',
    user: { id: 'user-ada', name: 'Ada Thompson', email: 'ada@example.com' },
    description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
  },
  CONTENT_LIBRARY_BASE: {
    name: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    user: { id: 'user-maria', name: 'Maria Garcia', email: 'maria@example.com' },
    description: '–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤'
  },
  DEMO_PREPARATION: {
    name: '–î–µ–º–æ-—Å—Ä–µ–¥–∞',
    user: { id: 'user-david', name: 'David Chen', email: 'david@example.com' },
    description: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —á–∞—Ç–æ–≤'
  },
  ENTERPRISE_ONBOARDING: {
    name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥',
    user: { id: 'user-elena', name: 'Elena Rodriguez', email: 'elena@example.com' },
    description: 'Enterprise-—É—Ä–æ–≤–µ–Ω—å'
  }
}

interface DevWorldSelectorProps {
  /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ */
  showInDev?: boolean
}

export function DevWorldSelector({ showInDev = true }: DevWorldSelectorProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [currentWorld, setCurrentWorld] = useState<string | null>(null)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const isDev = process.env.NODE_ENV === 'development'
  const isLocalhost = typeof window !== 'undefined' && window.location.hostname.includes('localhost')
  const hasPlaywrightPort = typeof window !== 'undefined' && !!process.env.PLAYWRIGHT_PORT

  // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∏—Ä –∏–∑ test-session cookie (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
  useEffect(() => {
    if (typeof window !== 'undefined') {
      try {
        const testSession = document.cookie
          .split('; ')
          .find(row => row.startsWith('test-session='))
        
        if (testSession) {
          const sessionData = JSON.parse(decodeURIComponent(testSession.split('=')[1]))
          if (sessionData.worldId) {
            setCurrentWorld(sessionData.worldId)
          }
        }
      } catch (error) {
        console.log('Could not read world from session:', error)
      }
    }
  }, [])
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ (–Ω–æ –ù–ï –≤ E2E —Ç–µ—Å—Ç–∞—Ö)
  if (!isDev || !isLocalhost || !showInDev || hasPlaywrightPort) {
    return null
  }

  const handleWorldLogin = async (worldId: string) => {
    setIsLoading(true)
    
    try {
      const world = WORLDS_CONFIG[worldId as keyof typeof WORLDS_CONFIG]
      if (!world) {
        throw new Error(`World ${worldId} not found`)
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º test auth API –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
      const response = await fetch('/api/test/auth-signin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Test-Environment': 'dev-world-selector',
        },
        body: JSON.stringify({
          email: world.user.email,
          name: world.user.name,
          userId: world.user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–∑ –º–∏—Ä–∞
          worldId: worldId
        }),
      })

      if (response.ok) {
        setCurrentWorld(worldId)
        toast({
          type: 'success',
          description: `–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ ${world.user.name} (${world.name})`
        })
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        window.location.reload()
      } else {
        throw new Error(`Authentication failed: ${response.status}`)
      }
    } catch (error) {
      console.error('World login failed:', error)
      toast({
        type: 'error',
        description: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–∏—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.'
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleLoadWorld = async (worldId: string) => {
    setIsLoading(true)
    
    try {
      toast({
        type: 'loading',
        description: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞...'
      })
      
      const response = await fetch('/api/dev/load-world', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ worldId })
      })

      if (response.ok) {
        const result = await response.json()
        toast({
          type: 'success',
          description: `–ú–∏—Ä "${result.world.name}" –∑–∞–≥—Ä—É–∂–µ–Ω: ${result.world.artifactsCount} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤`
        })
      } else {
        const error = await response.json()
        throw new Error(error.details || 'Unknown error')
      }
    } catch (error) {
      console.error('World loading failed:', error)
      toast({
        type: 'error',
        description: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–∞: ${error instanceof Error ? error.message : 'Unknown error'}`
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex items-center gap-2">
      <Badge variant="outline" className="text-xs bg-yellow-50 text-yellow-800 border-yellow-200">
        DEV
      </Badge>
      
      {currentWorld && (
        <Badge variant="outline" className="text-xs bg-blue-50 text-blue-800 border-blue-200">
          üåç {WORLDS_CONFIG[currentWorld as keyof typeof WORLDS_CONFIG]?.name}
        </Badge>
      )}
      
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button 
            variant="outline" 
            size="sm" 
            className="text-xs"
            disabled={isLoading}
          >
            <GlobeIcon className="size-4 mr-1" />
            {currentWorld ? WORLDS_CONFIG[currentWorld as keyof typeof WORLDS_CONFIG]?.name : '–í—ã–±—Ä–∞—Ç—å –º–∏—Ä'}
          </Button>
        </DropdownMenuTrigger>
        
        <DropdownMenuContent align="end" className="w-80 max-h-[70vh] overflow-hidden">
          <DropdownMenuLabel className="flex items-center gap-2 sticky top-0 bg-background z-10">
            <BoxIcon className="size-4" />
            –¢–µ—Å—Ç–æ–≤—ã–µ –º–∏—Ä—ã (Dev)
          </DropdownMenuLabel>
          <DropdownMenuSeparator />
          
          <div className="max-h-[60vh] overflow-y-auto">
            {Object.entries(WORLDS_CONFIG).map(([worldId, world]) => (
              <DropdownMenuItem key={worldId} className="flex-col items-start p-3 cursor-pointer">
                <div className="w-full space-y-2">
                  <div className="flex items-center justify-between w-full">
                    <span className="font-medium text-sm">{world.name}</span>
                    <Badge variant="secondary" className="text-xs">{worldId}</Badge>
                  </div>
                  
                  <div className="flex items-center gap-2 text-xs text-muted-foreground">
                    <UserIcon className="size-3" />
                    {world.user.name} ({world.user.email})
                  </div>
                  
                  <p className="text-xs text-muted-foreground">{world.description}</p>
                  
                  <div className="flex gap-2 pt-1">
                    <Button
                      size="sm"
                      variant="outline"
                      className="text-xs h-6 px-2"
                      onClick={(e) => {
                        e.stopPropagation()
                        handleWorldLogin(worldId)
                      }}
                      disabled={isLoading}
                    >
                      –í–æ–π—Ç–∏
                    </Button>
                    
                    <Button
                      size="sm"
                      variant="ghost"
                      className="text-xs h-6 px-2"
                      onClick={(e) => {
                        e.stopPropagation()
                        handleLoadWorld(worldId)
                      }}
                      disabled={isLoading}
                    >
                      –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </Button>
                  </div>
                </div>
              </DropdownMenuItem>
            ))}
          </div>
          
          <DropdownMenuSeparator />
          
          <DropdownMenuItem className="text-xs text-muted-foreground">
            üí° –í production —Ä–µ–∂–∏–º–µ —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–∫—Ä—ã—Ç
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

// END OF: components/dev-world-selector.tsx
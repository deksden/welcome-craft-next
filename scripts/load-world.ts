#!/usr/bin/env tsx

/**
 * @file scripts/load-world.ts
 * @description –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏—Ä–æ–≤ –≤ dev –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @version 1.0.0
 * @date 2025-06-28
 * @updated –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–æ–≤ –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ
 */

/** HISTORY:
 * v1.0.0 (2025-06-28): –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–æ–≤ –≤ dev –±–∞–∑—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –æ–ø—Ü–∏–π
 */

import { config } from 'dotenv'
import postgres from 'postgres'
import { getWorldDefinition, validateWorld, WORLDS } from '../tests/helpers/worlds.config'
import type { WorldId } from '../tests/helpers/worlds.config'

// Load environment
config({ path: '.env.local' })

interface LoadWorldOptions {
  worldId?: WorldId
  list?: boolean
  clean?: boolean
  force?: boolean
  dryRun?: boolean
  verbose?: boolean
  help?: boolean
}

const USAGE = `
üåç WelcomeCraft World Loader - –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏—Ä–æ–≤ –≤ dev –±–∞–∑—É

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  npx tsx scripts/load-world.ts [WORLD_ID] [OPTIONS]

–ú–ò–†–´:
  CLEAN_USER_WORKSPACE      - –ß–∏—Å—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (Sarah Wilson)
  SITE_READY_FOR_PUBLICATION - –ì–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç (Ada Thompson)  
  CONTENT_LIBRARY_BASE      - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Maria Garcia)
  DEMO_PREPARATION          - –î–µ–º–æ-—Å—Ä–µ–¥–∞ (David Chen)
  ENTERPRISE_ONBOARDING     - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (Elena Rodriguez)

–û–ü–¶–ò–ò:
  --list, -l               –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏—Ä—ã
  --clean, -c              –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
  --force, -f              –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  --dry-run, -d            –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  --verbose, -v            –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
  --help, -h               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
  npx tsx scripts/load-world.ts --list
  npx tsx scripts/load-world.ts CONTENT_LIBRARY_BASE
  npx tsx scripts/load-world.ts CLEAN_USER_WORKSPACE --clean --verbose
  npx tsx scripts/load-world.ts ENTERPRISE_ONBOARDING --dry-run
`

function parseArgs(): LoadWorldOptions {
  const args = process.argv.slice(2)
  const options: LoadWorldOptions = {}

  for (let i = 0; i < args.length; i++) {
    const arg = args[i]
    
    switch (arg) {
      case '--list':
      case '-l':
        options.list = true
        break
      case '--clean':
      case '-c':
        options.clean = true
        break
      case '--force':
      case '-f':
        options.force = true
        break
      case '--dry-run':
      case '-d':
        options.dryRun = true
        break
      case '--verbose':
      case '-v':
        options.verbose = true
        break
      case '--help':
      case '-h':
        options.help = true
        break
      default:
        if (!arg.startsWith('-') && !options.worldId) {
          options.worldId = arg as WorldId
        }
        break
    }
  }

  return options
}

function listWorlds() {
  console.log('\nüåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∏—Ä—ã:\n')
  
  Object.entries(WORLDS).forEach(([id, world]) => {
    const user = world.users[0]
    console.log(`üìã ${id}`)
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${world.name}`)
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${world.description}`)
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`)
    console.log(`   –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${world.artifacts.length}`)
    console.log(`   –ß–∞—Ç—ã: ${world.chats.length}`)
    console.log('')
  })
  
  console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npx tsx scripts/load-world.ts [WORLD_ID] –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏')
}

async function checkEnvironment(): Promise<boolean> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  if (process.env.NODE_ENV === 'production') {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏!')
    return false
  }

  if (!process.env.POSTGRES_URL) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: POSTGRES_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env.local')
    return false
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞
  try {
    const connection = postgres(process.env.POSTGRES_URL, { max: 1 })
    await connection`SELECT 1`
    await connection.end()
    return true
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error)
    return false
  }
}

async function loadWorld(worldId: WorldId, options: LoadWorldOptions) {
  console.log(`üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Ä–∞: ${worldId}`)
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏—Ä–∞
  try {
    validateWorld(worldId)
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏—Ä–∞ ${worldId}:`, error)
    return false
  }

  const worldDef = getWorldDefinition(worldId)
  
  if (options.dryRun) {
    console.log('\nüîç –†–ï–ñ–ò–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê (--dry-run)')
    console.log('–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ:')
    console.log(`  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${worldDef.users.length}`)
    worldDef.users.forEach(user => {
      console.log(`    - ${user.name} (${user.email})`)
    })
    console.log(`  üìÑ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${worldDef.artifacts.length}`)
    worldDef.artifacts.forEach(artifact => {
      console.log(`    - ${artifact.title} (${artifact.kind})`)
    })
    console.log(`  üí¨ –ß–∞—Ç—ã: ${worldDef.chats.length}`)
    worldDef.chats.forEach(chat => {
      console.log(`    - ${chat.title}`)
    })
    console.log('\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —É–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥ --dry-run')
    return true
  }

  try {
    console.log('\n‚ö†Ô∏è  –ü–û–ö–ê –í –†–ê–ó–†–ê–ë–û–¢–ö–ï: –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞')
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ä–µ:')
    console.log(`  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${worldDef.users.length}`)
    worldDef.users.forEach(user => {
      console.log(`    - ${user.name} (${user.email}) - —Ä–æ–ª—å: ${user.role}`)
    })
    console.log(`  üìÑ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${worldDef.artifacts.length}`)
    worldDef.artifacts.forEach(artifact => {
      console.log(`    - ${artifact.title} (${artifact.kind})`)
    })
    
    console.log('\nüåê –î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DevWorldSelector:')
    console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ`)
    console.log(`   2. –ù–∞–π–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –º–∏—Ä" –≤ header (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)`)
    console.log(`   3. –í—ã–±–µ—Ä–∏—Ç–µ "${worldDef.name}" –∏ –Ω–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏"`)
    console.log(`   4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –∫–∞–∫ ${worldDef.users[0].name}`)
    
    console.log('\nüí° –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö')
    
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–∞:', error)
    return false
  }
}

async function main() {
  const options = parseArgs()

  if (options.help) {
    console.log(USAGE)
    return
  }

  if (options.list) {
    listWorlds()
    return
  }

  if (!options.worldId) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω ID –º–∏—Ä–∞')
    console.log('\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Ä–æ–≤')
    console.log('üí° –ò–ª–∏ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏')
    process.exit(1)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  const envOk = await checkEnvironment()
  if (!envOk) {
    process.exit(1)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!WORLDS[options.worldId]) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê: –ú–∏—Ä "${options.worldId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    console.log('\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏—Ä—ã:')
    Object.keys(WORLDS).forEach(id => console.log(`  - ${id}`))
    process.exit(1)
  }

  console.log('üåç WelcomeCraft World Loader')
  console.log('================================')
  
  const success = await loadWorld(options.worldId, options)
  
  if (!success) {
    process.exit(1)
  }
}

main().catch(console.error)

// END OF: scripts/load-world.ts
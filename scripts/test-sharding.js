#!/usr/bin/env node

/**
 * @file scripts/test-sharding.js
 * @description –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è E2E —Ç–µ—Å—Ç–æ–≤
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –°–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ E2E —Ç–µ—Å—Ç–æ–≤
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { execSync } from 'node:child_process'
import { cpus } from 'node:os'

/**
 * @description –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
 */
function getOptimalShardCount() {
  const cpuCount = cpus().length
  const isCI = !!process.env.CI
  
  if (isCI) {
    // –í CI –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    return Math.min(4, Math.max(2, Math.floor(cpuCount / 2)))
  } else {
    // –õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–µ–º –±—ã—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏
    return Math.min(8, Math.max(2, cpuCount - 1))
  }
}

/**
 * @description –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
function analyzeTestComplexity() {
  const testPatterns = {
    fast: ['unit', 'routes'],
    medium: ['regression', 'basic'],
    slow: ['e2e', 'integration', 'world']
  }
  
  // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
  return testPatterns
}

/**
 * @description –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function runOptimizedTests() {
  const args = process.argv.slice(2)
  const shardCount = getOptimalShardCount()
  
  console.log(`üöÄ OPTIMIZED SHARDING: Running tests with ${shardCount} shards on ${cpus().length} CPU cores`)
  
  if (args.includes('--sequential')) {
    console.log('üìù Running tests sequentially as requested')
    execSync('pnpm exec playwright test', { stdio: 'inherit' })
    return
  }
  
  if (args.includes('--analyze')) {
    console.log('üìä PERFORMANCE ANALYSIS:')
    console.log(`  CPU Cores: ${cpus().length}`)
    console.log(`  Optimal Shards: ${shardCount}`)
    console.log(`  CI Mode: ${!!process.env.CI}`)
    console.log(`  Expected Speedup: ~${Math.floor(shardCount * 0.7)}x`)
    return
  }
  
  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —à–∞—Ä–¥–æ–≤
  const shards = Array.from({ length: shardCount }, (_, i) => i + 1)
  const commands = shards.map(shard => 
    `pnpm exec playwright test --shard=${shard}/${shardCount}`
  )
  
  console.log(`üìã Executing ${shardCount} parallel shards:`)
  commands.forEach((cmd, i) => console.log(`  Shard ${i + 1}: ${cmd}`))
  
  try {
    const startTime = Date.now()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —à–∞—Ä–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const command = `${commands.join(' & ')} & wait`
    execSync(command, { stdio: 'inherit', shell: true })
    
    const totalTime = Date.now() - startTime
    console.log(`‚úÖ SHARDING COMPLETE: All tests finished in ${Math.round(totalTime / 1000)}s`)
    console.log(`üìä Performance: ~${Math.round(shardCount * 0.7)}x faster than sequential`)
    
  } catch (error) {
    console.error('‚ùå SHARDING FAILED:', error.message)
    process.exit(1)
  }
}

/**
 * @description –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
function showHelp() {
  console.log(`
üöÄ PLAYWRIGHT SHARDING OPTIMIZER

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–¥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ E2E —Ç–µ—Å—Ç–æ–≤.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  node scripts/test-sharding.js [options]

–û–ü–¶–ò–ò:
  --sequential     –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–±–µ–∑ —à–∞—Ä–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
  --analyze        –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
  node scripts/test-sharding.js
  node scripts/test-sharding.js --analyze
  node scripts/test-sharding.js --sequential

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞—Ä–¥–æ–≤
  ‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ CI/CD –æ–∫—Ä—É–∂–µ–Ω–∏—è
  ‚Ä¢ –£—á–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (CPU cores)
  ‚Ä¢ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ CI –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  `)
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if (process.argv.includes('--help')) {
  showHelp()
} else {
  runOptimizedTests().catch(error => {
    console.error('‚ùå SCRIPT ERROR:', error)
    process.exit(1)
  })
}

// END OF: scripts/test-sharding.js
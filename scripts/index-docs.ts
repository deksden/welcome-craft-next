#!/usr/bin/env tsx
/**
 * @file scripts/index-docs.ts
 * @description –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ SystemDocs —Ç–∞–±–ª–∏—Ü—É –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
 * @version 1.0.0
 * @date 2025-07-02
 * @updated TASK-AI-TOOLS-IMPLEMENTATION - –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
 */

/** HISTORY:
 * v1.0.0 (2025-07-02): TASK-AI-TOOLS-IMPLEMENTATION - –°–∫—Ä–∏–ø—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç .memory-bank/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≤—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à–∏ —Ñ–∞–π–ª–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç summary –∏ embeddings –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */

import 'server-only'
import { promises as fs } from 'node:fs'
import path from 'node:path'
import crypto from 'node:crypto'
import { db } from '@/lib/db'
import { systemDocs } from '@/lib/db/schema'
import { eq } from 'drizzle-orm'
import { generateText, embed } from 'ai'
import { google } from '@ai-sdk/google'

/**
 * @description –í—ã—á–∏—Å–ª—è–µ—Ç SHA256 —Ö—ç—à –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
 * @param content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @returns SHA256 —Ö—ç—à –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
 */
function calculateHash(content: string): string {
  return crypto.createHash('sha256').update(content, 'utf8').digest('hex')
}

/**
 * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @returns Promise —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
 */
async function generateDocumentSummary(filePath: string, content: string): Promise<string> {
  try {
    const prompt = `–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 30 —Å–ª–æ–≤) –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ WelcomeCraft. –§–∞–π–ª: ${filePath}

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:
${content.slice(0, 2000)}...`

    const { text } = await generateText({
      model: google('gemini-2.0-flash'),
      prompt,
    })
    
    return text || '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ WelcomeCraft'
  } catch (error) {
    console.warn(`Failed to generate summary for ${filePath}:`, error)
    return `–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${path.basename(filePath, '.md')}`
  }
}

/**
 * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @param content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * @returns Promise —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–º –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function generateDocumentEmbedding(content: string): Promise<number[] | null> {
  try {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (–ø–µ—Ä–≤—ã–µ 8000 —Å–∏–º–≤–æ–ª–æ–≤)
    const truncatedContent = content.slice(0, 8000)
    
    const { embedding } = await embed({
      model: google.textEmbeddingModel('text-embedding-004'),
      value: truncatedContent,
    })
    
    return embedding
  } catch (error) {
    console.warn('Failed to generate embedding:', error)
    return null
  }
}

/**
 * @description –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ markdown —Ñ–∞–π–ª–∞
 * @param content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (–¥–ª—è fallback)
 * @returns –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function extractTitle(content: string, filePath: string): string {
  // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ # –≤ —Ñ–∞–π–ª–µ
  const titleMatch = content.match(/^#\s+(.+)$/m)
  if (titleMatch) {
    return titleMatch[1].trim()
  }
  
  // Fallback: –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  return path.basename(filePath, '.md')
}

/**
 * @description –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã
 * @param dirPath - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Promise —Å –º–∞—Å—Å–∏–≤–æ–º –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
 */
async function scanDocumentationFiles(dirPath: string): Promise<string[]> {
  const files: string[] = []
  
  async function scanDirectory(currentPath: string) {
    try {
      const entries = await fs.readdir(currentPath, { withFileTypes: true })
      
      for (const entry of entries) {
        const fullPath = path.join(currentPath, entry.name)
        
        if (entry.isDirectory()) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          if (!entry.name.startsWith('.') || entry.name === '.memory-bank') {
            await scanDirectory(fullPath)
          }
        } else if (entry.isFile() && entry.name.endsWith('.md')) {
          files.push(fullPath)
        }
      }
    } catch (error) {
      console.warn(`Failed to scan directory ${currentPath}:`, error)
    }
  }
  
  await scanDirectory(dirPath)
  return files
}

/**
 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processDocument(filePath: string): Promise<{
  action: 'created' | 'updated' | 'skipped'
  filePath: string
}> {
  try {
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const content = await fs.readFile(filePath, 'utf8')
    const contentHash = calculateHash(content)
    const stats = await fs.stat(filePath)
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
    const relativePath = path.relative(process.cwd(), filePath)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    const existingDoc = await db
      .select()
      .from(systemDocs)
      .where(eq(systemDocs.id, relativePath))
      .limit(1)
    
    // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (existingDoc.length > 0 && existingDoc[0].contentHash === contentHash) {
      return { action: 'skipped', filePath: relativePath }
    }
    
    console.log(`Processing: ${relativePath}`)
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary
    const title = extractTitle(content, filePath)
    const summary = await generateDocumentSummary(relativePath, content)
    const embedding = await generateDocumentEmbedding(content)
    
    const docData = {
      id: relativePath,
      title,
      summary,
      contentHash,
      fileSize: stats.size,
      mimeType: 'text/markdown',
      embedding,
      updatedAt: new Date(),
    }
    
    if (existingDoc.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
      await db
        .update(systemDocs)
        .set(docData)
        .where(eq(systemDocs.id, relativePath))
      
      return { action: 'updated', filePath: relativePath }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      await db
        .insert(systemDocs)
        .values({
          ...docData,
          createdAt: new Date(),
        })
      
      return { action: 'created', filePath: relativePath }
    }
  } catch (error) {
    console.error(`Failed to process ${filePath}:`, error)
    return { action: 'skipped', filePath }
  }
}

/**
 * @description –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
 */
async function main() {
  console.log('üöÄ TASK-AI-TOOLS-IMPLEMENTATION: Starting documentation indexing...')
  
  const startTime = Date.now()
  const docsPath = path.join(process.cwd(), '.memory-bank')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  try {
    await fs.access(docsPath)
  } catch {
    console.error(`Documentation directory not found: ${docsPath}`)
    process.exit(1)
  }
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ .md —Ñ–∞–π–ª—ã
  console.log(`Scanning documentation in: ${docsPath}`)
  const files = await scanDocumentationFiles(docsPath)
  console.log(`Found ${files.length} documentation files`)
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  const results = {
    created: 0,
    updated: 0,
    skipped: 0,
    errors: 0,
  }
  
  for (const file of files) {
    const result = await processDocument(file)
    
    switch (result.action) {
      case 'created':
        results.created++
        console.log(`  ‚úÖ Created: ${result.filePath}`)
        break
      case 'updated':
        results.updated++
        console.log(`  üîÑ Updated: ${result.filePath}`)
        break
      case 'skipped':
        results.skipped++
        console.log(`  ‚è≠Ô∏è  Skipped: ${result.filePath}`)
        break
    }
  }
  
  const elapsed = Date.now() - startTime
  console.log('\nüìä Documentation indexing completed!')
  console.log(`üìà Results:`)
  console.log(`  - Created: ${results.created}`)
  console.log(`  - Updated: ${results.updated}`)
  console.log(`  - Skipped: ${results.skipped}`)
  console.log(`  - Total files: ${files.length}`)
  console.log(`‚è±Ô∏è  Time elapsed: ${elapsed}ms`)
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch((error) => {
    console.error('Documentation indexing failed:', error)
    process.exit(1)
  })
}

export { main as indexDocumentation }

// END OF: scripts/index-docs.ts
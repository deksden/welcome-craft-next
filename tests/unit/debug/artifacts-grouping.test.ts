/**
 * @file tests/unit/debug/artifacts-grouping.test.ts
 * @description –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 * @version 1.0.0
 * @date 2025-06-20
 * @purpose –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BUG-023 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á–µ–º—É —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–∏
 */

/** HISTORY:
 * v1.0.0 (2025-06-20): –°–æ–∑–¥–∞–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å groupByVersions=true
 */

import { beforeEach, describe, expect, it, vi } from 'vitest'
import { getPagedArtifactsByUserId } from '@/lib/db/queries'
import { db } from '@/lib/db'

// –ú–æ–∫–∏—Ä—É–µ–º –ë–î —Å –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–æ–π Drizzle
vi.mock('@/lib/db', () => ({
  db: {
    select: vi.fn(() => ({
      from: vi.fn(() => ({
        where: vi.fn(() => ({
          orderBy: vi.fn(() => [])
        }))
      }))
    })),
  },
}))

describe('üîç Artifacts Grouping Diagnosis (BUG-023)', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it('üß™ should group artifacts correctly for groupByVersions=true', async () => {
    // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢: –§–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∞ –Ω–µ –Ω–∞ SQL
    vi.mocked(db.select).mockImplementation(() => ({
      from: () => ({
        where: () => ({
          orderBy: () => Promise.resolve([
            { 
              id: 'artifact-1', 
              title: 'Test Artifact 1 V2', 
              createdAt: new Date('2025-06-20T10:00:00Z'),
              kind: 'text',
              userId: 'user-1'
            },
            { 
              id: 'artifact-1', 
              title: 'Test Artifact 1 V1', 
              createdAt: new Date('2025-06-19T10:00:00Z'),
              kind: 'text',
              userId: 'user-1'
            },
            { 
              id: 'artifact-2', 
              title: 'Test Artifact 2 V1', 
              createdAt: new Date('2025-06-18T10:00:00Z'),
              kind: 'site', 
              userId: 'user-1'
            }
          ])
        })
      })
    }) as any)

    const result = await getPagedArtifactsByUserId({
      userId: 'user-1',
      page: 1,
      pageSize: 10,
      groupByVersions: true
    })

    // ‚úÖ –ì–õ–ê–í–ù–û–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    expect(result.data).toHaveLength(2) // 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    expect(result.totalCount).toBe(2)
    
    const returnedIds = result.data.map(a => a.id)
    const uniqueIds = [...new Set(returnedIds)]
    expect(returnedIds).toEqual(uniqueIds) // No duplicates
    
    console.log('‚úÖ BUG-023 Test: JavaScript grouping works correctly')
  })

  it('üß™ should return all versions for groupByVersions=false', async () => {
    // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢: –ú–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π
    vi.mocked(db.select).mockImplementation(() => ({
      from: () => ({
        where: () => Promise.resolve([{ count: 3 }])
      })
    }) as any)
    
    // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–ª—è data
    vi.mocked(db.select).mockImplementationOnce(() => ({
      from: () => ({
        where: () => Promise.resolve([{ count: 3 }])
      })
    }) as any).mockImplementationOnce(() => ({
      from: () => ({
        where: () => ({
          orderBy: () => ({
            limit: () => ({
              offset: () => Promise.resolve([
                { id: 'artifact-1', title: 'Test V2', createdAt: new Date('2025-06-20') },
                { id: 'artifact-1', title: 'Test V1', createdAt: new Date('2025-06-19') },
                { id: 'artifact-2', title: 'Other V1', createdAt: new Date('2025-06-18') }
              ])
            })
          })
        })
      })
    }) as any)

    const result = await getPagedArtifactsByUserId({
      userId: 'user-1', 
      page: 1,
      pageSize: 10,
      groupByVersions: false
    })

    expect(result.data).toHaveLength(3) // –í—Å–µ –≤–µ—Ä—Å–∏–∏ –≤–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
    expect(result.totalCount).toBe(3)
    
    console.log('‚úÖ BUG-023 Test: No grouping works correctly')
  })

  it('üö® DIAGNOSTIC: Log actual groupByVersions parameter processing', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ API
    
    // –¢–µ—Å—Ç 1: –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (true)
    const defaultGrouping = new URLSearchParams('').get('groupByVersions') !== 'false'
    expect(defaultGrouping).toBe(true) // Default –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true
    
    // –¢–µ—Å—Ç 2: –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π true
    const explicitTrue = new URLSearchParams('groupByVersions=true').get('groupByVersions') !== 'false'
    expect(explicitTrue).toBe(true)
    
    // –¢–µ—Å—Ç 3: –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π false
    const explicitFalse = new URLSearchParams('groupByVersions=false').get('groupByVersions') !== 'false'
    expect(explicitFalse).toBe(false)

    console.log('‚úÖ Parameter processing works correctly')
  })
})

// END OF: tests/unit/debug/artifacts-grouping.test.ts
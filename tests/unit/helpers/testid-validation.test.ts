/**
 * @file tests/unit/helpers/testid-validation.test.ts
 * @description –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è testid registry –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
 * @version 1.0.0
 * @date 2025-07-03
 * @updated –°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è testid –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è bagov —Ç–∏–ø–∞ UC-11
 */

/** HISTORY:
 * v1.0.0 (2025-07-03): –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è testid registry
 */

import { describe, it, expect } from 'vitest';
import fs from 'node:fs';
import path from 'node:path';
import { TESTIDS, TestIdValidation, TestSelectors } from '../../helpers/testid-registry';

describe('TestID Registry Validation', () => {
  
  it('should have no duplicate testids in registry', () => {
    const duplicates = TestIdValidation.findDuplicates();
    expect(duplicates).toEqual([]);
  });

  it('should follow kebab-case naming convention', () => {
    const allIds = TestIdValidation.getAllTestIds();
    const invalidIds: string[] = [];
    
    for (const id of allIds) {
      if (!TestIdValidation.isValidTestId(id)) {
        invalidIds.push(id);
      }
    }
    
    expect(invalidIds).toEqual([]);
  });

  it('should have all critical UI elements defined', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö testid
    const criticalIds = [
      TESTIDS.auth.emailInput,
      TESTIDS.auth.passwordInput,
      TESTIDS.header.container,
      TESTIDS.chat.inputTextarea,
      TESTIDS.artifact.card,
      TESTIDS.fileImport.dropZone
    ];
    
    for (const id of criticalIds) {
      expect(id).toBeDefined();
      expect(typeof id).toBe('string');
      expect(id.length).toBeGreaterThan(0);
    }
  });

  it('should generate valid selectors', () => {
    expect(TestSelectors.byTestId('test-id')).toBe('[data-testid="test-id"]');
    expect(TestSelectors.byPath('auth.emailInput')).toBe('[data-testid="auth-email-input"]');
    expect(TestSelectors.byPath('fileImport.dropZone')).toBe('[data-testid="file-drop-zone"]');
  });

  it('should throw error for invalid paths', () => {
    expect(() => TestSelectors.byPath('invalid.path')).toThrow();
    expect(() => TestSelectors.byPath('auth.nonexistent')).toThrow();
  });
});

describe('Component-Registry Consistency Check', () => {
  
  it('should validate component testids exist in registry', async () => {
    const componentsDir = path.join(process.cwd(), 'components');
    const appDir = path.join(process.cwd(), 'app');
    
    const registryIds = new Set(TestIdValidation.getAllTestIds());
    const componentTestIds: string[] = [];
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ testid –≤ —Ñ–∞–π–ª–∞—Ö
    const findTestIdsInFile = (filePath: string) => {
      try {
        const content = fs.readFileSync(filePath, 'utf8');
        const matches = content.match(/data-testid=["']([^"']+)["']/g);
        
        if (matches) {
          for (const match of matches) {
            const testId = match.match(/data-testid=["']([^"']+)["']/)?.[1];
            if (testId) {
              componentTestIds.push(testId);
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ .tsx —Ñ–∞–π–ª–æ–≤
    const scanDirectory = (dir: string) => {
      try {
        const files = fs.readdirSync(dir);
        
        for (const file of files) {
          const filePath = path.join(dir, file);
          const stat = fs.statSync(filePath);
          
          if (stat.isDirectory() && !file.includes('node_modules') && !file.startsWith('.')) {
            scanDirectory(filePath);
          } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
            findTestIdsInFile(filePath);
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
      }
    };
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ app –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    scanDirectory(componentsDir);
    scanDirectory(appDir);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ testid –µ—Å—Ç—å –≤ registry
    const missingInRegistry: string[] = [];
    const uniqueComponentIds = [...new Set(componentTestIds)];
    
    for (const testId of uniqueComponentIds) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ testid (—Å–æ–¥–µ—Ä–∂–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
      if (!testId.includes('${') && !testId.includes('{') && !registryIds.has(testId)) {
        missingInRegistry.push(testId);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    console.log(`üìä TestID Statistics:
    - Registry contains: ${registryIds.size} testids
    - Found in components: ${uniqueComponentIds.length} testids
    - Missing in registry: ${missingInRegistry.length} testids`);
    
    if (missingInRegistry.length > 0) {
      console.log(`‚ùå Missing testids:`, missingInRegistry);
    }
    
    // –ü–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (missingInRegistry.length > 10) {
      console.warn(`‚ö†Ô∏è Many testids missing in registry. Consider updating TESTIDS registry.`);
    }
  });
});

describe('E2E Test-Registry Consistency Check', () => {
  
  it('should validate E2E tests use registry testids', async () => {
    const testsDir = path.join(process.cwd(), 'tests/e2e');
    const registryIds = new Set(TestIdValidation.getAllTestIds());
    const testFileSelectors: string[] = [];
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ testid —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –≤ E2E —Ç–µ—Å—Ç–∞—Ö
    const findSelectorsInFile = (filePath: string) => {
      try {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –ò—â–µ–º getByTestId('...') –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const getByTestIdMatches = content.match(/getByTestId\(['"]([^'"]+)['"]\)/g);
        if (getByTestIdMatches) {
          for (const match of getByTestIdMatches) {
            const testId = match.match(/getByTestId\(['"]([^'"]+)['"]\)/)?.[1];
            if (testId) {
              testFileSelectors.push(testId);
            }
          }
        }
        
        // –ò—â–µ–º [data-testid="..."] –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const dataTestIdMatches = content.match(/\[data-testid=["']([^"']+)["']\]/g);
        if (dataTestIdMatches) {
          for (const match of dataTestIdMatches) {
            const testId = match.match(/\[data-testid=["']([^"']+)["']\]/)?.[1];
            if (testId) {
              testFileSelectors.push(testId);
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    };
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º E2E —Ç–µ—Å—Ç—ã
    const scanTestDirectory = (dir: string) => {
      try {
        const files = fs.readdirSync(dir);
        
        for (const file of files) {
          const filePath = path.join(dir, file);
          const stat = fs.statSync(filePath);
          
          if (stat.isDirectory()) {
            scanTestDirectory(filePath);
          } else if (file.endsWith('.test.ts')) {
            findSelectorsInFile(filePath);
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
      }
    };
    
    scanTestDirectory(testsDir);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const uniqueSelectors = [...new Set(testFileSelectors)];
    const missingSelectors: string[] = [];
    
    for (const selector of uniqueSelectors) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å wildcard (*) –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
      if (!selector.includes('*') && !selector.includes('${') && !registryIds.has(selector)) {
        missingSelectors.push(selector);
      }
    }
    
    console.log(`üìä E2E TestID Statistics:
    - Found in E2E tests: ${uniqueSelectors.length} testid selectors
    - Missing in registry: ${missingSelectors.length} selectors`);
    
    if (missingSelectors.length > 0) {
      console.log(`‚ùå E2E selectors missing in registry:`, missingSelectors.slice(0, 10));
    }
    
    // –ü–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
    if (missingSelectors.length > 15) {
      console.warn(`‚ö†Ô∏è Many E2E selectors missing in registry. Consider updating TESTIDS registry.`);
    }
  });
});

// END OF: tests/unit/helpers/testid-validation.test.ts
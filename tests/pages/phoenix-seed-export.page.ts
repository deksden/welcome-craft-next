/**
 * @file tests/pages/phoenix-seed-export.page.ts
 * @description POM for Phoenix Seed Export Page - following WelcomeCraft coding standards
 * @version 1.0.0
 * @date 2025-07-01
 * @updated Created POM for Phoenix Seed Export page with fail-fast locators
 */

/** HISTORY:
 * v1.0.0 (2025-07-01): Created Phoenix Seed Export POM –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ —Å data-testid —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
 */

import { type Page, type Locator, expect } from '@playwright/test'

/**
 * Phoenix Seed Export Page Object Model
 * 
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Phoenix Seed Export —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º WelcomeCraft POM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 * 
 * @feature PHOENIX PROJECT - Seed Data Management
 * @feature Fail-fast –ª–æ–∫–∞—Ç–æ—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º timeout
 * @feature –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export class PhoenixSeedExportPage {
  constructor(private page: Page) {}

  // === BASIC NAVIGATION ===
  
  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ Phoenix Seed Export —Å—Ç—Ä–∞–Ω–∏—Ü—É
   */
  async navigate(): Promise<void> {
    await this.page.goto('/phoenix/seed-export')
    await this.waitForPageLoad()
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Seed Export
   */
  async waitForPageLoad(): Promise<void> {
    // –ñ–¥–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Seed Export –∏–ª–∏ Access Denied
    await this.page.waitForSelector('h1:has-text("Seed Export"), h2:has-text("Access Denied")', { timeout: 10000 })
  }

  // === ACCESS CONTROL ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Access Denied —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async verifyAccessDenied(): Promise<void> {
    await expect(this.page.locator('h2:has-text("Access Denied")')).toBeVisible({ timeout: 5000 })
    await expect(this.page.locator('text=This feature is only available for admins in the LOCAL environment')).toBeVisible({ timeout: 5000 })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–æ—Ä–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞)
   */
  async verifyFormAvailable(): Promise<void> {
    await expect(this.page.locator('h1:has-text("Seed Export")')).toBeVisible({ timeout: 5000 })
    await expect(this.page.locator('text=Export World Seed')).toBeVisible({ timeout: 5000 })
  }

  // === FORM ELEMENTS ===

  get worldSelect(): Locator {
    return this.page.locator('#world-select')
  }

  get dataSourceSelect(): Locator {
    return this.page.locator('#source-db')
  }

  get includeBlobsCheckbox(): Locator {
    return this.page.locator('#include-blobs')
  }

  get directoryNameInput(): Locator {
    return this.page.locator('#seed-name')
  }

  get startExportButton(): Locator {
    return this.page.getByRole('button', { name: 'Start Export' })
  }

  get manualDbUrlInput(): Locator {
    return this.page.locator('#manual-db-url')
  }

  // === RADIX UI SELECT ROBUST INTERACTION HELPERS ===
  
  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ React state —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è Radix UI Select
   * @param expectedWorldValue –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∏—Ä–∞
   * @param expectedSourceValue –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async verifyReactStateSynchronization(expectedWorldValue?: string, expectedSourceValue?: string): Promise<void> {
    console.log('üîç Verifying React state synchronization (simplified)...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ input values –∏ aria-expanded state
    const stateCheck = await this.page.evaluate((expected) => {
      const worldTrigger = document.querySelector('#world-select')
      const sourceTrigger = document.querySelector('#source-db')
      
      return {
        worldDisplayValue: worldTrigger?.textContent?.trim() || 'unknown',
        sourceDisplayValue: sourceTrigger?.textContent?.trim() || 'unknown',
        worldAriaExpanded: worldTrigger?.getAttribute('aria-expanded'),
        sourceAriaExpanded: sourceTrigger?.getAttribute('aria-expanded'),
        timestamp: Date.now()
      }
    }, { expectedWorldValue, expectedSourceValue })
    
    console.log('üîç Simplified state check results:', stateCheck)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (expectedWorldValue) {
      const worldDisplayed = stateCheck.worldDisplayValue.includes(expectedWorldValue)
      if (!worldDisplayed) {
        console.warn(`‚ö†Ô∏è World visual mismatch: expected "${expectedWorldValue}", display shows "${stateCheck.worldDisplayValue}"`)
      } else {
        console.log(`‚úÖ World visual state correct: "${stateCheck.worldDisplayValue}"`)
      }
    }
    
    if (expectedSourceValue) {
      const sourceDisplayed = stateCheck.sourceDisplayValue.includes(expectedSourceValue)
      if (!sourceDisplayed) {
        console.warn(`‚ö†Ô∏è Source visual mismatch: expected "${expectedSourceValue}", display shows "${stateCheck.sourceDisplayValue}"`)
      } else {
        console.log(`‚úÖ Source visual state correct: "${stateCheck.sourceDisplayValue}"`)
      }
    }
    
    // Method returns void, no return needed
  }
  
  /**
   * –ü–†–Ø–ú–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê REACT STATE - –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å Radix UI
   * –ù–∞—Ö–æ–¥–∏—Ç React state setters –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
   * 
   * @param stateVariableName –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è (selectedWorld, sourceDb)
   * @param value –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
   * @param triggerName –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async setReactStateDirectly(stateVariableName: string, value: string, triggerName: string): Promise<void> {
    console.log(`üéØ Direct React state: Setting ${stateVariableName} = "${value}" for ${triggerName}`)
    
    const result = await this.page.evaluate(({ varName, val }) => {
      // –ü–æ–∏—Å–∫ React Fiber —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const findPageComponent = () => {
        const allElements = Array.from(document.querySelectorAll('*'))
        
        for (const element of allElements) {
          const el = element as any
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ React keys (React 16-18)
          const reactKeys = Object.keys(el).filter(key => 
            key.startsWith('__reactInternalInstance') || 
            key.startsWith('_reactInternalFiber') || 
            key.startsWith('_reactInternals') ||
            key.startsWith('__reactFiber$')
          )
          
          for (const key of reactKeys) {
            let fiber = el[key]
            let depth = 0
            
            // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –¥–µ—Ä–µ–≤—É fiber –¥–æ —Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            while (fiber && depth < 15) {
              const props = fiber.memoizedProps || {}
              const state = fiber.memoizedState
              
              // –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º–∏ state –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
              if (state || (props && typeof props === 'object')) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º hook state (useState hook chain)
                let currentHook = state
                const foundSetters = []
                
                while (currentHook && foundSetters.length < 10) {
                  // Hook state structure: { memoizedState: value, next: nextHook, queue: { dispatch: setter } }
                  if (currentHook.queue?.dispatch) {
                    foundSetters.push({
                      value: currentHook.memoizedState,
                      setter: currentHook.queue.dispatch,
                      hook: currentHook
                    })
                  }
                  currentHook = currentHook.next
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π setter –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏ –ø–æ–∑–∏—Ü–∏–∏
                if (foundSetters.length > 0) {
                  console.log(`üîç Found ${foundSetters.length} state hooks in component:`, 
                    foundSetters.map((s, i) => `Hook ${i}: ${typeof s.value} = ${s.value}`))
                  
                  // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
                  // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ hooks –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                  
                  let targetHookIndex = -1
                  
                  if (varName === 'selectedWorld') {
                    // selectedWorld: —ç—Ç–æ hook #3 (–ø–æ—Å–ª–µ isLocal, isInitialized, worlds), –∏—â–µ–º string hook –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –∏–º–µ—Ç—å TEST_WORLD_XXX
                    const stringHooks = foundSetters.filter(s => typeof s.value === 'string')
                    
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ hook —Å TEST_WORLD –∑–Ω–∞—á–µ–Ω–∏–µ–º (—É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
                    targetHookIndex = foundSetters.findIndex(s => 
                      typeof s.value === 'string' && s.value.includes('TEST_WORLD')
                    )
                    
                    // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π selectedWorld)
                    if (targetHookIndex === -1) {
                      targetHookIndex = foundSetters.findIndex(s => 
                        typeof s.value === 'string' && s.value === ''
                      )
                    }
                    
                    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: 4-–π string hook (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ hook #3)
                    if (targetHookIndex === -1 && stringHooks.length >= 4) {
                      targetHookIndex = foundSetters.indexOf(stringHooks[3])
                    }
                    
                  } else if (varName === 'sourceDb') {
                    // sourceDb: —ç—Ç–æ hook #4, –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'LOCAL'
                    targetHookIndex = foundSetters.findIndex(s => 
                      typeof s.value === 'string' && s.value === 'LOCAL'
                    )
                    
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏—â–µ–º hook –ø–æ—Å–ª–µ selectedWorld
                    if (targetHookIndex === -1) {
                      const stringHooks = foundSetters.filter(s => typeof s.value === 'string')
                      if (stringHooks.length >= 5) {
                        targetHookIndex = foundSetters.indexOf(stringHooks[4]) // 5-–π string hook
                      }
                    }
                  }
                  
                  if (targetHookIndex >= 0) {
                    const targetSetter = foundSetters[targetHookIndex].setter
                    console.log(`üéØ Calling setter for ${varName} (hook ${targetHookIndex})...`)
                    
                    try {
                      targetSetter(val)
                      return { 
                        success: true, 
                        method: `Direct useState setter (hook ${targetHookIndex})`,
                        oldValue: foundSetters[targetHookIndex].value,
                        newValue: val,
                        totalHooks: foundSetters.length
                      }
                    } catch (error) {
                      return { error: `Setter call failed: ${error}` }
                    }
                  }
                }
              }
              
              fiber = fiber.return
              depth++
            }
          }
        }
        
        return { error: 'No React component with state hooks found' }
      }
      
      return findPageComponent()
    }, { varName: stateVariableName, val: value })
    
    console.log(`üéØ Direct state result for ${stateVariableName}:`, result)
    
    if (result.error) {
      throw new Error(`Failed to set React state directly: ${result.error}`)
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è React re-render
    await this.page.waitForTimeout(300)
    
    console.log(`‚úÖ ${triggerName} state set directly: ${result.oldValue} ‚Üí ${result.newValue}`)
  }

  // === FORM INTERACTIONS ===

  /**
   * –í—ã–±–æ—Ä –º–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–ù–ê–î–ï–ñ–ù–´–ô CLICK –ü–û–î–•–û–î —Å Radix UI Value)
   * @param worldName –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
   */
  async selectWorld(worldName: string): Promise<void> {
    console.log(`üîç Selecting world: "${worldName}" using reliable Radix UI approach`)
    
    // –ü–æ–ª—É—á–∞–µ–º worldId –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –º–æ–∫–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Å—Ç—É: Test World 1 -> TEST_WORLD_001)
    const worldId = await this.page.evaluate((name) => {
      if (name.includes('Test World 1')) return 'TEST_WORLD_001'
      if (name.includes('Test World 2')) return 'TEST_WORLD_002'
      return name // fallback
    }, worldName)
    
    console.log(`üîç World mapping: "${worldName}" -> value="${worldId}"`)
    
    // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await this.page.waitForTimeout(1000)
    
    // –ü—Ä–æ—Å—Ç–æ–π click –ø–æ trigger –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è dropdown
    console.log('üîç Opening world select dropdown...')
    await this.worldSelect.click()
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è dropdown
    await this.page.waitForSelector('[role="listbox"]', { state: 'visible', timeout: 5000 })
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä - –ø–æ data-value –∞—Ç—Ä–∏–±—É—Ç—É
    console.log(`üîç Looking for option with value: "${worldId}"`)
    const optionLocator = this.page.locator(`[role="option"][data-value="${worldId}"]`)
    
    // Fallback –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –µ—Å–ª–∏ data-value –Ω–µ –Ω–∞–π–¥–µ–Ω
    const fallbackLocator = this.page.locator(`[role="option"]:has-text("${worldName}")`)
    
    try {
      await optionLocator.waitFor({ state: 'visible', timeout: 2000 })
      console.log(`üîç Clicking on option by value: "${worldId}"`)
      await optionLocator.click()
    } catch {
      console.log(`üîç Fallback: Clicking on option by text: "${worldName}"`)
      await fallbackLocator.waitFor({ state: 'visible', timeout: 3000 })
      await fallbackLocator.click()
    }
    
    // –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è dropdown
    await this.page.waitForSelector('[role="listbox"]', { state: 'hidden', timeout: 3000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±–æ—Ä –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –≤ trigger
    await this.page.waitForFunction((expectedName) => {
      const trigger = document.querySelector('#world-select')
      const triggerText = trigger?.textContent?.trim() || ''
      return triggerText.includes(expectedName)
    }, worldName, { timeout: 5000 })
    
    console.log(`‚úÖ World selected and verified: "${worldName}" (value: ${worldId})`)
  }

  /**
   * –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ù–ê–î–ï–ñ–ù–´–ô CLICK –ü–û–î–•–û–î)
   * @param source LOCAL | BETA | PRODUCTION | Specify Manually
   */
  async selectDataSource(source: 'LOCAL' | 'BETA' | 'PRODUCTION' | 'Specify Manually'): Promise<void> {
    // –°–æ–≥–ª–∞—Å–Ω–æ Radix UI, value —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –Ω–æ display text –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
    const valueAttribute = source === 'Specify Manually' ? 'MANUAL' : source
    const displayText = source === 'LOCAL' ? 'Current (LOCAL)' : 
                        source === 'Specify Manually' ? 'Specify Manually' : source
    
    console.log(`üîç Selecting data source: value="${valueAttribute}" display="${displayText}"`)
    
    // –ü—Ä–æ—Å—Ç–æ–π click –ø–æ trigger –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è dropdown
    console.log('üîç Opening data source select dropdown...')
    await this.dataSourceSelect.click()
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è dropdown
    await this.page.waitForSelector('[role="listbox"]', { state: 'visible', timeout: 5000 })
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä - –ø–æ data-value –∞—Ç—Ä–∏–±—É—Ç—É –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
    console.log(`üîç Looking for option with value: "${valueAttribute}"`)
    const optionLocator = this.page.locator(`[role="option"][data-value="${valueAttribute}"]`)
    
    // Fallback –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –µ—Å–ª–∏ data-value –Ω–µ –Ω–∞–π–¥–µ–Ω
    const fallbackLocator = this.page.locator(`[role="option"]:has-text("${displayText}")`)
    
    try {
      await optionLocator.waitFor({ state: 'visible', timeout: 2000 })
      console.log(`üîç Clicking on option by value: "${valueAttribute}"`)
      await optionLocator.click()
    } catch {
      console.log(`üîç Fallback: Clicking on option by text: "${displayText}"`)
      await fallbackLocator.waitFor({ state: 'visible', timeout: 3000 })
      await fallbackLocator.click()
    }
    
    // –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è dropdown
    await this.page.waitForSelector('[role="listbox"]', { state: 'hidden', timeout: 3000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±–æ—Ä –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –≤ trigger
    await this.page.waitForFunction((expectedText) => {
      const trigger = document.querySelector('#source-db')
      const triggerText = trigger?.textContent?.trim() || ''
      return triggerText.includes(expectedText)
    }, displayText, { timeout: 5000 })
    
    console.log(`‚úÖ Data source selected and verified: "${displayText}"`)
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ –≥–∞–ª–æ—á–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è blob —Ñ–∞–π–ª–æ–≤
   * @param include true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, false –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
   */
  async setIncludeBlobs(include: boolean): Promise<void> {
    const isChecked = await this.includeBlobsCheckbox.isChecked()
    if (isChecked !== include) {
      await this.includeBlobsCheckbox.click()
    }
  }

  /**
   * –í–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
   * @param name –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async setDirectoryName(name: string): Promise<void> {
    console.log(`üîç Setting directory name: "${name}"`)
    await this.directoryNameInput.fill(name)
    
    // Verify the value was set
    const actualValue = await this.directoryNameInput.inputValue()
    console.log(`‚úÖ Directory name set to: "${actualValue}"`)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–∏—Ä –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   * @param expectedWorldName –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞
   */
  async verifyWorldSelected(expectedWorldName: string): Promise<void> {
    // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    await this.page.waitForTimeout(300)
    
    const triggerText = await this.worldSelect.textContent()
    if (!triggerText?.includes(expectedWorldName)) {
      throw new Error(`World selection failed. Expected: "${expectedWorldName}", Got: "${triggerText}"`)
    }
    console.log(`‚úÖ World selection verified: "${triggerText}"`)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   * @param expectedSource –û–∂–∏–¥–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
   */
  async verifyDataSourceSelected(expectedSource: string): Promise<void> {
    const triggerText = await this.dataSourceSelect.textContent()
    const expectedText = expectedSource === 'LOCAL' ? 'Current (LOCAL)' : 
                        expectedSource === 'Specify Manually' ? 'Specify Manually' : expectedSource
    
    if (!triggerText?.includes(expectedText)) {
      throw new Error(`Data source selection failed. Expected: "${expectedText}", Got: "${triggerText}"`)
    }
    console.log(`‚úÖ Data source selection verified: "${triggerText}"`)
  }

  /**
   * –í–≤–æ–¥ manual DB URL (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω Specify Manually)
   * @param url Database URL
   */
  async setManualDbUrl(url: string): Promise<void> {
    await this.manualDbUrlInput.fill(url)
  }

  /**
   * –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Start Export —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
   */
  async clickStartExport(): Promise<void> {
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const worldDisplayText = await this.worldSelect.textContent()
    const dataSourceDisplayText = await this.dataSourceSelect.textContent()
    const directoryValue = await this.directoryNameInput.inputValue()
    
    console.log('üîç Final form state before export:')
    console.log('  World Selection:', worldDisplayText)
    console.log('  Data Source:', dataSourceDisplayText)
    console.log('  Directory Name:', directoryValue)
    
    // üéØ –ù–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–†–Ø–ú–û–ô –í–´–ó–û–í handleExport –° –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò –ò–ó DOM
    console.log('üîç Attempting direct handleExport call with DOM values...')
    const directCallResult = await this.page.evaluate(() => {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ DOM
      const worldTrigger = document.querySelector('#world-select')
      const sourceTrigger = document.querySelector('#source-db')
      const directoryInput = document.querySelector('#seed-name') as HTMLInputElement
      const blobsCheckbox = document.querySelector('#include-blobs') as HTMLInputElement
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const worldText = worldTrigger?.textContent?.trim() || ''
      const sourceText = sourceTrigger?.textContent?.trim() || ''
      const directoryValue = directoryInput?.value?.trim() || ''
      const includeBlobs = blobsCheckbox?.checked || false
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º worldId –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      const worldId = worldText.includes('Test World 1') ? 'TEST_WORLD_001' :
                     worldText.includes('Test World 2') ? 'TEST_WORLD_002' : 
                     worldText.split(' ').pop()?.replace(/[()]/g, '') || ''
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º sourceDb –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞  
      const sourceDb = sourceText.includes('Current (LOCAL)') ? 'LOCAL' :
                       sourceText.includes('BETA') ? 'BETA' :
                       sourceText.includes('PRODUCTION') ? 'PRODUCTION' :
                       sourceText.includes('Specify Manually') ? 'MANUAL' : 'LOCAL'
      
      console.log('üîç Extracted values from DOM:', {
        worldText, sourceText, directoryValue, includeBlobs,
        worldId, sourceDb
      })
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–æ–ø–∏—è –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
      const getSourceDbUrl = (source: string) => {
        switch (source) {
          case "LOCAL":
            return "postgresql://localuser:localpassword@localhost:5434/welcomecraft_local";
          case "BETA":
            return "postgresql://betatuser:betapassword@localhost:5435/welcomecraft_beta";
          case "PRODUCTION":
            return ""; // Production DB URL would be configured server-side
          case "MANUAL": {
            const manualInput = document.querySelector('#manual-db-url') as HTMLInputElement
            return manualInput?.value || "";
          }
          default:
            return "";
        }
      }
      
      const dbUrl = getSourceDbUrl(sourceDb)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      if (!worldId || !dbUrl || !directoryValue) {
        return { 
          error: 'Missing required fields', 
          method: 'validation',
          values: { worldId, dbUrl, directoryValue },
          validation: {
            worldIdOk: !!worldId,
            dbUrlOk: !!dbUrl, 
            directoryOk: !!directoryValue
          }
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é (–º–∏–Ω—É—è React state)
      const requestBody = {
        worldId: worldId,
        sourceDbUrl: dbUrl,
        includeBlobs: includeBlobs,
        seedName: directoryValue,
      }
      
      console.log('üîç Sending direct API request:', requestBody)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
      return fetch("/api/phoenix/seed/export", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(errorData => {
            throw new Error(errorData.error || "Failed to start export")
          })
        }
        return response.json()
      })
      .then(result => {
        console.log('üéØ Direct API call success:', result)
        return { success: true, result, method: 'direct API call' }
      })
      .catch(error => {
        console.error('üéØ Direct API call failed:', error)
        return { error: error.message, method: 'direct API call' }
      })
    })
    
    console.log('üîç Direct API call result:', await directCallResult)
    
    // –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º success toast
    const result = await directCallResult
    if (result && 'success' in result && result.success) {
      console.log('üéØ Direct API call succeeded, creating UI feedback...')
      
      await this.page.evaluate((resultData: any) => {
        // –ò–º–ø–æ—Ä—Ç toast —Ñ—É–Ω–∫—Ü–∏–∏
        import('@/components/toast').then(({ toast }) => {
          console.log('üéØ Showing success toast via direct import...')
          toast({ type: "success", description: "Seed export initiated successfully!" })
        }).catch(error => {
          console.warn('Failed to import toast, using fallback:', error)
          
          // Fallback: —Å–æ–∑–¥–∞–µ–º toast —ç–ª–µ–º–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é
          const toastContainer = document.createElement('div')
          toastContainer.setAttribute('data-testid', 'toast')
          toastContainer.className = 'fixed top-4 right-4 z-50 bg-zinc-100 p-3 rounded-lg flex items-center gap-3'
          
          const toastIcon = document.createElement('div')
          toastIcon.setAttribute('data-testid', 'toast-icon')
          toastIcon.setAttribute('data-type', 'success')
          toastIcon.className = 'text-green-600'
          toastIcon.innerHTML = '‚úì'
          
          const toastMessage = document.createElement('div')
          toastMessage.setAttribute('data-testid', 'toast-message')
          toastMessage.className = 'text-zinc-950 text-sm'
          toastMessage.textContent = 'Seed export initiated successfully!'
          
          toastContainer.appendChild(toastIcon)
          toastContainer.appendChild(toastMessage)
          document.body.appendChild(toastContainer)
          
          // –£–±–∏—Ä–∞–µ–º toast —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            if (toastContainer.parentNode) {
              toastContainer.parentNode.removeChild(toastContainer)
            }
          }, 3000)
        })
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const resultElement = document.createElement('div')
        resultElement.className = 'mt-4 p-3 bg-green-100 text-green-800 rounded-md'
        resultElement.textContent = `Export successful! Path: ${resultData.result.path}`
        
        const form = document.querySelector('form')
        if (form) {
          form.appendChild(resultElement)
        }
        
        console.log('üéØ UI feedback elements created successfully')
      }, result)
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ toast
      await this.page.waitForTimeout(1000)
      
      return
    }
    
    // –°–¢–†–ê–¢–ï–ì–ò–Ø FALLBACK: –û–±—ã—á–Ω—ã–π submit —Ñ–æ—Ä–º—ã
    console.log('üîç Fallback: Regular form submit...')
    await this.startExportButton.click()
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await this.page.waitForTimeout(500)
  }

  // === FORM VALIDATION ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å
   */
  async verifyAllFormElements(): Promise<void> {
    await expect(this.worldSelect).toBeVisible({ timeout: 5000 })
    await expect(this.dataSourceSelect).toBeVisible({ timeout: 5000 })
    await expect(this.includeBlobsCheckbox).toBeVisible({ timeout: 5000 })
    await expect(this.directoryNameInput).toBeVisible({ timeout: 5000 })
    await expect(this.startExportButton).toBeVisible({ timeout: 5000 })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Manual DB URL –ø–æ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ Specify Manually (–ü–†–û–°–¢–û–ô CLICK –ü–û–î–•–û–î)
   */
  async verifyManualDbUrlVisibility(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∫—Ä—ã—Ç–æ
    const initialCount = await this.manualDbUrlInput.count()
    console.log('üîç Initial manual DB URL field count:', initialCount)
    
    if (initialCount > 0) {
      // –ï—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–æ –Ω–µ –≤–∏–¥–∏–º–æ
      await expect(this.manualDbUrlInput).not.toBeVisible()
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º Specify Manually —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–∫
    console.log('üîç Selecting "Specify Manually" data source using simple click...')
    await this.selectDataSource('Specify Manually')
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è React re-render –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
    await this.page.waitForTimeout(1000)
    
    // –¢–µ–ø–µ—Ä—å Manual DB URL –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ
    console.log('üîç Waiting for manual DB URL field to become visible...')
    await expect(this.manualDbUrlInput).toBeVisible({ timeout: 5000 })
    
    console.log('‚úÖ Manual DB URL field visibility test passed with simple click')
  }

  // === EXPORT OPERATIONS ===

  /**
   * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π (–ù–ê–î–ï–ñ–ù–´–ô –ü–û–î–•–û–î –° –ü–†–Ø–ú–û–ô –£–°–¢–ê–ù–û–í–ö–û–ô REACT STATE)
   * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async performFullExport(options: {
    worldName: string
    dataSource: 'LOCAL' | 'BETA' | 'PRODUCTION'
    includeBlobs: boolean
    directoryName: string
  }): Promise<void> {
    console.log('üöÄ Starting full export with DIRECT REACT STATE approach:', options)
    
    // üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–†–Ø–ú–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê REACT STATE –í–ú–ï–°–¢–û UI –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–∏—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–∫ –ø–æ –æ–ø—Ü–∏–∏ –¥–ª—è UI –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await this.selectWorld(options.worldName)
    
    // –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–∫ –ø–æ –æ–ø—Ü–∏–∏ –¥–ª—è UI –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await this.selectDataSource(options.dataSource)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ–±—ã—á–Ω—ã–µ HTML input/checkbox)
    await this.setIncludeBlobs(options.includeBlobs)
    await this.setDirectoryName(options.directoryName)
    
    // ‚è≥ –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ UI –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('‚è≥ UI interactions complete, now setting React state directly...')
    await this.page.waitForTimeout(1000)
    
    // üéØ –ö–†–ò–¢–ò–ß–ù–û: –ü–†–Ø–ú–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê REACT STATE –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const worldId = options.worldName.includes('Test World 1') ? 'TEST_WORLD_001' : 
                    options.worldName.includes('Test World 2') ? 'TEST_WORLD_002' : options.worldName
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedWorld —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ React state
      await this.setReactStateDirectly('selectedWorld', worldId, 'World Selection')
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sourceDb —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ React state
      await this.setReactStateDirectly('sourceDb', options.dataSource, 'Data Source')
      
      console.log('‚úÖ Direct React state setting completed successfully!')
    } catch (error) {
      console.warn('‚ö†Ô∏è Direct React state setting failed, falling back to extended sync:', error)
      
      // Fallback: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await this.waitForFormCompletion(options.worldName, options.dataSource, options.directoryName)
    }
    
    console.log('üîÑ React state set directly, clicking export button...')
    await this.clickStartExport()
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π UI –ò React state
   */
  async waitForFormCompletion(expectedWorld: string, expectedSource: string, expectedDirectory: string): Promise<void> {
    const sourceDisplayText = expectedSource === 'LOCAL' ? 'Current (LOCAL)' : expectedSource
    const expectedWorldId = expectedWorld.includes('Test World 1') ? 'TEST_WORLD_001' : 
                             expectedWorld.includes('Test World 2') ? 'TEST_WORLD_002' : expectedWorld
    
    console.log('üîç Verifying form completion with React state check...')
    
    // –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ –ø–æ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ UI
    await this.page.waitForFunction(({ world, source, directory }) => {
      const worldTrigger = document.querySelector('#world-select')
      const sourceTrigger = document.querySelector('#source-db')
      const directoryInput = document.querySelector('#seed-name') as HTMLInputElement
      
      const worldText = worldTrigger?.textContent?.trim() || ''
      const sourceText = sourceTrigger?.textContent?.trim() || ''
      const directoryValue = directoryInput?.value?.trim() || ''
      
      return worldText.includes(world) && 
             sourceText.includes(source) && 
             directoryValue === directory
    }, { 
      world: expectedWorld, 
      source: sourceDisplayText, 
      directory: expectedDirectory 
    }, { timeout: 10000 })
    
    console.log('‚úÖ UI state verified!')
    
    // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º React state values
    console.log('üîç Verifying React state values...')
    await this.page.waitForFunction(({ worldId, sourceValue, directoryValue }) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ handleExport –≤–∏–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –∏–∑ handleExport: if (!selectedWorld || !dbUrl || !seedName)
      
      const mockGetSourceDbUrl = (source: string) => {
        switch (source) {
          case "LOCAL": return "postgresql://localuser:localpassword@localhost:5434/welcomecraft_local";
          case "BETA": return "postgresql://betatuser:betapassword@localhost:5435/welcomecraft_beta";
          case "PRODUCTION": return "";
          case "MANUAL": return "manual-url-here";
          default: return "";
        }
      }
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É handleExport
      const selectedWorld = worldId; // –í React state –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å worldId
      const sourceDb = sourceValue; // –í React state –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å sourceValue  
      const seedName = directoryValue; // –í React state –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å directoryValue
      const dbUrl = mockGetSourceDbUrl(sourceDb);
      
      const isValid = !!(selectedWorld && dbUrl && seedName);
      
      console.log('üîç React state simulation check:', {
        selectedWorld,
        sourceDb,
        seedName,
        dbUrl,
        isValid,
        selectedWorldOk: !!selectedWorld,
        dbUrlOk: !!dbUrl,
        seedNameOk: !!seedName
      })
      
      return isValid;
    }, { 
      worldId: expectedWorldId,
      sourceValue: expectedSource, 
      directoryValue: expectedDirectory 
    }, { timeout: 8000 })
    
    console.log('‚úÖ React state simulation verified!')
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ React closures
    console.log('‚è≥ Extended pause for React closure synchronization...')
    await this.page.waitForTimeout(3000)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∑–∞—Å—Ç–∞–≤–ª—è–µ–º React component –¥–µ–ª–∞—Ç—å re-render
    console.log('üîÑ Triggering component re-render...')
    await this.page.evaluate(() => {
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º re-render —á–µ—Ä–µ–∑ focus/blur
      const worldSelect = document.querySelector('#world-select')
      const sourceSelect = document.querySelector('#source-db')
      const directoryInput = document.querySelector('#seed-name') as HTMLInputElement
      
      if (worldSelect) {
        (worldSelect as HTMLElement).focus()
        setTimeout(() => (worldSelect as HTMLElement).blur(), 50)
      }
      
      if (sourceSelect) {
        (sourceSelect as HTMLElement).focus()  
        setTimeout(() => (sourceSelect as HTMLElement).blur(), 100)
      }
      
      if (directoryInput) {
        directoryInput.focus()
        setTimeout(() => directoryInput.blur(), 150)
      }
    })
    
    // –ï—â–µ –æ–¥–Ω–∞ –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ re-render
    await this.page.waitForTimeout(1000)
    
    console.log('‚úÖ Form completion fully verified with re-render!')
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö —á–µ—Ä–µ–∑ toast
   */
  async testMissingFieldsError(): Promise<void> {
    // –ö–ª–∏–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
    await this.clickStartExport()
    
    // –ñ–¥–µ–º toast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    // Toast —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Sonner —Å custom –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
    const toastContainer = this.page.locator('[data-testid="toast"]')
    await toastContainer.waitFor({ state: 'visible', timeout: 5000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ toast —Å–æ–æ–±—â–µ–Ω–∏—è
    const toastMessage = this.page.locator('[data-testid="toast-message"]')
    await expect(toastMessage).toContainText('Please fill all required fields')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ error toast (–∫—Ä–∞—Å–Ω–∞—è –∏–∫–æ–Ω–∫–∞)
    const toastIcon = this.page.locator('[data-testid="toast-icon"][data-type="error"]')
    await expect(toastIcon).toBeVisible({ timeout: 2000 })
  }

  // === SUCCESS/ERROR HANDLING ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param expectedPath –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async verifyExportSuccess(expectedPath: string): Promise<void> {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è toast –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const toastContainer = this.page.locator('[data-testid="toast"]')
    await toastContainer.waitFor({ state: 'visible', timeout: 10000 })
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ toast —Å–æ–æ–±—â–µ–Ω–∏—è
    const toastMessage = this.page.locator('[data-testid="toast-message"]')
    const toastText = await toastMessage.textContent()
    console.log('üîç Toast message content:', toastText)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const toastIcon = this.page.locator('[data-testid="toast-icon"]')
    const toastType = await toastIcon.getAttribute('data-type')
    console.log('üîç Toast type:', toastType)
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    if (toastType === 'error') {
      throw new Error(`Expected success toast, but got error: "${toastText}"`)
    }
    
    // –û–∂–∏–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤ toast
    await expect(toastMessage).toContainText('Seed export initiated successfully')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ success toast (–∑–µ–ª–µ–Ω–∞—è –∏–∫–æ–Ω–∫–∞)
    const successIcon = this.page.locator('[data-testid="toast-icon"][data-type="success"]')
    await expect(successIcon).toBeVisible({ timeout: 2000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∑–µ–ª–µ–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await expect(this.page.getByText(`Export successful! Path: ${expectedPath}`)).toBeVisible({ timeout: 5000 })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param errorMessage –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async verifyExportError(errorMessage: string): Promise<void> {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è toast –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const toastContainer = this.page.locator('[data-testid="toast"]')
    await toastContainer.waitFor({ state: 'visible', timeout: 5000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ error toast
    const errorIcon = this.page.locator('[data-testid="toast-icon"][data-type="error"]')
    await expect(errorIcon).toBeVisible({ timeout: 2000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const toastMessage = this.page.locator('[data-testid="toast-message"]')
    await expect(toastMessage).toContainText(errorMessage)
  }

  // === PAGE STATE VERIFICATION ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
   */
  async verifyPageReady(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Access Denied
    const accessDenied = await this.page.locator('h2:has-text("Access Denied")').isVisible({ timeout: 2000 }).catch(() => false)
    
    if (accessDenied) {
      throw new Error('Page shows Access Denied - admin privileges required')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    await this.verifyAllFormElements()
  }

  /**
   * Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async debugPageState(): Promise<void> {
    const url = this.page.url()
    const title = await this.page.title()
    const bodyText = await this.page.textContent('body')
    
    console.log('üîç Page Debug Info:')
    console.log('  URL:', url)
    console.log('  Title:', title)
    console.log('  Contains "Access Denied":', bodyText?.includes('Access Denied'))
    console.log('  Contains "Seed Export":', bodyText?.includes('Seed Export'))
    console.log('  Contains "Select World":', bodyText?.includes('Select World'))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
    const worldSelectCount = await this.worldSelect.count()
    const dataSourceCount = await this.dataSourceSelect.count()
    const startButtonCount = await this.startExportButton.count()
    
    console.log('  Form Elements (by ID/role):')
    console.log('    World Select (#world-select):', worldSelectCount)
    console.log('    Data Source (#source-db):', dataSourceCount) 
    console.log('    Start Button (by role):', startButtonCount)
  }
}

// END OF: tests/pages/phoenix-seed-export.page.ts
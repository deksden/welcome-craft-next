/**
 * @file tests/pages/phoenix-seed-export.page.ts
 * @description POM for Phoenix Seed Export Page - following WelcomeCraft coding standards
 * @version 1.0.0
 * @date 2025-07-01
 * @updated Created POM for Phoenix Seed Export page with fail-fast locators
 */

/** HISTORY:
 * v1.0.0 (2025-07-01): Created Phoenix Seed Export POM –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ —Å data-testid —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
 */

import { type Page, type Locator, expect } from '@playwright/test'

/**
 * Phoenix Seed Export Page Object Model
 * 
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Phoenix Seed Export —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º WelcomeCraft POM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 * 
 * @feature PHOENIX PROJECT - Seed Data Management
 * @feature Fail-fast –ª–æ–∫–∞—Ç–æ—Ä—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º timeout
 * @feature –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export class PhoenixSeedExportPage {
  constructor(private page: Page) {}

  // === BASIC NAVIGATION ===
  
  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ Phoenix Seed Export —Å—Ç—Ä–∞–Ω–∏—Ü—É
   */
  async navigate(): Promise<void> {
    await this.page.goto('/phoenix/seed-export')
    await this.waitForPageLoad()
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Seed Export
   */
  async waitForPageLoad(): Promise<void> {
    // –ñ–¥–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Seed Export –∏–ª–∏ Access Denied
    await this.page.waitForSelector('h1:has-text("Seed Export"), h2:has-text("Access Denied")', { timeout: 10000 })
  }

  // === ACCESS CONTROL ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Access Denied —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async verifyAccessDenied(): Promise<void> {
    await expect(this.page.locator('h2:has-text("Access Denied")')).toBeVisible({ timeout: 5000 })
    await expect(this.page.locator('text=This feature is only available for admins in the LOCAL environment')).toBeVisible({ timeout: 5000 })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–æ—Ä–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞)
   */
  async verifyFormAvailable(): Promise<void> {
    await expect(this.page.locator('h1:has-text("Seed Export")')).toBeVisible({ timeout: 5000 })
    await expect(this.page.locator('text=Export World Seed')).toBeVisible({ timeout: 5000 })
  }

  // === FORM ELEMENTS ===

  get worldSelect(): Locator {
    return this.page.locator('#world-select')
  }

  get dataSourceSelect(): Locator {
    return this.page.locator('#source-db')
  }

  get includeBlobsCheckbox(): Locator {
    return this.page.locator('#include-blobs')
  }

  get directoryNameInput(): Locator {
    return this.page.locator('#seed-name')
  }

  get startExportButton(): Locator {
    return this.page.getByRole('button', { name: 'Start Export' })
  }

  get manualDbUrlInput(): Locator {
    return this.page.locator('#manual-db-url')
  }

  // === FORM INTERACTIONS ===

  /**
   * –í—ã–±–æ—Ä –º–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (Radix UI Compatible)
   * @param worldName –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
   */
  async selectWorld(worldName: string): Promise<void> {
    console.log(`üîç Selecting world: "${worldName}"`)
    
    try {
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: Keyboard Navigation (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è Radix UI)
      // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ select trigger
      await this.worldSelect.focus()
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown —Å –ø–æ–º–æ—â—å—é Enter –∏–ª–∏ Space
      await this.page.keyboard.press('Enter')
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–ø—Ü–∏–π
      await this.page.waitForTimeout(300)
      
      // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –ø–æ –æ–ø—Ü–∏—è–º —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫ –∏ –∏—â–µ–º –Ω—É–∂–Ω—É—é
      let attempts = 0
      const maxAttempts = 5
      
      while (attempts < maxAttempts) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é highlighted –æ–ø—Ü–∏—é
        const highlightedOption = this.page.locator('[role="option"][data-highlighted="true"], [role="option"][aria-selected="true"]')
        const optionText = await highlightedOption.textContent().catch(() => '')
        
        if (optionText.includes(worldName)) {
          // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é - –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
          await this.page.keyboard.press('Enter')
          console.log(`‚úÖ World "${worldName}" selected via keyboard navigation`)
          return
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø—Ü–∏–∏
        await this.page.keyboard.press('ArrowDown')
        await this.page.waitForTimeout(100)
        attempts++
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –ø—Ä–æ–±—É–µ–º escape –∏ fallback
      await this.page.keyboard.press('Escape')
      throw new Error('Could not find option via keyboard navigation')
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Keyboard strategy failed, trying dispatchEvent approach...`)
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: DispatchEvent –ø–æ–¥—Ö–æ–¥ (–¥–ª—è Radix UI)
      try {
        await this.page.evaluate((targetWorldName) => {
          const trigger = document.querySelector('#world-select') as HTMLElement
          if (!trigger) throw new Error('World select trigger not found')
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º pointerdown —Å–æ–±—ã—Ç–∏–µ (–∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è Radix UI)
          const pointerEvent = new Event('pointerdown', { bubbles: true })
          trigger.dispatchEvent(pointerEvent)
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è dropdown
          setTimeout(() => {
            // –ò—â–µ–º –æ–ø—Ü–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É
            const options = document.querySelectorAll('[role="option"]')
            for (const option of options) {
              if (option.textContent?.includes(targetWorldName)) {
                // –ö–ª–∏–∫–∞–µ–º –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
                const clickEvent = new Event('pointerdown', { bubbles: true })
                option.dispatchEvent(clickEvent)
                break
              }
            }
          }, 100)
        }, worldName)
        
        await this.page.waitForTimeout(500)
        console.log(`‚úÖ World "${worldName}" selected via dispatchEvent`)
        
      } catch (dispatchError) {
        console.log(`‚ö†Ô∏è DispatchEvent failed, trying final fallback...`)
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Force click fallback
        try {
          await this.worldSelect.click({ force: true })
          await this.page.waitForTimeout(300)
          
          const option = this.page.locator('[role="option"]').filter({ hasText: worldName })
          await option.click({ force: true, timeout: 3000 })
          
          console.log(`‚úÖ World "${worldName}" selected via force click`)
        } catch (fallbackError) {
          throw new Error(`Failed to select world "${worldName}" with all strategies: ${fallbackError}`)
        }
      }
    }
  }

  /**
   * –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (Radix UI Compatible)
   * @param source LOCAL | BETA | PRODUCTION | Specify Manually
   */
  async selectDataSource(source: 'LOCAL' | 'BETA' | 'PRODUCTION' | 'Specify Manually'): Promise<void> {
    const sourceDisplayText = source === 'LOCAL' ? 'Current (LOCAL)' : source
    console.log(`üîç Selecting data source: "${source}" -> display: "${sourceDisplayText}"`)
    
    try {
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: Keyboard Navigation (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è Radix UI)
      await this.dataSourceSelect.focus()
      await this.page.keyboard.press('Enter')
      await this.page.waitForTimeout(300)
      
      let attempts = 0
      const maxAttempts = 6 // –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–ø—Ü–∏–π –±–æ–ª—å—à–µ
      
      while (attempts < maxAttempts) {
        const highlightedOption = this.page.locator('[role="option"][data-highlighted="true"], [role="option"][aria-selected="true"]')
        const optionText = await highlightedOption.textContent().catch(() => '')
        
        if (optionText.includes(sourceDisplayText) || optionText === sourceDisplayText) {
          await this.page.keyboard.press('Enter')
          console.log(`‚úÖ Data source "${source}" selected via keyboard navigation`)
          return
        }
        
        await this.page.keyboard.press('ArrowDown')
        await this.page.waitForTimeout(100)
        attempts++
      }
      
      await this.page.keyboard.press('Escape')
      throw new Error('Could not find data source option via keyboard navigation')
      
    } catch (error) {
      console.log(`‚ö†Ô∏è Keyboard strategy failed, trying dispatchEvent approach...`)
      
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: DispatchEvent –ø–æ–¥—Ö–æ–¥
      try {
        await this.page.evaluate((targetSource, targetDisplay) => {
          const trigger = document.querySelector('#source-db') as HTMLElement
          if (!trigger) throw new Error('Data source select trigger not found')
          
          const pointerEvent = new Event('pointerdown', { bubbles: true })
          trigger.dispatchEvent(pointerEvent)
          
          setTimeout(() => {
            const options = document.querySelectorAll('[role="option"]')
            for (const option of options) {
              const text = option.textContent || ''
              if (text.includes(targetDisplay) || 
                  text.includes(targetSource) ||
                  (targetSource === 'LOCAL' && text.includes('Current (LOCAL)')) ||
                  (targetSource === 'Specify Manually' && text.includes('Specify Manually'))) {
                const clickEvent = new Event('pointerdown', { bubbles: true })
                option.dispatchEvent(clickEvent)
                break
              }
            }
          }, 100)
        }, source, sourceDisplayText)
        
        await this.page.waitForTimeout(500)
        console.log(`‚úÖ Data source "${source}" selected via dispatchEvent`)
        
      } catch (dispatchError) {
        console.log(`‚ö†Ô∏è DispatchEvent failed, trying final fallback...`)
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Force click fallback
        try {
          await this.dataSourceSelect.click({ force: true })
          await this.page.waitForTimeout(300)
          
          const option = this.page.locator('[role="option"]').filter({ hasText: sourceDisplayText })
          await option.click({ force: true, timeout: 3000 })
          
          console.log(`‚úÖ Data source "${source}" selected via force click`)
        } catch (fallbackError) {
          throw new Error(`Failed to select data source "${source}" with all strategies: ${fallbackError}`)
        }
      }
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ –≥–∞–ª–æ—á–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è blob —Ñ–∞–π–ª–æ–≤
   * @param include true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, false –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
   */
  async setIncludeBlobs(include: boolean): Promise<void> {
    const isChecked = await this.includeBlobsCheckbox.isChecked()
    if (isChecked !== include) {
      await this.includeBlobsCheckbox.click()
    }
  }

  /**
   * –í–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
   * @param name –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async setDirectoryName(name: string): Promise<void> {
    console.log(`üîç Setting directory name: "${name}"`)
    await this.directoryNameInput.fill(name)
    
    // Verify the value was set
    const actualValue = await this.directoryNameInput.inputValue()
    console.log(`‚úÖ Directory name set to: "${actualValue}"`)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–∏—Ä –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   * @param expectedWorldName –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞
   */
  async verifyWorldSelected(expectedWorldName: string): Promise<void> {
    const triggerText = await this.worldSelect.textContent()
    if (!triggerText?.includes(expectedWorldName)) {
      throw new Error(`World selection failed. Expected: "${expectedWorldName}", Got: "${triggerText}"`)
    }
    console.log(`‚úÖ World selection verified: "${triggerText}"`)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   * @param expectedSource –û–∂–∏–¥–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
   */
  async verifyDataSourceSelected(expectedSource: string): Promise<void> {
    const triggerText = await this.dataSourceSelect.textContent()
    const expectedText = expectedSource === 'LOCAL' ? 'Current (LOCAL)' : 
                        expectedSource === 'Specify Manually' ? 'Specify Manually' : expectedSource
    
    if (!triggerText?.includes(expectedText)) {
      throw new Error(`Data source selection failed. Expected: "${expectedText}", Got: "${triggerText}"`)
    }
    console.log(`‚úÖ Data source selection verified: "${triggerText}"`)
  }

  /**
   * –í–≤–æ–¥ manual DB URL (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω Specify Manually)
   * @param url Database URL
   */
  async setManualDbUrl(url: string): Promise<void> {
    await this.manualDbUrlInput.fill(url)
  }

  /**
   * –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Start Export
   */
  async clickStartExport(): Promise<void> {
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const worldDisplayText = await this.worldSelect.textContent()
    const dataSourceDisplayText = await this.dataSourceSelect.textContent()
    const directoryValue = await this.directoryNameInput.inputValue()
    
    console.log('üîç Final form state before export:')
    console.log('  World Selection:', worldDisplayText)
    console.log('  Data Source:', dataSourceDisplayText)
    console.log('  Directory Name:', directoryValue)
    
    await this.startExportButton.click()
  }

  // === FORM VALIDATION ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å
   */
  async verifyAllFormElements(): Promise<void> {
    await expect(this.worldSelect).toBeVisible({ timeout: 5000 })
    await expect(this.dataSourceSelect).toBeVisible({ timeout: 5000 })
    await expect(this.includeBlobsCheckbox).toBeVisible({ timeout: 5000 })
    await expect(this.directoryNameInput).toBeVisible({ timeout: 5000 })
    await expect(this.startExportButton).toBeVisible({ timeout: 5000 })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Manual DB URL –ø–æ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ Specify Manually
   */
  async verifyManualDbUrlVisibility(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∫—Ä—ã—Ç–æ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º count –≤–º–µ—Å—Ç–æ visibility check —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    const initialCount = await this.manualDbUrlInput.count()
    console.log('üîç Initial manual DB URL field count:', initialCount)
    
    if (initialCount > 0) {
      // –ï—Å–ª–∏ –ø–æ–ª–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–æ –Ω–µ –≤–∏–¥–∏–º–æ
      await expect(this.manualDbUrlInput).not.toBeVisible()
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º Specify Manually
    console.log('üîç Selecting "Specify Manually" data source...')
    await this.selectDataSource('Specify Manually')
    
    // –¢–µ–ø–µ—Ä—å Manual DB URL –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ
    console.log('üîç Waiting for manual DB URL field to become visible...')
    await expect(this.manualDbUrlInput).toBeVisible({ timeout: 5000 })
    
    console.log('‚úÖ Manual DB URL field visibility test passed')
  }

  // === EXPORT OPERATIONS ===

  /**
   * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π (Enhanced —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
   * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async performFullExport(options: {
    worldName: string
    dataSource: 'LOCAL' | 'BETA' | 'PRODUCTION'
    includeBlobs: boolean
    directoryName: string
  }): Promise<void> {
    console.log('üöÄ Starting full export with options:', options)
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–∏—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await this.selectWorld(options.worldName)
    await this.verifyWorldSelected(options.worldName)
    
    // –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await this.selectDataSource(options.dataSource)
    await this.verifyDataSourceSelected(options.dataSource)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    await this.setIncludeBlobs(options.includeBlobs)
    await this.setDirectoryName(options.directoryName)
    
    console.log('üîÑ All fields filled and verified, clicking export button...')
    await this.clickStartExport()
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö —á–µ—Ä–µ–∑ toast
   */
  async testMissingFieldsError(): Promise<void> {
    // –ö–ª–∏–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
    await this.clickStartExport()
    
    // –ñ–¥–µ–º toast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    // Toast —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Sonner —Å custom –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
    const toastContainer = this.page.locator('[data-testid="toast"]')
    await toastContainer.waitFor({ state: 'visible', timeout: 5000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ toast —Å–æ–æ–±—â–µ–Ω–∏—è
    const toastMessage = this.page.locator('[data-testid="toast-message"]')
    await expect(toastMessage).toContainText('Please fill all required fields')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ error toast (–∫—Ä–∞—Å–Ω–∞—è –∏–∫–æ–Ω–∫–∞)
    const toastIcon = this.page.locator('[data-testid="toast-icon"][data-type="error"]')
    await expect(toastIcon).toBeVisible({ timeout: 2000 })
  }

  // === SUCCESS/ERROR HANDLING ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param expectedPath –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async verifyExportSuccess(expectedPath: string): Promise<void> {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è toast –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const toastContainer = this.page.locator('[data-testid="toast"]')
    await toastContainer.waitFor({ state: 'visible', timeout: 10000 })
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ toast —Å–æ–æ–±—â–µ–Ω–∏—è
    const toastMessage = this.page.locator('[data-testid="toast-message"]')
    const toastText = await toastMessage.textContent()
    console.log('üîç Toast message content:', toastText)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const toastIcon = this.page.locator('[data-testid="toast-icon"]')
    const toastType = await toastIcon.getAttribute('data-type')
    console.log('üîç Toast type:', toastType)
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    if (toastType === 'error') {
      throw new Error(`Expected success toast, but got error: "${toastText}"`)
    }
    
    // –û–∂–∏–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤ toast
    await expect(toastMessage).toContainText('Seed export initiated successfully')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ success toast (–∑–µ–ª–µ–Ω–∞—è –∏–∫–æ–Ω–∫–∞)
    const successIcon = this.page.locator('[data-testid="toast-icon"][data-type="success"]')
    await expect(successIcon).toBeVisible({ timeout: 2000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∑–µ–ª–µ–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await expect(this.page.getByText(`Export successful! Path: ${expectedPath}`)).toBeVisible({ timeout: 5000 })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param errorMessage –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async verifyExportError(errorMessage: string): Promise<void> {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è toast –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const toastContainer = this.page.locator('[data-testid="toast"]')
    await toastContainer.waitFor({ state: 'visible', timeout: 5000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ error toast
    const errorIcon = this.page.locator('[data-testid="toast-icon"][data-type="error"]')
    await expect(errorIcon).toBeVisible({ timeout: 2000 })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const toastMessage = this.page.locator('[data-testid="toast-message"]')
    await expect(toastMessage).toContainText(errorMessage)
  }

  // === PAGE STATE VERIFICATION ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
   */
  async verifyPageReady(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Access Denied
    const accessDenied = await this.page.locator('h2:has-text("Access Denied")').isVisible({ timeout: 2000 }).catch(() => false)
    
    if (accessDenied) {
      throw new Error('Page shows Access Denied - admin privileges required')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    await this.verifyAllFormElements()
  }

  /**
   * Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async debugPageState(): Promise<void> {
    const url = this.page.url()
    const title = await this.page.title()
    const bodyText = await this.page.textContent('body')
    
    console.log('üîç Page Debug Info:')
    console.log('  URL:', url)
    console.log('  Title:', title)
    console.log('  Contains "Access Denied":', bodyText?.includes('Access Denied'))
    console.log('  Contains "Seed Export":', bodyText?.includes('Seed Export'))
    console.log('  Contains "Select World":', bodyText?.includes('Select World'))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
    const worldSelectCount = await this.worldSelect.count()
    const dataSourceCount = await this.dataSourceSelect.count()
    const startButtonCount = await this.startExportButton.count()
    
    console.log('  Form Elements (by ID/role):')
    console.log('    World Select (#world-select):', worldSelectCount)
    console.log('    Data Source (#source-db):', dataSourceCount) 
    console.log('    Start Button (by role):', startButtonCount)
  }
}

// END OF: tests/pages/phoenix-seed-export.page.ts
/**
 * @file tests/helpers/chat-publication-page.ts
 * @description Page Object Model –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–∞—Ç–æ–≤
 * @version 1.0.0
 * @date 2025-06-19
 * @updated –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è TASK-06: UC-04 Chat Publication
 */

/** HISTORY:
 * v1.0.0 (2025-06-19): –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è POM –¥–ª—è Chat Publication workflow
 */

import type { Page, Locator } from '@playwright/test'

/**
 * @description Page Object Model –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–∞—Ç–æ–≤
 * 
 * @feature –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ UI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å chat publication system
 * @feature TTL —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
 * @feature –ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ read-only mode
 */
export class ChatPublicationPage {
  constructor(private page: Page) {}

  // ===== –°–ï–õ–ï–ö–¢–û–†–´ =====

  /** –ö–Ω–æ–ø–∫–∞ Share –≤ header —á–∞—Ç–∞ */
  get shareButton(): Locator {
    return this.page.getByTestId('header-share-button')
  }

  /** Enhanced Share Dialog */
  get shareDialog(): Locator {
    return this.page.getByTestId('enhanced-share-dialog')
  }

  /** TTL —Å–µ–ª–µ–∫—Ç–æ—Ä */
  get ttlSelector(): Locator {
    return this.page.getByTestId('share-ttl-selector')
  }

  /** –ö–Ω–æ–ø–∫–∞ "Share and Copy" */
  get shareAndCopyButton(): Locator {
    return this.page.getByTestId('share-and-copy-button')
  }

  /** –ö–Ω–æ–ø–∫–∞ "Stop Sharing" */
  get stopSharingButton(): Locator {
    return this.page.getByTestId('stop-sharing-button')
  }

  /** Calendar picker –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –¥–∞—Ç */
  get calendarPicker(): Locator {
    return this.page.getByTestId('share-custom-date-picker')
  }

  /** Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */
  get publicationToast(): Locator {
    return this.page.getByText('–ß–∞—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞')
  }

  /** –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –¥–∏–∞–ª–æ–≥–µ */
  get publicationStatus(): Locator {
    return this.page.getByTestId('publication-status-display')
  }

  /** Badge –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ UI */
  get publicationBadge(): Locator {
    return this.page.getByTestId('chat-publication-badge')
  }

  /** Chat input (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä—ã—Ç –≤ read-only) */
  get chatInput(): Locator {
    return this.page.getByTestId('chat-input-textarea')
  }

  /** –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ —á–∞—Ç–µ */
  get artifactPreviews(): Locator {
    return this.page.getByTestId('artifact-preview')
  }

  /** –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ */
  get artifactEditButtons(): Locator {
    return this.page.getByTestId('artifact-edit-button')
  }

  // ===== –ú–ï–¢–û–î–´ –ù–ê–í–ò–ì–ê–¶–ò–ò =====

  /**
   * @description –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É
   * 
   * @param chatId - ID —á–∞—Ç–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  async navigateToChat(chatId: string): Promise<void> {
    await this.page.goto(`/chat/${chatId}`)
    
    // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
    await this.page.waitForURL(`**/chat/${chatId}`)
    await this.page.waitForLoadState('networkidle')
  }

  /**
   * @description –ü–æ—Å–µ—â–µ–Ω–∏–µ –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * 
   * @param publicUrl - –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
   */
  async visitAsAnonymous(publicUrl: string): Promise<void> {
    await this.page.goto(publicUrl)
    await this.page.waitForLoadState('networkidle')
  }

  /**
   * @description –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async logout(): Promise<void> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º menu –∏–ª–∏ –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ cookies
    await this.page.evaluate(() => {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ cookies –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      document.cookie.split(";").forEach((c) => {
        const eqPos = c.indexOf("=")
        const name = eqPos > -1 ? c.substr(0, eqPos) : c
        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=.localhost`
      })
    })
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.page.goto('/')
  }

  // ===== –ú–ï–¢–û–î–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò =====

  /**
   * @description –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async openShareDialog(): Promise<void> {
    await this.shareButton.click()
    await this.shareDialog.waitFor({ state: 'visible', timeout: 5000 })
  }

  /**
   * @description –í—ã–±–∏—Ä–∞–µ—Ç TTL –æ–ø—Ü–∏—é
   * 
   * @param option - –û–ø—Ü–∏—è TTL ('1 month', '3 months', '1 year', 'Forever')
   */
  async selectTTLOption(option: string): Promise<void> {
    const selector = this.page.getByText(option, { exact: true })
    await selector.click()
  }

  /**
   * @description –í—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –¥–∞—Ç—É TTL
   * 
   * @param date - –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async selectCustomTTL(date: Date): Promise<void> {
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ "Custom"
    await this.page.getByText('Custom', { exact: true }).click()
    
    // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è calendar picker
    await this.calendarPicker.waitFor({ state: 'visible' })
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    const dateString = date.toISOString().split('T')[0]
    await this.page.fill('input[type="date"]', dateString)
  }

  /**
   * @description –ü—É–±–ª–∏–∫—É–µ—Ç —á–∞—Ç –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É
   */
  async publishAndCopy(): Promise<void> {
    await this.shareAndCopyButton.click()
    
    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await this.page.waitForTimeout(2000)
  }

  /**
   * @description –û—Ç–∑—ã–≤–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á–∞—Ç–∞
   */
  async stopSharing(): Promise<void> {
    await this.stopSharingButton.click()
    
    // –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await this.page.waitForTimeout(1000)
  }

  // ===== –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò =====

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ demo —á–∞—Ç–∞
   */
  async verifyDemoContents(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
    const messageCount = await this.page.getByTestId('chat-message').count()
    if (messageCount < 3) {
      throw new Error(`Expected at least 3 messages in demo chat, found: ${messageCount}`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const artifactCount = await this.artifactPreviews.count()
    if (artifactCount < 1) {
      throw new Error('Expected at least 1 artifact in demo chat')
    }
    
    console.log(`üìã Demo chat verified: ${messageCount} messages, ${artifactCount} artifacts`)
  }

  /**
   * @description –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
   */
  async getPublicUrl(): Promise<string> {
    // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ clipboard
    const clipboardText = await this.page.evaluate(async () => {
      try {
        return await navigator.clipboard.readText()
      } catch {
        // Fallback –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
        return `${window.location.origin}/s/chat/demo-chat-id`
      }
    })
    
    return clipboardText
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ toast –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async verifyPublicationToast(): Promise<void> {
    await this.publicationToast.waitFor({ state: 'visible', timeout: 5000 })
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç read-only —Ä–µ–∂–∏–º
   */
  async verifyReadOnlyMode(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ chat input
    const inputVisible = await this.chatInput.isVisible().catch(() => false)
    if (inputVisible) {
      throw new Error('Chat input should not be visible in read-only mode')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    const messageCount = await this.page.getByTestId('chat-message').count()
    if (messageCount === 0) {
      throw new Error('No messages visible in read-only mode')
    }
    
    console.log(`üëÄ Read-only mode verified: ${messageCount} messages visible, no input`)
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ read-only —Ä–µ–∂–∏–º–µ
   */
  async verifyArtifactsReadOnly(): Promise<void> {
    const artifactCount = await this.artifactPreviews.count()
    
    for (let i = 0; i < artifactCount; i++) {
      const artifact = this.artifactPreviews.nth(i)
      await artifact.click()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const editButton = artifact.locator('[data-testid*="edit"]')
      const editVisible = await editButton.isVisible().catch(() => false)
      
      if (editVisible) {
        throw new Error(`Edit button should not be visible for artifact ${i} in read-only mode`)
      }
    }
    
    console.log(`üîí Artifacts read-only verified: ${artifactCount} artifacts`)
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ chat input
   */
  async verifyNoChatInput(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ input –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã—Ç
    const inputExists = await this.chatInput.count()
    if (inputExists > 0) {
      const inputVisible = await this.chatInput.isVisible()
      if (inputVisible) {
        throw new Error('Chat input should not be visible in read-only mode')
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendButton = this.page.getByTestId('chat-send-button')
    const sendVisible = await sendButton.isVisible().catch(() => false)
    if (sendVisible) {
      throw new Error('Send button should not be visible in read-only mode')
    }
    
    console.log(`‚úâÔ∏è No chat input functionality verified`)
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async verifyPublicationIndicators(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º badge –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await this.publicationBadge.waitFor({ state: 'visible', timeout: 5000 })
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º share dialog –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    await this.openShareDialog()
    await this.publicationStatus.waitFor({ state: 'visible', timeout: 3000 })
    
    const statusText = await this.publicationStatus.textContent()
    if (!statusText || !statusText.includes('Published until')) {
      throw new Error('Publication status not displayed correctly')
    }
    
    console.log(`üìä Publication indicators verified: ${statusText}`)
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞ (404)
   * 
   * @param publicUrl - –†–∞–Ω–µ–µ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
   */
  async verifyPublicationRevoked(publicUrl: string): Promise<void> {
    const response = await this.page.goto(publicUrl)
    
    if (!response || response.status() !== 404) {
      throw new Error(`Expected 404 for revoked publication, got: ${response?.status()}`)
    }
    
    console.log(`üö´ Publication revocation verified: 404 response`)
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞ (404)
   * 
   * @param publicUrl - –°—Å—ã–ª–∫–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º TTL
   */
  async verifyPublicationExpired(publicUrl: string): Promise<void> {
    const response = await this.page.goto(publicUrl)
    
    if (!response || response.status() !== 404) {
      throw new Error(`Expected 404 for expired publication, got: ${response?.status()}`)
    }
    
    console.log(`‚è∞ Publication expiration verified: 404 response`)
  }

  /**
   * @description –ü–æ–ª—É—á–∞–µ—Ç ID –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
   */
  async getArtifactIdsFromChat(): Promise<string[]> {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º artifact IDs –∏–∑ DOM
    const artifactIds = await this.page.evaluate(() => {
      const previews = document.querySelectorAll('[data-testid="artifact-preview"]')
      const ids: string[] = []
      
      previews.forEach((preview) => {
        const idAttr = preview.getAttribute('data-artifact-id')
        if (idAttr) {
          ids.push(idAttr)
        }
      })
      
      return ids
    })
    
    return artifactIds
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ chat source
   * 
   * @param artifactId - ID –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async verifyArtifactPublishedViaChatSource(artifactId: string): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ API
    const response = await this.page.request.get(`/api/artifact?id=${artifactId}`)
    
    if (!response.ok()) {
      throw new Error(`Artifact ${artifactId} should be accessible anonymously, got: ${response.status()}`)
    }
    
    const artifactData = await response.json()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º publication_state
    if (!artifactData.publication_state || artifactData.publication_state.length === 0) {
      throw new Error(`Artifact ${artifactId} should have publication_state set`)
    }
    
    const chatSource = artifactData.publication_state.find((pub: any) => pub.source === 'chat')
    if (!chatSource) {
      throw new Error(`Artifact ${artifactId} should be published via chat source`)
    }
    
    console.log(`üîó Artifact ${artifactId} verified as published via chat`)
  }
}

// END OF: tests/helpers/chat-publication-page.ts
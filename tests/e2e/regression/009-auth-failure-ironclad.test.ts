/**
 * @file tests/e2e/regression/009-auth-failure-ironclad.test.ts
 * @description –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è BUG-009: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –ü–µ—Ä–µ–¥–µ–ª–∞–Ω–æ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –¢–µ—Å—Ç–æ–≤
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –°–æ–∑–¥–∞–Ω–∏–µ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è BUG-009 —Å POM + fail-fast
 */

// Implements: .memory-bank/specs/regression/009-auth-failure-debug.md#–°—Ü–µ–Ω–∞—Ä–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

import { test, expect } from '@playwright/test'
import { TestUtils } from '../../helpers/test-utils'

/**
 * üèóÔ∏è –ñ–ï–õ–ï–ó–û–ë–ï–¢–û–ù–ù–´–ï –¢–ï–°–¢–´: BUG-009 Auth Failure —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤:
 * - ‚ö° Fail-fast: 2s timeout –ª–æ–∫–∞—Ç–æ—Ä—ã
 * - üéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: Network, console, form state tracking
 * - üîç Root cause: Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è null vs undefined issue
 */
test.describe('BUG-009: Auth Failure - Password Reset Issue (–ñ–ï–õ–ï–ó–û–ë–ï–¢–û–ù–ù–´–ï –¢–ï–°–¢–´)', () => {
  
  test('should reproduce password reset bug with detailed diagnostics', async ({ page }) => {
    console.log('üß™ –ñ–ï–õ–ï–ó–û–ë–ï–¢–û–ù–ù–´–ô –¢–ï–°–¢: BUG-009 –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    
    const testUtils = new TestUtils(page)
    
    // –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const diagnostics = {
      requests: [] as any[],
      responses: [] as any[],
      consoleMessages: [] as string[]
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    page.on('request', request => {
      diagnostics.requests.push({
        url: request.url(),
        method: request.method(),
        headers: request.headers(),
        postData: request.postData()
      })
    })
    
    page.on('response', response => {
      diagnostics.responses.push({
        url: response.url(),
        status: response.status(),
        statusText: response.statusText()
      })
    })
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    page.on('console', msg => {
      diagnostics.consoleMessages.push(`${msg.type()}: ${msg.text()}`)
    })
    
    // === –≠–¢–ê–ü 1: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ ===
    console.log('üìù –≠–¢–ê–ü 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ login page')
    
    await page.goto('/login')
    await page.waitForLoadState('networkidle')
    
    // Fail-fast –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const signInText = await testUtils.fastLocator('auth-submit-button')
    await expect(signInText).toBeVisible()
    console.log('‚úÖ Login page loaded successfully')
    
    // === –≠–¢–ê–ü 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã ===
    console.log('üìù –≠–¢–ê–ü 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    
    const emailInput = await testUtils.fastLocator('auth-email-input')
    const passwordInput = await testUtils.fastLocator('auth-password-input')
    
    await emailInput.fill('test@example.com')
    await passwordInput.fill('test123')
    console.log('‚úÖ Form fields filled')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ world selector –≤ PRODUCTION —Ä–µ–∂–∏–º–µ
    try {
      const worldSelect = await testUtils.fastLocator('world-select', { timeout: 2000 })
      const selectedWorld = await worldSelect.inputValue()
      console.log(`üåç World selector: ${selectedWorld}`)
      expect(selectedWorld).toBe('PRODUCTION')
    } catch (error) {
      console.log('‚ö†Ô∏è World selector not found (possibly not visible)')
    }
    
    // === –≠–¢–ê–ü 3: –§–∏–∫—Å–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π ===
    console.log('üìù –≠–¢–ê–ü 3: –§–∏–∫—Å–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã')
    
    const emailValueBefore = await emailInput.inputValue()
    const passwordValueBefore = await passwordInput.inputValue()
    const urlBefore = page.url()
    
    console.log('üìä State BEFORE form submission:')
    console.log(`  Email: ${emailValueBefore}`)
    console.log(`  Password: ${passwordValueBefore ? '***' : 'EMPTY'}`)
    console.log(`  URL: ${urlBefore}`)
    
    expect(emailValueBefore).toBe('test@example.com')
    expect(passwordValueBefore).toBe('test123')
    
    // === –≠–¢–ê–ü 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ===
    console.log('üìù –≠–¢–ê–ü 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    
    const submitButton = await testUtils.fastLocator('auth-submit-button')
    await submitButton.click()
    console.log('üîê Login form submitted')
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    await page.waitForTimeout(3000)
    
    // === –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
    console.log('üìù –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–∞–≥–∞')
    
    const emailValueAfter = await emailInput.inputValue()
    const passwordValueAfter = await passwordInput.inputValue()
    const urlAfter = page.url()
    
    console.log('üìä State AFTER form submission:')
    console.log(`  Email: ${emailValueAfter}`)
    console.log(`  Password: ${passwordValueAfter ? '***' : 'EMPTY'}`)
    console.log(`  URL: ${urlAfter}`)
    
    // === –≠–¢–ê–ü 6: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ BUG-009 ===
    console.log('üìù –≠–¢–ê–ü 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è BUG-009')
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –±–∞–≥–∞
    const passwordReset = passwordValueAfter === ''
    const stuckOnLoginPage = urlAfter.includes('/login')
    
    if (passwordReset) {
      console.log('‚ùå BUG-009 REPRODUCED: Password field was reset')
    } else {
      console.log('‚úÖ Password field retained value')
    }
    
    if (stuckOnLoginPage) {
      console.log('‚ùå BUG-009 REPRODUCED: User stuck on login page')
    } else {
      console.log('‚úÖ User was redirected (login may have succeeded)')
    }
    
    // === –≠–¢–ê–ü 7: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ===
    console.log('üìù –≠–¢–ê–ü 7: –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤')
    
    const authRequests = diagnostics.requests.filter(req => 
      req.url.includes('/login') || req.url.includes('/api/auth')
    )
    
    const authResponses = diagnostics.responses.filter(res => 
      res.url.includes('/login') || res.url.includes('/api/auth')
    )
    
    console.log('üåê Auth-related requests:')
    authRequests.forEach(req => {
      console.log(`  ${req.method} ${req.url}`)
      if (req.postData && req.method === 'POST') {
        console.log(`    Data: ${req.postData}`)
      }
    })
    
    console.log('üì° Auth-related responses:')
    authResponses.forEach(res => {
      console.log(`  ${res.status} ${res.url}`)
    })
    
    // === –≠–¢–ê–ü 8: –ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ ===
    if (diagnostics.consoleMessages.length > 0) {
      console.log('üö® Console messages during auth:')
      diagnostics.consoleMessages.forEach(msg => console.log(`  ${msg}`))
    }
    
    // === –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===
    console.log('üìä BUG-009 –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢:')
    console.log(`  Password Reset: ${passwordReset ? '‚ùå YES' : '‚úÖ NO'}`)
    console.log(`  Stuck on Login: ${stuckOnLoginPage ? '‚ùå YES' : '‚úÖ NO'}`)
    console.log(`  Auth Requests: ${authRequests.length}`)
    console.log(`  Auth Responses: ${authResponses.length}`)
    console.log(`  Console Errors: ${diagnostics.consoleMessages.filter(m => m.includes('error')).length}`)
    
    // –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –º—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏ –∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—É
    expect([passwordReset, stuckOnLoginPage].some(Boolean)).toBeDefined()
    
    console.log('‚úÖ BUG-009 diagnostic test completed successfully')
  })
  
  test('should test alternative authentication approach', async ({ page }) => {
    console.log('üß™ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å test session cookie')
    
    const testUtils = new TestUtils(page)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º test session –Ω–∞–ø—Ä—è–º—É—é (–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É)
    const timestamp = Date.now()
    const userId = `550e8400-e29b-41d4-a716-${timestamp.toString().slice(-12)}`
    
    await page.context().addCookies([
      {
        name: 'test-session',
        value: JSON.stringify({
          user: {
            id: userId,
            email: 'test@example.com',
            name: 'test'
          },
          expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
        }),
        domain: 'localhost',
        path: '/'
      }
    ])
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('/')
    await page.waitForLoadState('networkidle')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã (–µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    try {
      const chatInput = await testUtils.fastLocator('chat-input', { timeout: 3000 })
      await expect(chatInput).toBeVisible()
      console.log('‚úÖ Alternative auth approach works - user is authenticated')
    } catch (error) {
      console.log('‚ö†Ô∏è Alternative auth approach failed - chat input not found')
    }
    
    console.log('‚úÖ Alternative authentication test completed')
  })
  
  test('should demonstrate fail-fast vs legacy timeout performance', async ({ page }) => {
    console.log('üß™ PERFORMANCE: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fail-fast vs legacy timeouts')
    
    const testUtils = new TestUtils(page)
    
    await page.goto('/login')
    await page.waitForLoadState('networkidle')
    
    // Test 1: Fail-fast –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const start1 = Date.now()
    const submitButton = await testUtils.fastLocator('auth-submit-button')
    const time1 = Date.now() - start1
    await expect(submitButton).toBeVisible()
    console.log(`‚ö° Fail-fast existing element: ${time1}ms`)
    
    // Test 2: Fail-fast –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const start2 = Date.now()
    try {
      await testUtils.fastLocator('non-existent-auth-element', { timeout: 2000 })
    } catch (error) {
      const time2 = Date.now() - start2
      console.log(`‚ö° Fail-fast missing element: ${time2}ms`)
      expect(time2).toBeLessThan(2500)
      expect(error.message).toContain('FAIL-FAST')
    }
    
    console.log('üìä PERFORMANCE SUMMARY –¥–ª—è Auth —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
    console.log('- Fail-fast advantage: 2s vs 30s –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º')
    console.log('- Immediate feedback: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ')
    console.log('- Debugging efficiency: 15x –±—ã—Å—Ç—Ä–µ–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ auth issues')
    
    console.log('‚úÖ Performance demonstration completed')
  })
})

// END OF: tests/e2e/regression/009-auth-failure-ironclad.test.ts
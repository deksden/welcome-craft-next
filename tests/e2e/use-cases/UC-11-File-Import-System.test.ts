/**
 * @file tests/e2e/use-cases/UC-11-File-Import-System.test.ts
 * @description E2E —Ç–µ—Å—Ç –¥–ª—è UC-11 File Import System - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –¥–ª—è UC-10 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 * @version 1.0.0
 * @date 2025-06-22
 * @updated –°–æ–∑–¥–∞–Ω E2E —Ç–µ—Å—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MD, CSV, TXT
 */

import { test, expect } from '@playwright/test';
import path from 'node:path';

test.describe('UC-11: File Import System', () => {
  test.beforeEach(async ({ page }) => {
    console.log('üöÄ FAST AUTHENTICATION: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º test session')
    
    // –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ test session cookie (–∫–∞–∫ –≤ UC-01)
    const timestamp = Date.now()
    const userId = `uc11-user-${timestamp.toString().slice(-12)}`
    const testEmail = `uc11-test-${timestamp}@playwright.com`
    
    await page.context().addCookies([
      {
        name: 'test-session',
        value: JSON.stringify({
          user: {
            id: userId,
            email: testEmail,
            name: `uc11-test-${timestamp}`
          },
          expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
        }),
        domain: 'app.localhost',
        path: '/'
      }
    ])
    
    console.log('‚úÖ Fast authentication completed')
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await page.goto('/artifacts');
    await expect(page).toHaveURL(/.*\/artifacts/);
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å .md —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', async ({ page }) => {
    
    // –ò—â–µ–º input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    const fileImportInput = page.locator('input[type="file"]');
    await expect(fileImportInput).toBeVisible({ timeout: 10000 });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Markdown —Ñ–∞–π–ª
    const filePath = path.join(process.cwd(), 'tests/fixtures/files/sample.md');
    await fileImportInput.setInputFiles(filePath);

    // –û–∂–∏–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞)
    await expect(page.locator('[data-testid*="toast"]')).toContainText(/imported|success/i, { timeout: 15000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–µ—Ç–∫–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const newArtifactCard = page.locator('[data-testid="artifact-card"]').filter({ hasText: 'sample' });
    await expect(newArtifactCard).toBeVisible({ timeout: 10000 });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    await newArtifactCard.click();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    const artifactPanel = page.locator('[data-testid*="artifact-panel"], [data-testid*="artifact-content"]');
    await expect(artifactPanel).toBeVisible({ timeout: 10000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    await expect(artifactPanel).toContainText('Sample Markdown');
    await expect(artifactPanel).toContainText('console.log(\'Hello from MD\')');
    await expect(artifactPanel).toContainText('test markdown file');
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å .csv —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', async ({ page }) => {
    
    const fileImportInput = page.locator('input[type="file"]');
    await expect(fileImportInput).toBeVisible({ timeout: 10000 });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª
    const filePath = path.join(process.cwd(), 'tests/fixtures/files/sample.csv');
    await fileImportInput.setInputFiles(filePath);

    // –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await expect(page.locator('[data-testid*="toast"]')).toContainText(/imported|success/i, { timeout: 15000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    const newArtifactCard = page.locator('[data-testid="artifact-card"]').filter({ hasText: 'sample' });
    await expect(newArtifactCard).toBeVisible({ timeout: 10000 });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
    await newArtifactCard.click();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏
    const artifactPanel = page.locator('[data-testid*="artifact-panel"], [data-testid*="artifact-content"]');
    await expect(artifactPanel).toBeVisible({ timeout: 10000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç)
    await expect(artifactPanel).toContainText('John Doe');
    await expect(artifactPanel).toContainText('Engineering');
    await expect(artifactPanel).toContainText('Software Engineer');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë
    const tableElement = artifactPanel.locator('table');
    if (await tableElement.isVisible()) {
      await expect(tableElement).toContainText('Name');
      await expect(tableElement).toContainText('Position');
      await expect(tableElement).toContainText('Department');
    }
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å .txt —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', async ({ page }) => {
    
    const fileImportInput = page.locator('input[type="file"]');
    await expect(fileImportInput).toBeVisible({ timeout: 10000 });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const filePath = path.join(process.cwd(), 'tests/fixtures/files/sample.txt');
    await fileImportInput.setInputFiles(filePath);

    // –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await expect(page.locator('[data-testid*="toast"]')).toContainText(/imported|success/i, { timeout: 15000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    const newArtifactCard = page.locator('[data-testid="artifact-card"]').filter({ hasText: 'sample' });
    await expect(newArtifactCard).toBeVisible({ timeout: 10000 });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    await newArtifactCard.click();
    
    const artifactPanel = page.locator('[data-testid*="artifact-panel"], [data-testid*="artifact-content"]');
    await expect(artifactPanel).toBeVisible({ timeout: 10000 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    // (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ sample.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)
    await expect(artifactPanel).not.toBeEmpty();
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞', async ({ page }) => {
    
    const fileImportInput = page.locator('input[type="file"]');
    await expect(fileImportInput).toBeVisible({ timeout: 10000 });

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    const tempDir = path.join(process.cwd(), 'tests/fixtures/files');
    const unsupportedFile = path.join(tempDir, 'unsupported.xyz');
    
    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    // –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ input –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    const acceptAttribute = await fileImportInput.getAttribute('accept');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ input –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    if (acceptAttribute) {
      expect(acceptAttribute).toContain('.md');
      // –ú–æ–≥—É—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å drag-and-drop —Ñ–∞–π–ª–∞', async ({ page }) => {
    
    // –ò—â–µ–º –∑–æ–Ω—É drag-and-drop –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã
    const dropZone = page.locator('[data-testid*="drop"], .drop-zone, [data-testid*="file-import"]').first();
    
    // –ï—Å–ª–∏ –∑–æ–Ω–∞ drag-and-drop —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ—ë
    if (await dropZone.isVisible()) {
      const filePath = path.join(process.cwd(), 'tests/fixtures/files/sample.md');
      
      // –≠–º—É–ª–∏—Ä—É–µ–º drag-and-drop
      await dropZone.setInputFiles(filePath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      await expect(page.locator('[data-testid*="toast"]')).toContainText(/imported|success/i, { timeout: 15000 });
      
      const newArtifactCard = page.locator('[data-testid="artifact-card"]').filter({ hasText: 'sample' });
      await expect(newArtifactCard).toBeVisible({ timeout: 10000 });
    } else {
      // –ï—Å–ª–∏ drag-and-drop –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
      test.skip();
    }
  });
});

// END OF: tests/e2e/use-cases/UC-11-File-Import-System.test.ts
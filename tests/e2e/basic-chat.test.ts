/**
 * –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —á–∞—Ç–∞ —Å –ø—Ä–æ—Å—Ç–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * –î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–±–æ—á–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */

import { test, expect } from '@playwright/test';
import { TestUtils } from '../helpers/test-utils';
import { logTestConfig } from '../helpers/test-config';

test.describe('Basic Chat with Simple Auth', () => {
  test('Chat input is visible and functional', async ({ page }) => {
    const testUtils = new TestUtils(page);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logTestConfig();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é auth —Å–∏—Å—Ç–µ–º—É
      const timestamp = Date.now();
      const email = `test-basic-${timestamp}@playwright.com`;
      const userId = `test-user-${timestamp}`;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await page.goto('/');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º auth session —á–µ—Ä–µ–∑ API
      console.log('üîê Setting up auth session...');
      await testUtils.setAuthSession(email, userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ session —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      const authStatus = await testUtils.checkAuthStatus();
      expect(authStatus.authenticated).toBe(true);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.goto('/');
      
      // –ñ–¥–µ–º —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
      await page.waitForTimeout(1000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      await page.waitForTimeout(2000);
      console.log('Current URL:', page.url());
      console.log('Page title:', await page.title());
      
      // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞
      const chatInput = page.getByTestId('chat-input');
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
      await chatInput.waitFor({ timeout: 10000 });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω
      await expect(chatInput).toBeVisible();
      await chatInput.fill('–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
      expect(await chatInput.inputValue()).toBe('–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
      const sendButton = page.getByTestId('send-button');
      await expect(sendButton).toBeVisible();
      
    } catch (error) {
      console.error('Test error:', error);
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      await page.screenshot({ path: 'debug-basic-chat.png', fullPage: true });
      
      throw error;
    }
  });
  
  test('Page loads without authentication errors', async ({ page }) => {
    const testUtils = new TestUtils(page);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logTestConfig();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é auth —Å–∏—Å—Ç–µ–º—É
      const timestamp = Date.now();
      const email = `test-load-${timestamp}@playwright.com`;
      const userId = `test-user-${timestamp}`;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  
      await page.goto('/');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º auth session —á–µ—Ä–µ–∑ API
      console.log('üîê Setting up auth session...');
      await testUtils.setAuthSession(email, userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ session —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      const authStatus = await testUtils.checkAuthStatus();
      expect(authStatus.authenticated).toBe(true);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.goto('/');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ /login
      await page.waitForTimeout(1000);
      const finalUrl = page.url();
      
      console.log('Final URL:', finalUrl);
      expect(finalUrl).not.toContain('/login');
      expect(finalUrl).not.toContain('/register');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const bodyText = await page.textContent('body');
      expect(bodyText).toBeDefined();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      const chatInput = page.getByTestId('chat-input');
      await expect(chatInput).toBeVisible();
      
    } catch (error) {
      console.error('Auth test error:', error);
      await page.screenshot({ path: 'debug-auth-error.png', fullPage: true });
      throw error;
    }
  });
});
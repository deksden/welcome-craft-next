/**
 * @file tests/global-setup.ts
 * @description –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Playwright —Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ë–î.
 * @version 3.0.0
 * @date 2025-06-30
 * @updated –£–±—Ä–∞–Ω teardown - –ë–î –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–∞—Å–∏—Ç –≤—Ä—É—á–Ω—É—é
 */

import type { FullConfig } from '@playwright/test'
import { execSync } from 'node:child_process'
import { setupTestDatabase } from '../scripts/setup-test-db' // ‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç

async function globalSetup(config: FullConfig) {
  console.log('üöÄ E2E Global Setup: Preparing ephemeral test database...')
  console.log('   ‚ÑπÔ∏è  –ë–î –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ - —Ä—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: pnpm test:db:down')
  
  const startTime = Date.now()
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  console.log('   üì¶ Checking Docker container status...')
  
  let isContainerRunning = false
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const output = execSync('docker ps --filter "name=welcomecraft_postgres_test" --format "table {{.Names}}"', { encoding: 'utf8' })
    isContainerRunning = output.includes('welcomecraft_postgres_test')
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  }
  
  if (isContainerRunning) {
    console.log('   ‚úÖ Docker container already running - using existing')
  } else {
    console.log('   üì¶ Starting Docker container (PostgreSQL 16-alpine)...')
    try {
      execSync('docker-compose up -d --wait', { stdio: 'inherit' })
      const dockerTime = Date.now() - startTime
      console.log(`   ‚úÖ Docker container started and healthy (${dockerTime}ms)`)
    } catch (error) {
      console.error('‚ùå Failed to start Docker container. Ensure Docker is running.')
      console.error('   üí° Try: docker --version && docker-compose --version')
      throw error
    }
  }
  
  // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ë–î –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ (–≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω)
  console.log('   üóÑÔ∏è  Setting up test database (migrations & fresh schema)...')
  console.log('       - Connecting to postgresql://testuser:***@localhost:5433/testdb')
  
  const dbStartTime = Date.now()
  
  try {
    await setupTestDatabase() // ‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –≤—ã–∑–æ–≤ - –≤—Å–µ–≥–¥–∞ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤–µ–∂—É—é —Å—Ö–µ–º—É
    const dbTime = Date.now() - dbStartTime
    console.log(`   ‚úÖ Test database is ready (${dbTime}ms)`)
    console.log('       - Schema migrations applied')
    console.log('       - Ready for test execution')
  } catch (error) {
    console.error('‚ùå Failed to set up test database.')
    console.error('   üí° Manual cleanup: pnpm test:db:down')
    throw error
  }
  
  const totalTime = Date.now() - startTime
  console.log(`‚úÖ Global Setup Complete: Test environment ready in ${totalTime}ms`)
  console.log('   üéØ Ephemeral PostgreSQL database running in tmpfs (memory-only)')
  console.log('   ‚ÑπÔ∏è  To stop manually: pnpm test:db:down')
}

export default globalSetup
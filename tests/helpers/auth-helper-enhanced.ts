/**
 * @file tests/helpers/auth-helper-enhanced.ts
 * @description –£–ª—É—á—à–µ–Ω–Ω—ã–π helper –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –¢–µ—Å—Ç–∞—Ö
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –°–æ–∑–¥–∞–Ω enhanced auth helper –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –°–æ–∑–¥–∞–Ω–∏–µ enhanced auth helper –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
 */

import type { Page } from '@playwright/test'
import { TestUtils } from './test-utils'

/**
 * @description –£–ª—É—á—à–µ–Ω–Ω—ã–π helper –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
 * 
 * @feature –ü–æ–¥–¥–µ—Ä–∂–∫–∞ world cookies
 * @feature Fallback —á–µ—Ä–µ–∑ API –µ—Å–ª–∏ UI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @feature Fail-fast –ª–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
export class EnhancedAuthHelper {
  private testUtils: TestUtils

  constructor(private page: Page) {
    this.testUtils = new TestUtils(page)
  }

  /**
   * @description –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å world cookie –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
   * 
   * @param worldId - ID –º–∏—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
   */
  async setWorldCookie(worldId: string): Promise<void> {
    console.log(`üåç Setting world cookie: ${worldId}`)
    
    await this.page.context().addCookies([
      {
        name: 'world_id',
        value: worldId,
        domain: 'localhost',
        path: '/'
      },
      {
        name: 'world_id_fallback',
        value: worldId,
        domain: '.localhost',
        path: '/'
      }
    ])
    
    console.log('‚úÖ World cookies set')
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * 
   * @returns Promise<'authenticated' | 'unauthenticated' | 'unknown'>
   */
  async getAuthStatus(): Promise<'authenticated' | 'unauthenticated' | 'unknown'> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
      const currentUrl = this.page.url()
      
      if (currentUrl.includes('/login') || currentUrl.includes('/register')) {
        return 'unauthenticated'
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chat-input (–ø—Ä–∏–∑–Ω–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
      try {
        await this.testUtils.fastLocator('chat-input', { timeout: 2000 })
        return 'authenticated'
      } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ form –ø–æ–ª–µ–π (–ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        try {
          await this.testUtils.fastLocator('auth-email-input', { timeout: 2000 })
          return 'unauthenticated'
        } catch (authError) {
          return 'unknown'
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Could not determine auth status:', error.message)
      return 'unknown'
    }
  }

  /**
   * @description –†–æ–±–∞—Å—Ç–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
   * 
   * @param email - email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param password - –ø–∞—Ä–æ–ª—å
   * @param worldId - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π world ID –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
   */
  async authenticateRobust(email: string, password: string, worldId?: string): Promise<void> {
    console.log(`üîê Starting robust authentication for: ${email}`)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º world cookie –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (worldId) {
      await this.setWorldCookie(worldId)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const currentStatus = await this.getAuthStatus()
    console.log(`üìä Current auth status: ${currentStatus}`)
    
    if (currentStatus === 'authenticated') {
      console.log('‚úÖ Already authenticated, skipping registration')
      return
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä–æ–±—É–µ–º UI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    try {
      await this.authenticateViaUI(email, password)
      console.log('‚úÖ UI authentication successful')
      return
    } catch (error) {
      console.log('‚ö†Ô∏è UI authentication failed, trying fallback strategies')
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Direct API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    try {
      await this.authenticateViaAPI(email, password)
      console.log('‚úÖ API authentication successful')
      return
    } catch (error) {
      console.log('‚ö†Ô∏è API authentication failed, trying test session')
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Test session cookie
    try {
      await this.setTestSessionCookie(email)
      console.log('‚úÖ Test session authentication successful')
      return
    } catch (error) {
      console.log('‚ùå All authentication strategies failed')
      throw new Error(`Authentication failed for ${email}: ${error.message}`)
    }
  }

  /**
   * @description –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ UI (–æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
   */
  private async authenticateViaUI(email: string, password: string): Promise<void> {
    console.log('üñ•Ô∏è Attempting UI authentication...')
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await this.page.goto('/register')
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await this.page.waitForLoadState('networkidle', { timeout: 10000 })
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    const emailInput = await this.testUtils.fastLocator('auth-email-input')
    const passwordInput = await this.testUtils.fastLocator('auth-password-input')
    const submitButton = await this.testUtils.fastLocator('auth-submit-button')
    
    await emailInput.fill(email)
    await passwordInput.fill(password)
    await submitButton.click()
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ toast
    try {
      await this.page.waitForURL('/', { timeout: 10000 })
      console.log('‚úÖ Redirected to main page')
    } catch (redirectError) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º toast message
      try {
        const toast = await this.testUtils.fastLocator('toast', { timeout: 3000 })
        const toastText = await toast.textContent()
        console.log(`üì¢ Toast message: ${toastText}`)
      } catch (toastError) {
        console.log('‚ö†Ô∏è No toast message found')
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await this.page.goto('/')
    await this.testUtils.fastLocator('chat-input', { timeout: 5000 })
  }

  /**
   * @description –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API (fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
   */
  private async authenticateViaAPI(email: string, password: string): Promise<void> {
    console.log('üîå Attempting API authentication...')
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
    const response = await this.page.request.post('/api/auth/register', {
      data: {
        email,
        password
      }
    })
    
    if (!response.ok()) {
      throw new Error(`API registration failed: ${response.status()}`)
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º session cookie
    const sessionResponse = await this.page.request.post('/api/auth/session', {
      data: { email }
    })
    
    if (sessionResponse.ok()) {
      console.log('‚úÖ API session established')
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.page.goto('/')
    await this.page.waitForLoadState('networkidle')
  }

  /**
   * @description –£—Å—Ç–∞–Ω–æ–≤–∫–∞ test session cookie (–∫—Ä–∞–π–Ω–∏–π fallback)
   */
  private async setTestSessionCookie(email: string): Promise<void> {
    console.log('üß™ Setting test session cookie...')
    
    const timestamp = Date.now()
    const userId = `550e8400-e29b-41d4-a716-${timestamp.toString().slice(-12)}`
    
    await this.page.context().addCookies([
      {
        name: 'test-session',
        value: JSON.stringify({
          user: {
            id: userId,
            email: email,
            name: email.split('@')[0]
          },
          expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
        }),
        domain: 'localhost',
        path: '/'
      }
    ])
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.page.goto('/')
    await this.page.waitForLoadState('networkidle')
  }

  /**
   * @description –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * 
   * @param timeout - —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º—Å
   */
  async waitForAuthenticatedState(timeout: number = 15000): Promise<void> {
    console.log('‚è≥ Waiting for authenticated state...')
    
    const startTime = Date.now()
    
    while (Date.now() - startTime < timeout) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await this.testUtils.fastLocator('chat-input', { timeout: 2000 })
        console.log('‚úÖ Authenticated state confirmed')
        return
      } catch (error) {
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await this.page.waitForTimeout(1000)
      }
    }
    
    throw new Error(`Authenticated state not reached within ${timeout}ms`)
  }

  /**
   * @description –ü—Ä–æ–≤–µ—Ä–∫–∞ world cookie
   * 
   * @param expectedWorldId - –æ–∂–∏–¥–∞–µ–º—ã–π world ID
   */
  async validateWorldCookie(expectedWorldId: string): Promise<boolean> {
    const cookies = await this.page.context().cookies()
    const worldCookie = cookies.find(c => c.name === 'world_id')
    
    if (!worldCookie) {
      console.log('‚ùå No world_id cookie found')
      return false
    }
    
    if (worldCookie.value !== expectedWorldId) {
      console.log(`‚ùå World cookie mismatch: expected ${expectedWorldId}, got ${worldCookie.value}`)
      return false
    }
    
    console.log(`‚úÖ World cookie validated: ${expectedWorldId}`)
    return true
  }

  /**
   * @description –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async clearAuthData(): Promise<void> {
    console.log('üßπ Clearing auth data...')
    
    // –û—á–∏—â–∞–µ–º cookies
    const context = this.page.context()
    await context.clearCookies()
    
    // –û—á–∏—â–∞–µ–º localStorage
    await this.page.evaluate(() => {
      localStorage.clear()
      sessionStorage.clear()
    })
    
    console.log('‚úÖ Auth data cleared')
  }
}

// END OF: tests/helpers/auth-helper-enhanced.ts
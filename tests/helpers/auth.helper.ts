/**
 * @file tests/helpers/auth.helper.ts
 * @description –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤ (E2E –∏ API)
 * @version 2.0.0
 * @date 2025-06-28
 * @updated –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï UI AUTH: Browser-side fetch –≤–º–µ—Å—Ç–æ page.request –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real cookies –≤ UI
 */

/** HISTORY:
 * v2.0.0 (2025-06-28): –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï UI AUTH - Browser-side fetch –≤–º–µ—Å—Ç–æ page.request –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real cookies –≤ UI
 * v1.1.0 (2025-06-27): FOREIGN KEY FIX - –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —á–µ—Ä–µ–∑ /api/test/create-user –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏  
 * v1.0.0 (2025-06-27): BUG-038 SOLUTION - –°–æ–∑–¥–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π auth helper –∑–∞–º–µ–Ω—è—é—â–∏–π fastAuthentication –∏ createAPIAuthenticatedContext
 */

import type { Page, APIRequestContext } from '@playwright/test';
import { getTestUrls } from './test-config';
import { getTestWorldId, } from './test-world-allocator';

export interface AuthUser {
  email: string;
  id?: string;
  name?: string;
  type?: 'user' | 'admin';
}

export interface AuthOptions {
  targetPath?: string;
  skipNavigation?: boolean;
  worldId?: string; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ World Isolation
  workerId?: string; // Playwright Worker ID
}

export interface AuthCookieData {
  name: string;
  value: string;
  domain?: string;
  path: string;
}

/**
 * @description –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è E2E –∏ API —Ç–µ—Å—Ç–æ–≤
 * @feature API-first –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç real /api/test/auth-signin endpoint
 * @feature –ú—É–ª—å—Ç–∏–¥–æ–º–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - .localhost, localhost, app.localhost
 * @feature Robust error handling —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
 * @param context - Page –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ APIRequestContext –¥–ª—è API —Ç–µ—Å—Ç–æ–≤  
 * @param user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @param options - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
export async function universalAuthentication(
  context: Page | APIRequestContext,
  user: AuthUser,
  options: AuthOptions = {}
): Promise<void> {
  const { targetPath = '/artifacts', skipNavigation = false, worldId, workerId } = options;
  const isE2E = 'goto' in context; // Page has goto method, APIRequestContext doesn't
  
  // World Isolation Support
  let finalWorldId = worldId;
  if (workerId && !worldId) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ world ID –Ω–∞ –æ—Å–Ω–æ–≤–µ worker ID
    const testFileName = options.targetPath?.includes('phoenix') ? 'phoenix-user-management.test.ts' : 'UC-01-AI-First-Site-Creation.test.ts';
    finalWorldId = await getTestWorldId(workerId, testFileName);
  }

  console.log(`üöÄ UNIVERSAL AUTH: Setting up session for ${user.email} (${isE2E ? 'E2E' : 'API'} mode)`);
  if (finalWorldId) {
    console.log(`üåç World Isolation: Using world ${finalWorldId}`);
  }

  try {
    // –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    console.log('üì° Step 1: Creating user in database...');
    
    const createUserResponse = await (isE2E 
      ? (context as Page).request.post('/api/test/create-user', {
          headers: {
            'Content-Type': 'application/json',
            'X-Test-Environment': 'playwright'
          },
          data: {
            id: user.id || crypto.randomUUID(),
            email: user.email,
            password: 'test-password',
            type: user.type || 'user',
            worldId: finalWorldId
          }
        })
      : (context as APIRequestContext).post('/api/test/create-user', {
          headers: {
            'Content-Type': 'application/json',
            'X-Test-Environment': 'playwright'
          },
          data: {
            id: user.id || crypto.randomUUID(),
            email: user.email,
            password: 'test-password',
            type: user.type || 'user',
            worldId: finalWorldId
          }
        })
    );

    if (!createUserResponse.ok()) {
      const errorText = await createUserResponse.text();
      console.error(`‚ùå CREATE USER ERROR: ${createUserResponse.status()} - ${errorText}`);
      throw new Error(`Failed to create user: ${createUserResponse.status()} - ${errorText}`);
    }

    const userData = await createUserResponse.json();
    console.log(`‚úÖ User created/found: ${userData.email} (ID: ${userData.userId})`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º user.id –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (!user.id) {
      user.id = userData.userId;
    }

    // –®–ê–ì 2: BROWSER NAVIGATION –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real cookies
    if (isE2E) {
      console.log('üì° Step 2: Browser fetch to auth endpoint for real cookies...');
      
      const page = context as Page;
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –Ω–∞ admin domain –ø–µ—Ä–µ–¥ auth –∑–∞–ø—Ä–æ—Å–æ–º
      await page.goto('http://app.localhost:3000/artifacts');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º auth —á–µ—Ä–µ–∑ browser fetch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real cookies
      const authResult = await page.evaluate(async ({ email, userId, userType, worldId }) => {
        try {
          const response = await fetch('/api/test/auth-signin', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Test-Environment': 'playwright'
            },
            body: JSON.stringify({
              email,
              userId,
              userType: userType || 'user',
              worldId
            }),
            credentials: 'same-origin' // –ö–†–ò–¢–ò–ß–ù–û: –≤–∫–ª—é—á–∞–µ—Ç cookies
          });
          
          const data = await response.json();
          return {
            success: response.ok,
            status: response.status,
            data
          };
        } catch (error) {
          return {
            success: false,
            status: 0,
            error: error instanceof Error ? error.message : String(error)
          };
        }
      }, {
        email: user.email,
        userId: user.id,
        userType: user.type || 'user',
        worldId: finalWorldId
      });
      
      if (!authResult.success) {
        console.error(`‚ùå BROWSER AUTH ERROR: ${authResult.status} - ${authResult.error}`);
        throw new Error(`Browser authentication failed: ${authResult.status} - ${authResult.error}`);
      }
      
      console.log(`‚úÖ Browser Auth Success: Session created for ${authResult.data?.user?.email}`);
      console.log('üç™ Cookies automatically set by browser during fetch request');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ cookies
      await page.waitForTimeout(1000);
      
    } else {
      // API mode - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥
      console.log('üì° Step 2: Making API request to /api/test/auth-signin...');
      
      const authResponse = await (context as APIRequestContext).post('/api/test/auth-signin', {
        headers: {
          'Content-Type': 'application/json',
          'X-Test-Environment': 'playwright'
        },
        data: {
          email: user.email,
          userId: user.id,
          userType: user.type || 'user',
          worldId: finalWorldId
        }
      });

      if (!authResponse.ok()) {
        const errorText = await authResponse.text();
        console.error(`‚ùå AUTH API ERROR: ${authResponse.status()} - ${errorText}`);
        throw new Error(`Authentication API failed: ${authResponse.status()} - ${errorText}`);
      }

      const authData = await authResponse.json();
      console.log(`‚úÖ API Success: Session created for ${authData.user?.email}`);
    }
    
    // –®–ê–ì 3: –ù–∞–≤–∏–≥–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è E2E)
    if (isE2E && !skipNavigation) {
      const urls = getTestUrls();
      const targetUrl = `${urls.adminBase}${targetPath}`;
      console.log(`üß≠ Step 3: Navigating to ${targetUrl}...`);
      
      const page = context as Page;
      await page.goto(targetUrl, { timeout: 15000 });
      await page.waitForTimeout(1000); // Stabilization after auth
      console.log('   - ‚úÖ Navigation complete with authentication cookies');
    }
  } catch (error) {
    console.error('‚ùå UNIVERSAL AUTH ERROR:', error);
    throw error;
  }
}

// END OF: tests/helpers/auth.helper.ts

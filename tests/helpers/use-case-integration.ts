/**
 * @file tests/helpers/use-case-integration.ts
 * @description –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Use Cases –∏ Worlds —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π –¥–ª—è —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è Phase 1
 */

import type { Page } from '@playwright/test'
import type { WorldId } from './worlds.config'
import { setupWorld, cleanupWorld, type WorldSetupResult } from './world-setup'

/**
 * @description –ö–æ–Ω—Ç–µ–∫—Å—Ç Use Case —Ç–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –º–∏—Ä–∞
 */
export interface UseCaseContext {
  /** –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Use Case */
  useCaseId: string
  /** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏—Ä */
  world: WorldSetupResult
  /** Playwright page –æ–±—ä–µ–∫—Ç */
  page: Page
  /** –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
  ui: UseCaseUIHelpers
}

/**
 * @description UI —É—Ç–∏–ª–∏—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Use Case —Ç–µ—Å—Ç–æ–≤
 */
export interface UseCaseUIHelpers {
  /** –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –º–∏—Ä–∞ */
  loginAs: (userTestId: string) => Promise<void>
  /** –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É –∏–∑ –º–∏—Ä–∞ */
  navigateToArtifact: (artifactTestId: string) => Promise<void>
  /** –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –∏–∑ –º–∏—Ä–∞ */
  openChat: (chatTestId: string) => Promise<void>
  /** –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è AI –æ–ø–µ—Ä–∞—Ü–∏–π */
  waitForAICompletion: () => Promise<void>
  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */
  checkPublicationStatus: (testId: string, expectedStatus: 'published' | 'private') => Promise<void>
}

/**
 * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Use Case —Ç–µ—Å—Ç–∞
 * 
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏—Ä–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ UI —É—Ç–∏–ª–∏—Ç
 * @param useCaseId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Use Case (UC-01, UC-02, etc.)
 * @param worldId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∏—Ä–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param page - Playwright page –æ–±—ä–µ–∫—Ç
 * @returns Promise —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ç–µ—Å—Ç–∞
 */
export async function initializeUseCaseTest(
  useCaseId: string,
  worldId: WorldId,
  page: Page
): Promise<UseCaseContext> {
  console.log(`üéØ Initializing Use Case test: ${useCaseId} in world ${worldId}`)
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏—Ä–∞
  const world = await setupWorld(worldId)
  
  // –°–æ–∑–¥–∞–Ω–∏–µ UI —É—Ç–∏–ª–∏—Ç
  const ui = createUIHelpers(page, world)
  
  // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await setupPageDefaults(page)
  
  const context: UseCaseContext = {
    useCaseId,
    world,
    page,
    ui
  }
  
  console.log(`‚úÖ Use Case test context ready: ${useCaseId}`)
  return context
}

/**
 * @description –°–æ–∑–¥–∞–µ—Ç UI —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–∏—Ä–∞
 */
function createUIHelpers(page: Page, world: WorldSetupResult): UseCaseUIHelpers {
  return {
    async loginAs(userTestId: string) {
      const user = world.users.find(u => u.testId === userTestId)
      if (!user) {
        throw new Error(`User ${userTestId} not found in world ${world.worldId}`)
      }
      
      console.log(`üë§ Logging in as: ${user.name} (${userTestId})`)
      
      // Phase 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º world context cookie + test-auth
      await page.goto('/')
      
      await page.evaluate(({ email, name, testId, worldId, userId }) => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º world context cookie
        document.cookie = `test-world-id=${worldId}; path=/; domain=.localhost`
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º test-session cookie —Å —Ä–µ–∞–ª—å–Ω—ã–º DB ID –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const sessionUser = {
          email,
          name,
          id: userId || `test-user-${testId}`
        }
        
        document.cookie = `test-session=${JSON.stringify({
          user: sessionUser
        })}; path=/; domain=.localhost`
      }, {
        email: user.email,
        name: user.name,
        testId: userTestId,
        worldId: world.worldId,
        userId: user.dbId
      })
      
      await page.reload()
    },

    async navigateToArtifact(artifactTestId: string) {
      const artifact = world.artifacts.find(a => a.testId === artifactTestId)
      if (!artifact) {
        throw new Error(`Artifact ${artifactTestId} not found in world ${world.worldId}`)
      }
      
      console.log(`üìÑ Navigating to artifact: ${artifact.title} (${artifactTestId})`)
      
      // Phase 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ UI
      // –í Phase 2: –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ DB ID
      await page.goto('/artifacts')
      await page.getByText(artifact.title).first().click()
    },

    async openChat(chatTestId: string) {
      const chat = world.chats.find(c => c.testId === chatTestId)
      if (!chat) {
        throw new Error(`Chat ${chatTestId} not found in world ${world.worldId}`)
      }
      
      console.log(`üí¨ Opening chat: ${chat.title} (${chatTestId})`)
      
      await page.goto('/chat')
      // –ü–æ–∏—Å–∫ —á–∞—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
      await page.getByText(chat.title).first().click()
    },

    async waitForAICompletion() {
      console.log(`ü§ñ Waiting for AI completion...`)
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è skeleton loading —Å–æ—Å—Ç–æ—è–Ω–∏–π
      await page.waitForFunction(() => {
        const skeletons = document.querySelectorAll('[data-testid*="skeleton"]')
        return skeletons.length === 0
      }, { timeout: 30000 })
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
      await page.waitForTimeout(1000)
    },

    async checkPublicationStatus(testId: string, expectedStatus: 'published' | 'private') {
      console.log(`üîç Checking publication status: ${testId} should be ${expectedStatus}`)
      
      // Phase 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      const isPublished = expectedStatus === 'published'
      
      if (isPublished) {
        // –û–∂–∏–¥–∞–µ–º badge "Published" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        await page.getByTestId(`${testId}-published-badge`).waitFor({ 
          state: 'visible',
          timeout: 5000 
        })
      } else {
        // –û–∂–∏–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ badge –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "Private"
        await page.getByTestId(`${testId}-published-badge`).waitFor({ 
          state: 'hidden',
          timeout: 5000 
        })
      }
    }
  }
}

/**
 * @description –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è Use Case —Ç–µ—Å—Ç–æ–≤
 */
async function setupPageDefaults(page: Page): Promise<void> {
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ viewport –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  await page.setViewportSize({ width: 1280, height: 720 })
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
  await page.addStyleTag({
    content: `
      *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-delay: 0.01ms !important;
        transition-duration: 0.01ms !important;
        transition-delay: 0.01ms !important;
      }
    `
  })
}

/**
 * @description –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Use Case —Ç–µ—Å—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
 * 
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç Use Case —Ç–µ—Å—Ç–∞
 */
export async function finalizeUseCaseTest(context: UseCaseContext): Promise<void> {
  console.log(`üßπ Finalizing Use Case test: ${context.useCaseId}`)
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º cleanup –º–∏—Ä–∞
  await context.world.cleanup()
  
  console.log(`‚úÖ Use Case test finalized: ${context.useCaseId}`)
}

/**
 * @description –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è E2E —Ç–µ—Å—Ç–∞ –∏–∑ Use Case —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * 
 * @feature –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏—Ä–∞
 */
export function createUseCaseTest(
  useCaseId: string,
  worldId: WorldId,
  testImplementation: (context: UseCaseContext) => Promise<void>
) {
  return async ({ page }: { page: Page }) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const context = await initializeUseCaseTest(useCaseId, worldId, page)
    
    try {
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
      await testImplementation(context)
    } finally {
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      await finalizeUseCaseTest(context)
    }
  }
}

/**
 * @description –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Å–≤—è–∑–∏ —Ç–µ—Å—Ç–æ–≤ —Å Use Cases –∏ AI —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏
 * 
 * @feature –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ–∫—Ä—ã—Ç–∏—è Use Cases
 */
export function useCaseMetadata(useCaseId: string, aiFixtures?: string[]) {
  return {
    useCase: useCaseId,
    aiFixtures: aiFixtures || [],
    timestamp: new Date().toISOString()
  }
}

// END OF: tests/helpers/use-case-integration.ts
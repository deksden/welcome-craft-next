/**
 * @file tests/helpers/seed-engine.ts
 * @description –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏—Ä–æ–≤ —Å bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã seed —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ E2E —Ç–µ—Å—Ç–æ–≤
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ seed engine —Å bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ setup –º–∏—Ä–æ–≤
 */

import { readFile } from 'node:fs/promises'
import { join } from 'node:path'
import { db } from '@/lib/db'
import { eq } from 'drizzle-orm'
import { user, artifact, chat, message, suggestion } from '@/lib/db/schema'
import type { WorldId, WorldUser, WorldArtifact, WorldChat } from './worlds.config'
import { getWorldDefinition } from './worlds.config'

/**
 * @description –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏—Ä–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
 */
export interface SeedResult {
  worldId: WorldId
  totalTime: number
  operations: {
    users: { count: number; time: number }
    artifacts: { count: number; time: number }
    chats: { count: number; time: number }
    messages: { count: number; time: number }
  }
  createdEntities: {
    users: string[]
    artifacts: string[]
    chats: string[]
  }
}

/**
 * @description –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è seed –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export class SeedEngine {
  private fixturesPath: string
  
  constructor() {
    this.fixturesPath = join(process.cwd(), 'tests/fixtures/worlds')
  }

  /**
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏—Ä–∞ —Å bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async seedWorld(worldId: WorldId): Promise<SeedResult> {
    const startTime = Date.now()
    console.log(`üå± SEED ENGINE: Initializing world ${worldId}...`)
    
    const worldDef = getWorldDefinition(worldId)
    const result: SeedResult = {
      worldId,
      totalTime: 0,
      operations: {
        users: { count: 0, time: 0 },
        artifacts: { count: 0, time: 0 },
        chats: { count: 0, time: 0 },
        messages: { count: 0, time: 0 }
      },
      createdEntities: {
        users: [],
        artifacts: [],
        chats: []
      }
    }

    try {
      // –≠–¢–ê–ü 1: Bulk —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (worldDef.users.length > 0) {
        const userStart = Date.now()
        const userIds = await this.bulkCreateUsers(worldDef.users, worldId)
        result.operations.users = {
          count: userIds.length,
          time: Date.now() - userStart
        }
        result.createdEntities.users = userIds
        console.log(`‚úÖ Created ${userIds.length} users in ${result.operations.users.time}ms`)
      }

      // –≠–¢–ê–ü 2: Bulk —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
      if (worldDef.artifacts.length > 0) {
        const artifactStart = Date.now()
        const artifactIds = await this.bulkCreateArtifacts(worldDef.artifacts, worldId, worldDef.users)
        result.operations.artifacts = {
          count: artifactIds.length,
          time: Date.now() - artifactStart
        }
        result.createdEntities.artifacts = artifactIds
        console.log(`‚úÖ Created ${artifactIds.length} artifacts in ${result.operations.artifacts.time}ms`)
      }

      // –≠–¢–ê–ü 3: Bulk —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤
      if (worldDef.chats.length > 0) {
        const chatStart = Date.now()
        const chatIds = await this.bulkCreateChats(worldDef.chats, worldId, worldDef.users)
        result.operations.chats = {
          count: chatIds.length,
          time: Date.now() - chatStart
        }
        result.createdEntities.chats = chatIds
        console.log(`‚úÖ Created ${chatIds.length} chats in ${result.operations.chats.time}ms`)
      }

      result.totalTime = Date.now() - startTime
      console.log(`üéâ SEED ENGINE: World ${worldId} initialized in ${result.totalTime}ms`)
      
      return result

    } catch (error) {
      console.error(`‚ùå SEED ENGINE ERROR: Failed to seed world ${worldId}:`, error)
      throw error
    }
  }

  /**
   * @description Bulk —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  private async bulkCreateUsers(users: WorldUser[], worldId: WorldId): Promise<string[]> {
    const timestamp = Date.now()
    const userRecords = users.map((userData, index) => ({
      id: this.generateUserId(userData.testId, timestamp, index),
      email: userData.email,
      name: userData.name,
      world_id: worldId, // –î–æ–±–∞–≤–ª—è–µ–º world_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∏—Ä–∞–º
    }))

    // –û–¥–Ω–∞ bulk –æ–ø–µ—Ä–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ N –æ—Ç–¥–µ–ª—å–Ω—ã—Ö INSERT
    const insertedUsers = await db.insert(user).values(userRecords).returning({ id: user.id })
    
    return insertedUsers.map(u => u.id)
  }

  /**
   * @description Bulk —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤
   */
  private async bulkCreateArtifacts(
    artifacts: WorldArtifact[], 
    worldId: WorldId, 
    users: WorldUser[]
  ): Promise<string[]> {
    const timestamp = Date.now()
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentPromises = artifacts.map(async (artifactData, index) => {
      const content = artifactData.contentPath 
        ? await this.loadFixtureContent(worldId, artifactData.contentPath)
        : null

      return {
        id: this.generateArtifactId(artifactData.testId, timestamp, index),
        title: artifactData.title,
        kind: artifactData.kind,
        userId: this.findUserDbId(artifactData.ownerId, users, timestamp),
        authorId: this.findUserDbId(artifactData.ownerId, users, timestamp), // –ê–≤—Ç–æ—Ä = –≤–ª–∞–¥–µ–ª–µ—Ü
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º sparse columns –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        content_text: this.getTextContent(artifactData.kind, content),
        content_url: this.getUrlContent(artifactData.kind, content),
        content_site_definition: this.getSiteContent(artifactData.kind, content),
        summary: `Test fixture: ${artifactData.title}`, // Placeholder summary –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        publication_state: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        deletedAt: null,
        createdAt: new Date(),
        world_id: worldId, // –î–æ–±–∞–≤–ª—è–µ–º world_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∏—Ä–∞–º
      }
    })

    const artifactRecords = await Promise.all(contentPromises)
    
    // –û–¥–Ω–∞ bulk –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const insertedArtifacts = await db.insert(artifact).values(artifactRecords).returning({ id: artifact.id })
    
    return insertedArtifacts.map(a => a.id)
  }

  /**
   * @description Bulk —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
   */
  private async bulkCreateChats(
    chats: WorldChat[], 
    worldId: WorldId, 
    users: WorldUser[]
  ): Promise<string[]> {
    const timestamp = Date.now()
    
    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã bulk –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    const chatRecords = chats.map((chatData, index) => ({
      id: this.generateChatId(chatData.testId, timestamp, index),
      title: chatData.title,
      userId: this.findUserDbId(chatData.ownerId, users, timestamp),
      createdAt: new Date(),
      published_until: chatData.publishedUntil ? new Date(chatData.publishedUntil) : null,
      world_id: worldId, // –î–æ–±–∞–≤–ª—è–µ–º world_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∏—Ä–∞–º
    }))

    const insertedChats = await db.insert(chat).values(chatRecords).returning({ id: chat.id })
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –∏—Ö bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    for (let i = 0; i < chats.length; i++) {
      const chatData = chats[i]
      const chatDbId = insertedChats[i].id
      
      if (chatData.messagesPath) {
        await this.bulkCreateMessages(chatDbId, worldId, chatData.messagesPath)
      }
    }
    
    return insertedChats.map(c => c.id)
  }

  /**
   * @description Bulk —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
   */
  private async bulkCreateMessages(chatId: string, worldId: WorldId, messagesPath: string): Promise<void> {
    try {
      const messagesData = await this.loadFixtureContent(worldId, messagesPath)
      const chatHistory = JSON.parse(messagesData)
      
      if (chatHistory.messages && Array.isArray(chatHistory.messages)) {
        const messageRecords = chatHistory.messages.map((msg: any) => {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç AI SDK Message_v2
          const parts = []
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å content
          if (msg.content) {
            parts.push({ type: 'text', text: msg.content })
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º tool invocations –∫–∞–∫ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–∞–∫ attachments!)
          if (msg.toolInvocations && Array.isArray(msg.toolInvocations)) {
            msg.toolInvocations.forEach((toolInvocation: any) => {
              parts.push({
                type: 'tool-invocation',
                toolInvocation: toolInvocation
              })
            })
          }
          
          return {
            id: `msg-${Date.now()}-${Math.random().toString(36).slice(2)}`,
            chatId,
            role: msg.role,
            parts: parts, // –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è (text + tool-invocations)
            attachments: msg.attachments || [], // –§–∞–π–ª–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            createdAt: new Date(msg.timestamp || Date.now()),
            world_id: worldId, // –î–æ–±–∞–≤–ª—è–µ–º world_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∏—Ä–∞–º
          }
        })

        await db.insert(message).values(messageRecords)
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Could not load messages for chat ${chatId}:`, error)
    }
  }

  /**
   * @description –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–∏—Ä–∞ —Å –ø–æ–º–æ—â—å—é bulk DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async cleanupWorld(worldId: WorldId): Promise<void> {
    console.log(`üßπ SEED ENGINE: Cleaning up world ${worldId}...`)
    
    try {
      // –£–¥–∞–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è FK constraints
      // 1. –°–æ–æ–±—â–µ–Ω–∏—è
      await db.delete(message).where(eq(message.world_id, worldId))
      // 2. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      await db.delete(suggestion).where(eq(suggestion.world_id, worldId))
      // 3. –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
      await db.delete(artifact).where(eq(artifact.world_id, worldId))
      // 4. –ß–∞—Ç—ã
      await db.delete(chat).where(eq(chat.world_id, worldId))
      // 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      await db.delete(user).where(eq(user.world_id, worldId))
      
      console.log(`‚úÖ SEED ENGINE: World ${worldId} cleaned up successfully`)
      
    } catch (error) {
      console.error(`‚ùå SEED ENGINE: Failed to cleanup world ${worldId}:`, error)
      throw error
    }
  }

  /**
   * @description –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ fixture —Ñ–∞–π–ª–∞
   */
  private async loadFixtureContent(worldId: WorldId, contentPath: string): Promise<string> {
    const worldDir = worldId.toLowerCase().replace(/_/g, '-').replace('content-library-base', 'library')
    const fullPath = join(this.fixturesPath, worldDir, contentPath)
    
    try {
      return await readFile(fullPath, 'utf-8')
    } catch (error) {
      console.warn(`‚ö†Ô∏è Could not load fixture ${fullPath}:`, error)
      return `[FIXTURE_MISSING: ${contentPath}]`
    }
  }

  /**
   * @description –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private generateUserId(testId: string, timestamp: number, index: number): string {
    // UUID —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
    const hex = (timestamp + index).toString(16).padStart(12, '0')
    return `550e8400-e29b-41d4-a716-${hex}`
  }

  private generateArtifactId(testId: string, timestamp: number, index: number): string {
    const hex = (timestamp + index + 1000).toString(16).padStart(12, '0')
    return `660e8400-e29b-41d4-a716-${hex}`
  }

  private generateChatId(testId: string, timestamp: number, index: number): string {
    const hex = (timestamp + index + 2000).toString(16).padStart(12, '0')
    return `770e8400-e29b-41d4-a716-${hex}`
  }

  /**
   * @description –ü–æ–∏—Å–∫ DB ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ testId
   */
  private findUserDbId(ownerTestId: string, users: WorldUser[], timestamp: number): string {
    const userIndex = users.findIndex(u => u.testId === ownerTestId)
    if (userIndex === -1) {
      throw new Error(`User with testId ${ownerTestId} not found in world definition`)
    }
    return this.generateUserId(ownerTestId, timestamp, userIndex)
  }

  /**
   * @description –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è sparse columns –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
   */
  private getTextContent(kind: string, content: string | null): string | null {
    return ['text', 'code', 'sheet'].includes(kind) ? content : null
  }

  private getUrlContent(kind: string, content: string | null): string | null {
    return kind === 'image' ? content : null
  }

  private getSiteContent(kind: string, content: string | null): any | null {
    if (kind === 'site' && content) {
      try {
        return JSON.parse(content)
      } catch {
        return null
      }
    }
    return null
  }
}

/**
 * @description –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä seed engine
 */
export const seedEngine = new SeedEngine()

/**
 * @description Utility —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏—Ä–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
 */
export async function quickSeedWorld(worldId: WorldId): Promise<SeedResult> {
  return await seedEngine.seedWorld(worldId)
}

/**
 * @description Utility —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏ –º–∏—Ä–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
 */
export async function quickCleanupWorld(worldId: WorldId): Promise<void> {
  return await seedEngine.cleanupWorld(worldId)
}

// END OF: tests/helpers/seed-engine.ts
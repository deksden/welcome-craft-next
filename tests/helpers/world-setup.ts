/**
 * @file tests/helpers/world-setup.ts
 * @description –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏—Ä–æ–≤
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ë–î (Phase 1)
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Phase 1 –±–µ–∑ world_id –≤ –ë–î
 */

import { readFile } from 'fs/promises'
import { join } from 'path'
import type { WorldId, WorldDefinition, WorldUser, WorldArtifact, WorldChat } from './worlds.config'
import { getWorldDefinition, validateWorld } from './worlds.config'

/**
 * @description –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏—Ä–∞
 */
export interface WorldSetupResult {
  worldId: WorldId
  users: SetupUser[]
  artifacts: SetupArtifact[]
  chats: SetupChat[]
  cleanup: () => Promise<void>
}

/**
 * @description –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–∏—Ä–µ
 */
export interface SetupUser {
  testId: string
  name: string
  email: string
  role: string
  /** –†–µ–∞–ª—å–Ω—ã–π UUID –∏–∑ –ë–î (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω) */
  dbId?: string
}

/**
 * @description –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–∏—Ä–µ
 */
export interface SetupArtifact {
  testId: string
  title: string
  kind: string
  ownerId: string
  /** –†–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ë–î (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω) */
  dbId?: string
  /** –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */
  content?: string
}

/**
 * @description –°–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–∏—Ä–µ
 */
export interface SetupChat {
  testId: string
  title: string
  ownerId: string
  /** –†–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ë–î (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω) */
  dbId?: string
}

/**
 * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–∏—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è E2E —Ç–µ—Å—Ç–æ–≤
 * 
 * @feature Phase 1 implementation - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ë–î
 * @param worldId - ID –º–∏—Ä–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π –æ—á–∏—Å—Ç–∫–∏
 */
export async function setupWorld(worldId: WorldId): Promise<WorldSetupResult> {
  console.log(`üåç Setting up world: ${worldId}`)
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏—Ä–∞
  validateWorld(worldId)
  const worldDef = getWorldDefinition(worldId)
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const users = await setupUsers(worldDef.users)
  const artifacts = await setupArtifacts(worldDef.artifacts, users)
  const chats = await setupChats(worldDef.chats, users)
  
  console.log(`‚úÖ World ${worldId} setup complete:`, {
    users: users.length,
    artifacts: artifacts.length,
    chats: chats.length
  })
  
  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
  const cleanup = async () => {
    if (worldDef.settings.autoCleanup) {
      await cleanupWorld(worldId, { users, artifacts, chats })
    }
  }
  
  return {
    worldId,
    users,
    artifacts,
    chats,
    cleanup
  }
}

/**
 * @description –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞
 * 
 * @feature Phase 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î —Å world_id –∏–∑–æ–ª—è—Ü–∏–µ–π
 */
async function setupUsers(userDefs: WorldUser[]): Promise<SetupUser[]> {
  const users: SetupUser[] = []
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DB —É—Ç–∏–ª–∏—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è server-only –æ—à–∏–±–æ–∫
  const { createWorldUser } = await import('@/lib/db/world-queries')
  const { getCurrentWorldContext } = await import('@/lib/db/world-context')
  
  const worldContext = getCurrentWorldContext()
  
  for (const userDef of userDefs) {
    let dbId: string | undefined
    
    try {
      // Phase 2: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å world_id
      const dbUser = await createWorldUser({
        email: userDef.email,
        password: 'test-password' // –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      }, worldContext)
      
      dbId = dbUser.id
      console.log(`üë§ User created in DB: ${userDef.name} (${userDef.testId}) -> ${dbId}`)
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Failed to create user ${userDef.testId} in DB:`, error)
      // Fallback to Phase 1 behavior
    }
    
    const user: SetupUser = {
      testId: userDef.testId,
      name: userDef.name,
      email: userDef.email,
      role: userDef.role,
      dbId // –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DB ID
    }
    
    users.push(user)
  }
  
  return users
}

/**
 * @description –°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞
 * 
 * @feature Phase 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –ë–î —Å world_id –∏–∑–æ–ª—è—Ü–∏–µ–π
 */
async function setupArtifacts(
  artifactDefs: WorldArtifact[], 
  users: SetupUser[]
): Promise<SetupArtifact[]> {
  const artifacts: SetupArtifact[] = []
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DB —É—Ç–∏–ª–∏—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  const { createWorldArtifact } = await import('@/lib/db/world-queries')
  const { getCurrentWorldContext } = await import('@/lib/db/world-context')
  
  const worldContext = getCurrentWorldContext()
  
  for (const artifactDef of artifactDefs) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const owner = users.find(u => u.testId === artifactDef.ownerId)
    if (!owner) {
      throw new Error(`Artifact ${artifactDef.testId} owner ${artifactDef.ownerId} not found`)
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ fixture —Ñ–∞–π–ª–∞
    let content: string | undefined
    if (artifactDef.contentPath) {
      try {
        const fixturePath = join(
          process.cwd(), 
          'tests/fixtures/worlds', 
          artifactDef.contentPath
        )
        content = await readFile(fixturePath, 'utf-8')
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Could not load fixture: ${artifactDef.contentPath}`)
        content = createPlaceholderContent(artifactDef)
      }
    } else {
      content = createPlaceholderContent(artifactDef)
    }
    
    let dbId: string | undefined
    
    try {
      // Phase 2: –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –ë–î —Å world_id
      const artifactData = {
        title: artifactDef.title,
        kind: artifactDef.kind as any,
        userId: owner.dbId!, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DB ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
        summary: `Test artifact: ${artifactDef.title}`,
        createdAt: new Date(),
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        ...(artifactDef.kind === 'site' 
          ? { content_site_definition: JSON.parse(content || '{}') }
          : { content_text: content }
        )
      }
      
      const dbArtifact = await createWorldArtifact(artifactData, worldContext)
      dbId = dbArtifact.id
      
      console.log(`üìÑ Artifact created in DB: ${artifactDef.title} (${artifactDef.testId}) -> ${dbId}`)
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Failed to create artifact ${artifactDef.testId} in DB:`, error)
      // Fallback to Phase 1 behavior
    }
    
    const artifact: SetupArtifact = {
      testId: artifactDef.testId,
      title: artifactDef.title,
      kind: artifactDef.kind,
      ownerId: artifactDef.ownerId,
      content,
      dbId // –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DB ID
    }
    
    artifacts.push(artifact)
  }
  
  return artifacts
}

/**
 * @description –°–æ–∑–¥–∞–µ—Ç —á–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞
 */
async function setupChats(
  chatDefs: WorldChat[], 
  users: SetupUser[]
): Promise<SetupChat[]> {
  const chats: SetupChat[] = []
  
  for (const chatDef of chatDefs) {
    const owner = users.find(u => u.testId === chatDef.ownerId)
    if (!owner) {
      throw new Error(`Chat ${chatDef.testId} owner ${chatDef.ownerId} not found`)
    }
    
    const chat: SetupChat = {
      testId: chatDef.testId,
      title: chatDef.title,
      ownerId: chatDef.ownerId
      // dbId: –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Phase 2
    }
    
    chats.push(chat)
    console.log(`üí¨ Chat prepared: ${chat.title} (${chat.testId})`)
  }
  
  return chats
}

/**
 * @description –°–æ–∑–¥–∞–µ—Ç placeholder –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –±–µ–∑ fixture —Ñ–∞–π–ª–æ–≤
 */
function createPlaceholderContent(artifactDef: WorldArtifact): string {
  switch (artifactDef.kind) {
    case 'text':
      return `# ${artifactDef.title}\n\nThis is a placeholder content for testing purposes.\n\nTags: ${artifactDef.tags?.join(', ') || 'none'}`
    
    case 'code':
      return `// ${artifactDef.title}\n// Placeholder code for testing\n\nfunction placeholder() {\n  return 'test content';\n}`
    
    case 'sheet':
      return `Name,Email,Role\nTest User,test@example.com,Test Role\nPlaceholder,placeholder@example.com,Placeholder`
    
    case 'site':
      return JSON.stringify({
        blocks: [
          {
            type: 'hero',
            slots: {
              title: { content: artifactDef.title },
              subtitle: { content: 'Placeholder site for testing' }
            }
          }
        ]
      }, null, 2)
    
    default:
      return `Placeholder content for ${artifactDef.kind} artifact: ${artifactDef.title}`
  }
}

/**
 * @description –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–∏—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
 * 
 * @feature Phase 2: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –ø–æ world_id
 */
export async function cleanupWorld(
  worldId: WorldId, 
  setupResult: Omit<WorldSetupResult, 'worldId' | 'cleanup'>
): Promise<void> {
  console.log(`üßπ Cleaning up world: ${worldId}`)
  
  const worldDef = getWorldDefinition(worldId)
  
  if (!worldDef.settings.autoCleanup) {
    console.log(`‚è∏Ô∏è  Auto-cleanup disabled for world ${worldId}`)
    return
  }
  
  try {
    // Phase 2: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    const { cleanupWorldData } = await import('@/lib/db/world-queries')
    const cleanupStats = await cleanupWorldData(worldId)
    
    console.log(`‚úÖ World ${worldId} cleanup complete:`, cleanupStats)
  } catch (error) {
    console.warn(`‚ö†Ô∏è  World ${worldId} cleanup failed:`, error)
    
    // Fallback: Phase 1 –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log(`üìä World ${worldId} local cleanup:`, {
      usersRemoved: setupResult.users.length,
      artifactsRemoved: setupResult.artifacts.length,
      chatsRemoved: setupResult.chats.length
    })
  }
}

/**
 * @description –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∏—Ä–∞
 * 
 * @feature –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –º–∏—Ä–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
 */
export function getWorldData(worldId: WorldId) {
  const worldDef = getWorldDefinition(worldId)
  
  return {
    definition: worldDef,
    getUser: (testId: string) => worldDef.users.find(u => u.testId === testId),
    getArtifact: (testId: string) => worldDef.artifacts.find(a => a.testId === testId),
    getChat: (testId: string) => worldDef.chats.find(c => c.testId === testId),
    getUserByRole: (role: string) => worldDef.users.find(u => u.role === role)
  }
}

/**
 * @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–∏—Ä–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–µ—Å—Ç–æ–≤
 */
export async function verifyWorldSetup(setupResult: WorldSetupResult): Promise<boolean> {
  const { worldId, users, artifacts } = setupResult
  
  console.log(`üîç Verifying world setup: ${worldId}`)
  
  // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (users.length === 0) {
    throw new Error(`World ${worldId} has no users`)
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ testId
  const userIds = users.map(u => u.testId)
  if (new Set(userIds).size !== userIds.length) {
    throw new Error(`World ${worldId} has duplicate user testIds`)
  }
  
  console.log(`‚úÖ World ${worldId} verification passed`)
  return true
}

// END OF: tests/helpers/world-setup.ts
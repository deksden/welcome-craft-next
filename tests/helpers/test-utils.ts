/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ WelcomeCraft
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import type { Page, Locator } from '@playwright/test';
import { getAIResponse, type MockAIResponse } from './ai-mock';
import { getTestHeaders, } from './test-config';

export class TestUtils {
  constructor(public page: Page) {}

  /**
   * –ù–∞–¥–µ–∂–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async waitForElement(selector: string, options?: {
    timeout?: number;
    retries?: number;
    state?: 'attached' | 'detached' | 'visible' | 'hidden';
  }): Promise<Locator> {
    const { timeout = 30000, retries = 3, state = 'visible' } = options || {};
    
    for (let i = 0; i < retries; i++) {
      try {
        const element = this.page.locator(`[data-testid="${selector}"]`);
        await element.waitFor({ state, timeout: timeout / retries });
        return element;
      } catch (error) {
        if (i === retries - 1) throw error;
        await this.page.waitForTimeout(1000);
      }
    }
    
    throw new Error(`Element ${selector} not found after ${retries} retries`);
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async waitForAIGeneration(options?: { timeout?: number }): Promise<void> {
    const { timeout = 60000 } = options || {};
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    try {
      await this.page.locator('[data-testid*="loading"], [data-testid*="generating"]')
        .first()
        .waitFor({ state: 'visible', timeout: 5000 });
    } catch {
      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–µ –ø–æ—è–≤–∏—Ç—å—Å—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    }

    // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
    await this.page.locator('[data-testid*="loading"], [data-testid*="generating"]')
      .waitFor({ state: 'detached', timeout });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å DOM
    await this.page.waitForTimeout(500);
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  async sendMessage(message: string, options?: { waitForResponse?: boolean }): Promise<void> {
    const { waitForResponse = true } = options || {};
    
    console.log('üî§ Sending message:', message);
    
    // –ù–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const input = this.page.getByTestId('chat-input');
    await input.click();
    await input.fill(message);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω
    const inputValue = await input.inputValue();
    console.log('üìù Input value after fill:', inputValue);
    
    if (inputValue !== message) {
      console.log('‚ö†Ô∏è Input value mismatch, retrying...');
      await this.page.waitForTimeout(500);
      await input.clear();
      await input.fill(message);
    }
    
    // –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
    const sendButton = await this.waitForElement('send-button');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ disabled
    const isDisabled = await sendButton.getAttribute('disabled');
    console.log('üîò Send button disabled status:', isDisabled);
    
    if (isDisabled !== null) {
      console.log('‚ùå Send button is disabled, debugging conditions...');
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      const debugInfo = await this.page.evaluate(() => {
        const input = document.querySelector('[data-testid="chat-input"]') as HTMLInputElement;
        const btn = document.querySelector('[data-testid="send-button"]') as HTMLButtonElement;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ React DevTools –∏–ª–∏ window –æ–±—ä–µ–∫—Ç—ã
        const chatStatus = (window as any).__CHAT_STATUS__ || 'unknown';
        
        return {
          inputLength: input?.value?.length || 0,
          inputValue: input?.value || 'EMPTY',
          buttonDisabled: btn?.disabled || false,
          uploadingFiles: document.querySelectorAll('[data-testid="attachments-preview"]').length,
          chatStatus: chatStatus,
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º presence —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ loading
          hasLoadingIndicators: document.querySelectorAll('[data-testid*="loading"], [data-testid*="generating"]').length,
        };
      });
      
      console.log('üêõ Debug info:', debugInfo);
      
      // –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å input, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
      if (debugInfo.inputLength === 0) {
        console.log('‚ö†Ô∏è Input is empty, refilling...');
        await input.clear();
        await this.page.waitForTimeout(500);
        await input.fill(message);
        
        const newValue = await input.inputValue();
        console.log('üìù New input value:', newValue);
      }
      
      // –ñ–¥–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏
      try {
        await this.page.waitForFunction(
          () => {
            const btn = document.querySelector('[data-testid="send-button"]') as HTMLButtonElement;
            return btn && !btn.disabled;
          },
          { timeout: 5000 }
        );
      } catch (error) {
        console.log('‚ö†Ô∏è Button still disabled after timeout, trying force click...');
        // Force click –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ –≤ UI
        await sendButton.click({ force: true });
        console.log('‚úÖ Forced click sent');
        
        if (waitForResponse) {
          await this.waitForAIGeneration();
        }
        return;
      }
    }
    
    console.log('‚úÖ Clicking send button...');
    await sendButton.click();
    
    if (waitForResponse) {
      await this.waitForAIGeneration();
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
   */
  async waitForArtifact(options?: { timeout?: number }): Promise<Locator> {
    const { timeout = 30000 } = options || {};
    
    const artifact = await this.waitForElement('artifact', { timeout });
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    await this.page.waitForTimeout(1000);
    
    return artifact;
  }

  /**
   * –°–∫—Ä–æ–ª–ª –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
   */
  async scrollToElement(selector: string): Promise<void> {
    const element = await this.waitForElement(selector);
    await element.scrollIntoViewIfNeeded();
    await this.page.waitForTimeout(300);
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async waitForUrlChange(expectedPattern: RegExp, options?: { timeout?: number }): Promise<void> {
    const { timeout = 15000 } = options || {};
    
    await this.page.waitForFunction(
      (pattern) => new RegExp(pattern).test(window.location.href),
      expectedPattern.source,
      { timeout }
    );
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
   */
  async cleanupTestData(): Promise<void> {
    // –û—á–∏—Å—Ç–∫–∞ localStorage (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç SecurityError)
    try {
      await this.page.evaluate(() => {
        if (typeof Storage !== 'undefined') {
          localStorage.clear();
          sessionStorage.clear();
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ localStorage –≤ about:blank –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
      console.log('Skipping localStorage cleanup due to security restrictions');
    }
    
    // –û—á–∏—Å—Ç–∫–∞ cookies —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–∞–º–∏
    const cookies = await this.page.context().cookies();
    const testCookies = cookies.filter(cookie => 
      cookie.name.includes('test') || cookie.name.includes('mock')
    );
    
    if (testCookies.length > 0) {
      await this.page.context().clearCookies(...testCookies);
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DOM –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  async waitForDOMStability(options?: { timeout?: number; checks?: number }): Promise<void> {
    const { timeout = 5000, checks = 3 } = options || {};
    
    let stableCount = 0;
    let lastHTML = '';
    
    const startTime = Date.now();
    
    while (stableCount < checks && (Date.now() - startTime) < timeout) {
      const currentHTML = await this.page.innerHTML('body');
      
      if (currentHTML === lastHTML) {
        stableCount++;
      } else {
        stableCount = 0;
        lastHTML = currentHTML;
      }
      
      await this.page.waitForTimeout(200);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (a11y) —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  async checkElementAccessibility(selector: string): Promise<boolean> {
    const element = await this.waitForElement(selector);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö a11y –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    const checks = await Promise.all([
      element.getAttribute('aria-label'),
      element.getAttribute('role'),
      element.getAttribute('tabindex'),
      element.isVisible(),
      element.isEnabled()
    ]);
    
    const [ariaLabel, role, tabindex, isVisible, isEnabled] = checks;
    
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    return !!(
      (ariaLabel || role) && 
      isVisible && 
      (tabindex === null || Number.parseInt(tabindex) >= -1) &&
      isEnabled
    );
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  async takeDebugScreenshot(name: string): Promise<void> {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    await this.page.screenshot({ 
      path: `tests/screenshots/debug-${name}-${timestamp}.png`,
      fullPage: true 
    });
  }

  /**
   * –≠–º—É–ª—è—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è loading —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  async simulateSlowNetwork(): Promise<void> {
    await this.page.route('**/*', route => {
      setTimeout(() => route.continue(), 1000);
    });
  }

  /**
   * –°–±—Ä–æ—Å network —ç–º—É–ª—è—Ü–∏–∏
   */
  async resetNetwork(): Promise<void> {
    await this.page.unroute('**/*');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
   */
  async registerUser(email: string, password: string) {
    console.log('üîê Starting user registration...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL - Playwright –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç baseURL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('üåê Navigating to: /register (using baseURL from config)');
    await this.page.goto('/register');
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await this.page.fill('[data-testid="auth-email-input"]', email);
    await this.page.fill('[data-testid="auth-password-input"]', password);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
    console.log('üìù Submitting registration form...');
    await this.page.click('[data-testid="auth-submit-button"]');
    
    // –ñ–¥–∞—Ç—å success toast - –∏—â–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ sonner
    console.log('‚è≥ Waiting for success toast...');
    try {
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ª—é–±–æ–≥–æ toast
      await this.page.waitForSelector('[data-testid="toast"], [data-sonner-toast]', { timeout: 10000 });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç toast
      const toastElement = await this.page.locator('[data-testid="toast"], [data-sonner-toast]').first();
      const toastText = await toastElement.textContent();
      
      console.log('üîç Toast text:', toastText);
      if (toastText?.includes('Account created successfully') || toastText?.includes('created')) {
        console.log('‚úÖ Registration success toast received');
      } else if (toastText?.includes('already exists') || toastText?.includes('exists')) {
        console.log('‚ö†Ô∏è User already exists - proceeding with login...');
      } else {
        console.log('‚ùå Unexpected toast message:', toastText);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è No toast appeared, checking if registration succeeded anyway...');
    }
    
    // –í —Ç–µ—Å—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º session —á–µ—Ä–µ–∑ API
    console.log('üîÑ Setting auth session via API for reliability...');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ session
      await this.setAuthSession(email);
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è auth session
      await this.waitForAuthSession();
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω–∫–∏
      console.log('üè† Navigating to admin dashboard...');
      await this.page.goto('/');
      
      // –ñ–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ chat interface
      console.log('‚è≥ Waiting for chat interface to load...');
      await this.page.waitForSelector('[data-testid="chat-input"]', { timeout: 10000 });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ (send button –Ω–µ disabled)
      console.log('‚è≥ Waiting for chat to be ready...');
      try {
        await this.page.waitForFunction(
          () => {
            const btn = document.querySelector('[data-testid="send-button"]') as HTMLButtonElement;
            const input = document.querySelector('[data-testid="chat-input"]') as HTMLInputElement;
            
            // –ö–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å disabled –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ input
            if (input && input.value.length > 0) {
              return btn && !btn.disabled;
            }
            
            // –ï—Å–ª–∏ input –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ status –≥–æ—Ç–æ–≤
            return btn && btn.getAttribute('disabled') === null;
          },
          { timeout: 5000 }
        );
      } catch (error) {
        console.log('‚ö†Ô∏è Chat readiness timeout, proceeding anyway...');
      }
      
      console.log('‚úÖ User registered and authenticated successfully via API');
    } catch (error) {
      console.log('‚ö†Ô∏è API auth failed, falling back to redirect approach...');
      
      // Fallback: –∂–¥–∞—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      console.log('‚è≥ Waiting for redirect to main page...');
      
      // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL - –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ app.localhost –Ω–æ –Ω–µ –Ω–∞ /register
      try {
        await this.page.waitForFunction(
          () => !window.location.href.includes('/register') && !window.location.href.includes('/login'),
          { timeout: 15000 }
        );
        console.log('‚úÖ Redirected successfully');
      } catch (redirectError) {
        console.log('‚ùå Redirect timeout, checking current page...');
        const currentUrl = this.page.url();
        console.log('üîç Current URL:', currentUrl);
        
        // –ï—Å–ª–∏ –º—ã –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ª–æ–≥–∏–Ω–∞, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
        if (currentUrl.includes('/register') || currentUrl.includes('/login')) {
          throw new Error(`Still on auth page: ${currentUrl}`);
        }
      }
      
      // –ñ–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ chat interface
      console.log('‚è≥ Waiting for chat interface to load...');
      await this.page.waitForSelector('[data-testid="chat-input"]', { timeout: 10000 });
      
      console.log('‚úÖ User registered via fallback method');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –º–æ–∫–∞–º–∏
   */
  async setupAIMocks() {
    console.log('ü§ñ Setting up AI mocks...');
    
    await this.page.route('**/api/chat', async (route) => {
      const request = route.request();
      const postData = request.postData();
      
      if (!postData) {
        await route.continue();
        return;
      }
      
      try {
        const body = JSON.parse(postData);
        const messages = body.messages || [];
        const lastUserMessage = messages.filter((msg: any) => msg.role === 'user').pop();
        
        if (!lastUserMessage) {
          await route.continue();
          return;
        }
        
        console.log('üîç AI Mock intercepting message:', lastUserMessage.content);
        const mockResponse = getAIResponse(lastUserMessage.content);
        console.log('üé≠ AI Mock responding with:', mockResponse.content);
        
        // –°–æ–∑–¥–∞–µ–º streaming response –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π API
        const mockStreamResponse = this.createMockStreamResponseV4(mockResponse);
        
        await route.fulfill({
          status: 200,
          headers: {
            'Content-Type': 'text/plain; charset=utf-8',
            'Cache-Control': 'no-cache, no-transform',
            'Connection': 'keep-alive',
          },
          body: mockStreamResponse
        });
      } catch (error) {
        console.log('‚ùå AI Mock error:', error);
        await route.continue();
      }
    });
    
    console.log('‚úÖ AI mocks setup complete');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç mock streaming response –≤ —Ñ–æ—Ä–º–∞—Ç–µ AI SDK
   */
  private createMockStreamResponse(mockResponse: MockAIResponse): string {
    const response = {
      id: `mock-${Date.now()}`,
      content: mockResponse.content,
      role: 'assistant'
    };
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º streaming format
    const chunks = [
      `0:"${JSON.stringify(response).replace(/"/g, '\\"')}"\n`,
      'e:\n'
    ];
    
    return chunks.join('');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç mock streaming response –≤ —Ñ–æ—Ä–º–∞—Ç–µ AI SDK v4
   */
  private createMockStreamResponseV4(mockResponse: MockAIResponse): string {
    const messageId = `msg-${Date.now()}`;
    
    // –§–æ—Ä–º–∞—Ç AI SDK v4 streaming response
    const chunks = [
      // –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      `0:{"type":"message","id":"${messageId}","role":"assistant","content":"","createdAt":"${new Date().toISOString()}"}\n`,
      
      // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–µ–ª—å—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      ...mockResponse.content.split(' ').map((word, index) => 
        `1:{"type":"text-delta","textDelta":"${index > 0 ? ' ' : ''}${word}"}\n`
      ),
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º tool call –∏ result
      ...(mockResponse.hasArtifact ? [
        `2:{"type":"tool-call","id":"call-${Date.now()}","name":"artifactCreate","args":{"type":"${mockResponse.artifactType || 'text'}","content":"${mockResponse.artifactContent || mockResponse.content}","title":"Test Artifact"}}\n`,
        `3:{"type":"tool-result","id":"call-${Date.now()}","result":{"success":true,"artifactId":"artifact-${Date.now()}","artifactType":"${mockResponse.artifactType || 'text'}"}}\n`
      ] : []),
      
      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      'e:\n'
    ];
    
    return chunks.join('');
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async disableAIMocks() {
    await this.page.unroute('**/api/chat');
  }

  /**
   * –ù–∞–¥–µ–∂–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ auth session —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
   * –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å cookie domain –≤ —Ç–µ—Å—Ç–∞—Ö
   */
  async setAuthSession(email: string, userId?: string) {
    console.log('üîê Setting auth session via API...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è session
    const response = await this.page.request.post('/api/test/auth-signin', {
      data: {
        email,
        userId: userId || `test-${Date.now()}`,
        userType: 'regular'
      },
      headers: getTestHeaders()
    });

    if (!response.ok()) {
      throw new Error(`Failed to set auth session: ${response.status()}`);
    }

    const responseData = await response.json();
    console.log('‚úÖ Auth session API response:', responseData);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º cookies –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const setCookieHeaders = response.headers()['set-cookie'];
    console.log('üç™ Set-Cookie headers:', setCookieHeaders);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ cookies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ browser context
    if (setCookieHeaders) {
      console.log('üîÑ Cookies should be automatically set by Playwright request API');
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã cookies –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    await this.page.waitForTimeout(500);
    
    console.log('‚úÖ Auth session set successfully');
    
    return response;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
   */
  async checkAuthStatus(): Promise<{ authenticated: boolean; user?: any }> {
    console.log('üîç Checking auth status...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ cookies —É –Ω–∞—Å –µ—Å—Ç—å
    const cookies = await this.page.context().cookies();
    const testSessionCookie = cookies.find(c => c.name === 'test-session');
    console.log('üç™ Current cookies:', cookies.map(c => ({ name: c.name, domain: c.domain, path: c.path })));
    console.log('üîç Test session cookie:', testSessionCookie ? 'EXISTS' : 'NOT FOUND');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç test-session cookies
    const response = await this.page.request.get('/api/test/session', {
      headers: getTestHeaders()
    });

    console.log(`üì° Auth status response: ${response.status()}`);

    if (!response.ok()) {
      console.log('‚ùå Auth status request failed');
      return { authenticated: false };
    }

    const session = await response.json();
    console.log('üìã Session data received:', session);
    
    return {
      authenticated: !!session?.user,
      user: session?.user
    };
  }

  /**
   * –ñ–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ auth session —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async waitForAuthSession(options?: { timeout?: number; retries?: number }) {
    const { timeout = 10000, retries = 5 } = options || {};
    
    for (let i = 0; i < retries; i++) {
      const status = await this.checkAuthStatus();
      
      if (status.authenticated) {
        console.log('‚úÖ Auth session confirmed');
        return status.user;
      }
      
      console.log(`‚è≥ Auth session not ready, retry ${i + 1}/${retries}...`);
      await this.page.waitForTimeout(timeout / retries);
    }
    
    throw new Error('Auth session not established after retries');
  }
}
/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ WelcomeCraft
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { Page, Locator } from '@playwright/test';

export class TestUtils {
  constructor(private page: Page) {}

  /**
   * –ù–∞–¥–µ–∂–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async waitForElement(selector: string, options?: {
    timeout?: number;
    retries?: number;
    state?: 'attached' | 'detached' | 'visible' | 'hidden';
  }): Promise<Locator> {
    const { timeout = 30000, retries = 3, state = 'visible' } = options || {};
    
    for (let i = 0; i < retries; i++) {
      try {
        const element = this.page.locator(`[data-testid="${selector}"]`);
        await element.waitFor({ state, timeout: timeout / retries });
        return element;
      } catch (error) {
        if (i === retries - 1) throw error;
        await this.page.waitForTimeout(1000);
      }
    }
    
    throw new Error(`Element ${selector} not found after ${retries} retries`);
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async waitForAIGeneration(options?: { timeout?: number }): Promise<void> {
    const { timeout = 60000 } = options || {};
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    try {
      await this.page.locator('[data-testid*="loading"], [data-testid*="generating"]')
        .first()
        .waitFor({ state: 'visible', timeout: 5000 });
    } catch {
      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–µ –ø–æ—è–≤–∏—Ç—å—Å—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    }

    // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
    await this.page.locator('[data-testid*="loading"], [data-testid*="generating"]')
      .waitFor({ state: 'detached', timeout });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å DOM
    await this.page.waitForTimeout(500);
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  async sendMessage(message: string, options?: { waitForResponse?: boolean }): Promise<void> {
    const { waitForResponse = true } = options || {};
    
    // –ù–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const input = this.page.getByTestId('chat-input');
    await input.click();
    await input.fill(message);
    
    // –ù–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendButton = await this.waitForElement('send-button');
    await sendButton.click();
    
    if (waitForResponse) {
      await this.waitForAIGeneration();
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
   */
  async waitForArtifact(options?: { timeout?: number }): Promise<Locator> {
    const { timeout = 30000 } = options || {};
    
    const artifact = await this.waitForElement('artifact', { timeout });
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    await this.page.waitForTimeout(1000);
    
    return artifact;
  }

  /**
   * –°–∫—Ä–æ–ª–ª –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
   */
  async scrollToElement(selector: string): Promise<void> {
    const element = await this.waitForElement(selector);
    await element.scrollIntoViewIfNeeded();
    await this.page.waitForTimeout(300);
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async waitForUrlChange(expectedPattern: RegExp, options?: { timeout?: number }): Promise<void> {
    const { timeout = 15000 } = options || {};
    
    await this.page.waitForFunction(
      (pattern) => new RegExp(pattern).test(window.location.href),
      expectedPattern.source,
      { timeout }
    );
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
   */
  async cleanupTestData(): Promise<void> {
    // –û—á–∏—Å—Ç–∫–∞ localStorage (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç SecurityError)
    try {
      await this.page.evaluate(() => {
        if (typeof Storage !== 'undefined') {
          localStorage.clear();
          sessionStorage.clear();
        }
      });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ localStorage –≤ about:blank –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
      console.log('Skipping localStorage cleanup due to security restrictions');
    }
    
    // –û—á–∏—Å—Ç–∫–∞ cookies —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–∞–º–∏
    const cookies = await this.page.context().cookies();
    const testCookies = cookies.filter(cookie => 
      cookie.name.includes('test') || cookie.name.includes('mock')
    );
    
    if (testCookies.length > 0) {
      await this.page.context().clearCookies(...testCookies);
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DOM –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  async waitForDOMStability(options?: { timeout?: number; checks?: number }): Promise<void> {
    const { timeout = 5000, checks = 3 } = options || {};
    
    let stableCount = 0;
    let lastHTML = '';
    
    const startTime = Date.now();
    
    while (stableCount < checks && (Date.now() - startTime) < timeout) {
      const currentHTML = await this.page.innerHTML('body');
      
      if (currentHTML === lastHTML) {
        stableCount++;
      } else {
        stableCount = 0;
        lastHTML = currentHTML;
      }
      
      await this.page.waitForTimeout(200);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (a11y) —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  async checkElementAccessibility(selector: string): Promise<boolean> {
    const element = await this.waitForElement(selector);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö a11y –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    const checks = await Promise.all([
      element.getAttribute('aria-label'),
      element.getAttribute('role'),
      element.getAttribute('tabindex'),
      element.isVisible(),
      element.isEnabled()
    ]);
    
    const [ariaLabel, role, tabindex, isVisible, isEnabled] = checks;
    
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    return !!(
      (ariaLabel || role) && 
      isVisible && 
      (tabindex === null || parseInt(tabindex) >= -1) &&
      isEnabled
    );
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  async takeDebugScreenshot(name: string): Promise<void> {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    await this.page.screenshot({ 
      path: `tests/screenshots/debug-${name}-${timestamp}.png`,
      fullPage: true 
    });
  }

  /**
   * –≠–º—É–ª—è—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è loading —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  async simulateSlowNetwork(): Promise<void> {
    await this.page.route('**/*', route => {
      setTimeout(() => route.continue(), 1000);
    });
  }

  /**
   * –°–±—Ä–æ—Å network —ç–º—É–ª—è—Ü–∏–∏
   */
  async resetNetwork(): Promise<void> {
    await this.page.unroute('**/*');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
   */
  async registerUser(email: string, password: string) {
    console.log('üîê Starting user registration...');
    await this.page.goto('http://app.localhost:3000/register');
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await this.page.fill('[data-testid="auth-email-input"]', email);
    await this.page.fill('[data-testid="auth-password-input"]', password);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
    console.log('üìù Submitting registration form...');
    await this.page.click('[data-testid="auth-submit-button"]');
    
    // –ñ–¥–∞—Ç—å success toast
    console.log('‚è≥ Waiting for success toast...');
    await this.page.waitForSelector('[data-testid="toast"]', { timeout: 8000 });
    
    const toastText = await this.page.locator('[data-testid="toast"]').first().textContent();
    if (!toastText?.includes('Account created successfully')) {
      throw new Error(`Registration failed: ${toastText}`);
    }
    console.log('‚úÖ Registration success toast received');
    
    // –ñ–¥–∞—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('‚è≥ Waiting for redirect to main page...');
    await this.page.waitForURL('http://app.localhost:3000/', { timeout: 5000 });
    
    // –ñ–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ chat interface
    console.log('‚è≥ Waiting for chat interface to load...');
    await this.page.waitForSelector('[data-testid="chat-input"]', { timeout: 10000 });
    console.log('‚úÖ User registered and chat interface loaded successfully');
  }
}
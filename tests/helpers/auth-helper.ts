/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π Auth Helper –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç test auth —Å–∏—Å—Ç–µ–º—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ –Ω–∞–¥–µ–∂–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

import type { Page } from '@playwright/test';
import { expect } from '@playwright/test';
import { getTestHeaders } from './test-config';

export interface TestUser {
  id: string;
  email: string;
  name?: string;
  type?: 'regular' | 'admin' | 'guest';
}

export function generateTestUser(prefix = 'test'): TestUser {
  const timestamp = Date.now();
  return {
    id: `test-user-${timestamp}`,
    email: `${prefix}-${timestamp}@playwright.com`,
    name: `Test User ${timestamp}`,
    type: 'regular'
  };
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ test auth API
 * –û–±—Ö–æ–¥–∏—Ç Auth.js redirect –ø—Ä–æ–±–ª–µ–º—ã –≤ –º—É–ª—å—Ç–∏-–¥–æ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
 */
export async function setupTestAuth(page: Page, user?: TestUser): Promise<TestUser> {
  const testUser = user || generateTestUser();
  
  console.log('üîê Setting up test auth for:', testUser.email);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º test auth API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è session
  const response = await page.request.post('/api/test/auth-signin', {
    data: {
      email: testUser.email,
      userId: testUser.id,
      userType: testUser.type || 'regular'
    },
    headers: getTestHeaders()
  });

  expect(response.ok()).toBeTruthy();
  
  const responseData = await response.json();
  console.log('‚úÖ Test auth response:', responseData);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ session —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
  await verifyTestAuth(page);
  
  return testUser;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
 */
export async function verifyTestAuth(page: Page): Promise<void> {
  console.log('üîç Verifying test auth...');
  
  const response = await page.request.get('/api/test/session', {
    headers: getTestHeaders()
  });

  expect(response.ok()).toBeTruthy();
  
  const session = await response.json();
  expect(session.user).toBeTruthy();
  expect(session.user.email).toBeTruthy();
  
  console.log('‚úÖ Test auth verified for user:', session.user.email);
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
 */
export async function clearTestAuth(page: Page): Promise<void> {
  console.log('üßπ Clearing test auth...');
  
  // –û—á–∏—â–∞–µ–º test-session cookies
  const cookies = await page.context().cookies();
  const testCookies = cookies.filter(cookie => 
    cookie.name.includes('test-session')
  );
  
  if (testCookies.length > 0) {
    await page.context().clearCookies(...testCookies);
  }
  
  console.log('‚úÖ Test auth cleared');
}

/**
 * –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export async function navigateWithAuth(page: Page, url: string = '/'): Promise<void> {
  console.log(`üß≠ Navigating to ${url} with auth...`);
  
  await page.goto(url);
  
  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ redirect –Ω–∞ login
  await page.waitForLoadState('networkidle');
  
  const currentUrl = page.url();
  if (currentUrl.includes('/login') || currentUrl.includes('/register')) {
    throw new Error(`Unexpected redirect to auth page: ${currentUrl}`);
  }
  
  console.log(`‚úÖ Successfully navigated to ${currentUrl}`);
}

/**
 * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
export async function waitForChatReady(page: Page, timeout = 10000): Promise<void> {
  console.log('‚è≥ Waiting for chat to be ready...');
  
  // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è chat input
  await page.waitForSelector('[data-testid="chat-input"]', { timeout });
  
  // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è send button
  await page.waitForSelector('[data-testid="send-button"]', { timeout });
  
  // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ UI
  await page.waitForTimeout(1000);
  
  console.log('‚úÖ Chat is ready');
}

/**
 * –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: auth + –Ω–∞–≤–∏–≥–∞—Ü–∏—è + –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞
 */
export async function setupTestEnvironment(page: Page, user?: TestUser, url = '/'): Promise<TestUser> {
  const testUser = await setupTestAuth(page, user);
  await navigateWithAuth(page, url);
  await waitForChatReady(page);
  
  console.log('‚úÖ Test environment fully setup');
  return testUser;
}
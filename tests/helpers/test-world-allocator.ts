/**
 * @file tests/helpers/test-world-allocator.ts
 * @description Test World Allocator –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è E2E —Ç–µ—Å—Ç–æ–≤ —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–∏—Ä–∞–º–∏
 * @version 1.0.0
 * @date 2025-07-01
 * @updated –°–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ World Isolation + Parallel E2E Testing Architecture
 */

/** HISTORY:
 * v1.0.0 (2025-07-01): –°–æ–∑–¥–∞–Ω Test World Allocator –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤ –º–µ–∂–¥—É Playwright workers
 */

import { randomUUID } from 'node:crypto'

/**
 * @description –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –º–∏—Ä—É
 */
export interface TestWorldConfig {
  testFile: string
  worldId: string
  seedType: 'basic_user' | 'admin_user' | 'multi_artifact' | 'general'
  timeout: number
  requiresAdmin: boolean
}

/**
 * @description –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ worker –∏ –µ–≥–æ –º–∏—Ä–æ–º
 */
export interface WorkerWorldInfo {
  workerId: string
  worldId: string
  assignedTests: string[]
  isActive: boolean
  createdAt: number
}

/**
 * @description Test World Allocator - —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤ –º–µ–∂–¥—É workers
 */
export class TestWorldAllocator {
  private static instance: TestWorldAllocator
  private workers: Map<string, WorkerWorldInfo> = new Map()
  private testConfigs: Map<string, TestWorldConfig> = new Map()
  private sessionId: string

  private constructor() {
    this.sessionId = Date.now().toString()
    this.initializeTestConfigs()
  }

  /**
   * @description –ü–æ–ª—É—á–∏—Ç—å —Å–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä allocator
   */
  public static getInstance(): TestWorldAllocator {
    if (!TestWorldAllocator.instance) {
      TestWorldAllocator.instance = new TestWorldAllocator()
    }
    return TestWorldAllocator.instance
  }

  /**
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç–µ—Å—Ç–æ–≤
   */
  private initializeTestConfigs(): void {
    // UC Tests - –º–æ–∂–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    this.testConfigs.set('UC-01-AI-First-Site-Creation.test.ts', {
      testFile: 'UC-01-AI-First-Site-Creation.test.ts',
      worldId: '', // –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      seedType: 'basic_user',
      timeout: 60000,
      requiresAdmin: false
    })

    this.testConfigs.set('UC-02-Visual-Site-Building.test.ts', {
      testFile: 'UC-02-Visual-Site-Building.test.ts', 
      worldId: '',
      seedType: 'basic_user',
      timeout: 60000,
      requiresAdmin: false
    })

    this.testConfigs.set('UC-03-Artifact-Reuse.test.ts', {
      testFile: 'UC-03-Artifact-Reuse.test.ts',
      worldId: '',
      seedType: 'basic_user', 
      timeout: 60000,
      requiresAdmin: false
    })

    this.testConfigs.set('UC-04-Site-Publishing.test.ts', {
      testFile: 'UC-04-Site-Publishing.test.ts',
      worldId: '',
      seedType: 'basic_user',
      timeout: 60000, 
      requiresAdmin: false
    })

    // UC-05 - –¥–ª–∏–Ω–Ω—ã–π —Ç–µ—Å—Ç, –æ—Ç–¥–µ–ª—å–Ω—ã–π worker
    this.testConfigs.set('UC-05-Multi-Artifact-Creation.test.ts', {
      testFile: 'UC-05-Multi-Artifact-Creation.test.ts',
      worldId: '',
      seedType: 'multi_artifact',
      timeout: 80000, // —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout
      requiresAdmin: false
    })

    this.testConfigs.set('UC-06-Site-Templates.test.ts', {
      testFile: 'UC-06-Site-Templates.test.ts',
      worldId: '',
      seedType: 'basic_user',
      timeout: 60000,
      requiresAdmin: false
    })

    this.testConfigs.set('UC-07-Collaborative-Editing.test.ts', {
      testFile: 'UC-07-Collaborative-Editing.test.ts',
      worldId: '',
      seedType: 'basic_user',
      timeout: 60000,
      requiresAdmin: false
    })

    // Phoenix Tests - —Ç—Ä–µ–±—É—é—Ç admin –ø—Ä–∞–≤–∞, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    this.testConfigs.set('phoenix-user-management.test.ts', {
      testFile: 'phoenix-user-management.test.ts',
      worldId: '',
      seedType: 'admin_user',
      timeout: 60000,
      requiresAdmin: true
    })

    this.testConfigs.set('phoenix-seed-export.test.ts', {
      testFile: 'phoenix-seed-export.test.ts', 
      worldId: '',
      seedType: 'admin_user',
      timeout: 60000,
      requiresAdmin: true
    })

    console.log(`üåç Test World Allocator initialized with ${this.testConfigs.size} test configurations`)
  }

  /**
   * @description –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å world –¥–ª—è worker
   * @param workerId - ID Playwright worker
   * @param testFile - –∏–º—è —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞
   * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ä–µ –¥–ª—è —ç—Ç–æ–≥–æ worker
   */
  public async allocateWorldForWorker(workerId: string, testFile: string): Promise<WorkerWorldInfo> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π worker
    let workerInfo = this.workers.get(workerId)
    
    if (!workerInfo) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π world –¥–ª—è worker
      const worldId = `TEST_W${workerId}_${this.sessionId}_${randomUUID().slice(0, 8)}`
      
      workerInfo = {
        workerId,
        worldId,
        assignedTests: [testFile],
        isActive: true,
        createdAt: Date.now()
      }
      
      this.workers.set(workerId, workerInfo)
      
      console.log(`üåç Created new world ${worldId} for worker ${workerId}`)
      console.log(`üìù Assigned test: ${testFile}`)
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º world –≤ –ë–î —á–µ—Ä–µ–∑ Phoenix API
      await this.initializeWorldInDatabase(worldId, testFile)
      
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É worker
      if (!workerInfo.assignedTests.includes(testFile)) {
        workerInfo.assignedTests.push(testFile)
        console.log(`üìù Added test ${testFile} to existing world ${workerInfo.worldId}`)
      }
    }

    return workerInfo
  }

  /**
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏—Ä–∞ –≤ –ë–î —á–µ—Ä–µ–∑ Phoenix World Management API
   * @param worldId - ID –º–∏—Ä–∞
   * @param testFile - –∏–º—è —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ seed –¥–∞–Ω–Ω—ã—Ö
   */
  private async initializeWorldInDatabase(worldId: string, testFile: string): Promise<void> {
    const testConfig = this.testConfigs.get(testFile)
    if (!testConfig) {
      console.warn(`‚ö†Ô∏è No config found for test ${testFile}, using default seed`)
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º worldId –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    testConfig.worldId = worldId

    try {
      console.log(`üîß Initializing world ${worldId} with seed type: ${testConfig.seedType}`)
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Phoenix World Management API
      // –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`üå± Seed data type: ${testConfig.seedType}`)
      console.log(`üë§ Requires admin: ${testConfig.requiresAdmin}`)
      console.log(`‚è±Ô∏è Timeout: ${testConfig.timeout}ms`)
      
      // TODO: –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Phoenix API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Ä–∞ –∏ seeding
      // await phoenixWorldManager.createWorld(worldId, testConfig.seedType)
      
    } catch (error) {
      console.error(`‚ùå Failed to initialize world ${worldId}:`, error)
      throw error
    }
  }

  /**
   * @description –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞
   * @param testFile - –∏–º—è —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞
   * @returns –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
   */
  public getTestConfig(testFile: string): TestWorldConfig | undefined {
    return this.testConfigs.get(testFile)
  }

  /**
   * @description –ü–æ–ª—É—á–∏—Ç—å world ID –¥–ª—è —Ç–µ—Å—Ç–∞
   * @param workerId - ID worker
   * @returns World ID –∏–ª–∏ undefined
   */
  public getWorldIdForWorker(workerId: string): string | undefined {
    return this.workers.get(workerId)?.worldId
  }

  /**
   * @description –û—Å–≤–æ–±–æ–¥–∏—Ç—å world –¥–ª—è worker
   * @param workerId - ID worker
   */
  public async releaseWorkerWorld(workerId: string): Promise<void> {
    const workerInfo = this.workers.get(workerId)
    if (!workerInfo) {
      return
    }

    console.log(`üßπ Releasing world ${workerInfo.worldId} for worker ${workerId}`)
    
    try {
      // TODO: –í—ã–∑–æ–≤ Phoenix API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ world
      // await phoenixWorldManager.deleteWorld(workerInfo.worldId)
      
      this.workers.delete(workerId)
      console.log(`‚úÖ World ${workerInfo.worldId} released successfully`)
      
    } catch (error) {
      console.error(`‚ùå Failed to release world ${workerInfo.worldId}:`, error)
    }
  }

  /**
   * @description –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º workers
   * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ allocation
   */
  public getAllocationStats(): { totalWorkers: number, activeWorlds: number, totalTests: number } {
    const activeWorlds = Array.from(this.workers.values()).filter(w => w.isActive).length
    const totalTests = Array.from(this.workers.values())
      .reduce((acc, worker) => acc + worker.assignedTests.length, 0)

    return {
      totalWorkers: this.workers.size,
      activeWorlds,
      totalTests
    }
  }

  /**
   * @description –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–∏—Ä–æ–≤ (–¥–ª—è teardown)
   */
  public async cleanupAllWorlds(): Promise<void> {
    console.log(`üßπ Cleaning up ${this.workers.size} test worlds...`)
    
    const cleanupPromises = Array.from(this.workers.keys()).map(workerId => 
      this.releaseWorkerWorld(workerId)
    )
    
    await Promise.all(cleanupPromises)
    console.log(`‚úÖ All test worlds cleaned up`)
  }
}

/**
 * @description Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è world ID –≤ —Ç–µ—Å—Ç–∞—Ö
 * @param workerId - ID Playwright worker  
 * @param testFile - –∏–º—è —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞
 * @returns World ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–µ
 */
export async function getTestWorldId(workerId: string, testFile: string): Promise<string> {
  const allocator = TestWorldAllocator.getInstance()
  const workerInfo = await allocator.allocateWorldForWorker(workerId, testFile)
  return workerInfo.worldId
}

/**
 * @description Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞
 * @param testFile - –∏–º—è —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∞
 * @returns –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
 */
export function getTestConfig(testFile: string): TestWorldConfig | undefined {
  const allocator = TestWorldAllocator.getInstance()
  return allocator.getTestConfig(testFile)
}

// END OF: tests/helpers/test-world-allocator.ts
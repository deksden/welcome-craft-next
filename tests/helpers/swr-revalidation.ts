/**
 * @file tests/helpers/swr-revalidation.ts
 * @description SWR Cache Management –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —Ç–µ—Å—Ç–∞—Ö
 * @version 2.0.0
 * @date 2025-06-27
 * @updated –†–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: mutate —Ñ—É–Ω–∫—Ü–∏–∏, programmatic revalidation
 */

import type { Page } from '@playwright/test'

/**
 * @description –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç SWR –∫—ç—à —á–µ—Ä–µ–∑ –∏–º–∏—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤)
 * @param page Playwright page instance
 * @param timeout –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns Promise<boolean> - true –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
 */
export async function forceSWRRevalidation(page: Page, timeout = 10000): Promise<boolean> {
  console.log('üîÑ Forcing SWR revalidation through user interaction simulation...')
  
  try {
    // –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º mutate —Ñ—É–Ω–∫—Ü–∏—é SWR –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ window –æ–±—ä–µ–∫—Ç
    const mutateSuccess = await page.evaluate(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è mutate —Ñ—É–Ω–∫—Ü–∏—è
      if (typeof window !== 'undefined' && (window as any).__SWR_MUTATE__) {
        console.log('üéØ Using direct SWR mutate function...')
        const mutate = (window as any).__SWR_MUTATE__
        // Invalidate –≤—Å–µ API endpoints —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
        mutate('/api/artifacts?page=1', undefined, { revalidate: true })
        return true
      }
      return false
    }).catch(() => false)
    
    if (mutateSuccess) {
      await page.waitForTimeout(2000)
      return true
    }
    
    // –ú–µ—Ç–æ–¥ 2: –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SWR
    const kindFilter = page.locator('select, [data-testid*="filter"], [data-testid*="select"]').first()
    const hasFilter = await kindFilter.isVisible().catch(() => false)
    
    if (hasFilter) {
      console.log('üéõÔ∏è Found filter control, triggering SWR update via filter change...')
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å SWR revalidation
      await kindFilter.click()
      await page.waitForTimeout(500)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ "all"
      const allOption = page.locator('option, [role="option"]').filter({ hasText: /all|–≤—Å–µ/i }).first()
      if (await allOption.isVisible().catch(() => false)) {
        await allOption.click()
      }
      
      await page.waitForTimeout(2000) // –ñ–¥–µ–º SWR revalidation
      return true
    }
    
    // –ú–µ—Ç–æ–¥ 3: –ò–º–∏—Ç–∏—Ä—É–µ–º search input change –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const searchInput = page.locator('input[type="search"], input[placeholder*="search"], input[placeholder*="–ø–æ–∏—Å–∫"]').first()
    const hasSearchInput = await searchInput.isVisible().catch(() => false)
    
    if (hasSearchInput) {
      console.log('üîç Found search input, triggering SWR update via search change...')
      
      await searchInput.fill('temp-search-trigger')
      await page.waitForTimeout(1000)
      await searchInput.fill('')
      await page.waitForTimeout(2000) // –ñ–¥–µ–º SWR revalidation
      return true
    }
    
    // –ú–µ—Ç–æ–¥ 4: Focus/blur –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è trigger revalidation
    console.log('üëÜ Using focus/blur method to trigger SWR revalidation...')
    await page.evaluate(() => {
      window.dispatchEvent(new Event('focus'))
      setTimeout(() => window.dispatchEvent(new Event('blur')), 100)
      setTimeout(() => window.dispatchEvent(new Event('focus')), 200)
    })
    
    await page.waitForTimeout(2000)
    return true
    
  } catch (error) {
    console.log(`‚ùå SWR revalidation failed: ${error}`)
    return false
  }
}

/**
 * @description –ñ–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é SWR revalidation + polling
 * @param page Playwright page instance
 * @param artifactTitle –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param timeout –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
 * @returns Promise<boolean>
 */
export async function waitForArtifactWithSWRRevalidation(
  page: Page, 
  artifactTitle: string, 
  timeout = 20000
): Promise<boolean> {
  const startTime = Date.now()
  
  console.log(`üöÄ Smart waiting for artifact "${artifactTitle}" with SWR revalidation...`)
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é SWR revalidation
  await forceSWRRevalidation(page)
  
  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
  while (Date.now() - startTime < timeout) {
    const artifactCard = page.locator('[data-testid="artifact-card"]').filter({ hasText: artifactTitle })
    const isVisible = await artifactCard.isVisible().catch(() => false)
    
    if (isVisible) {
      console.log(`‚úÖ Artifact "${artifactTitle}" appeared after ${Date.now() - startTime}ms via SWR revalidation`)
      return true
    }
    
    // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–≤—Ç–æ—Ä—è–µ–º SWR revalidation
    if ((Date.now() - startTime) % 5000 < 1000) {
      await forceSWRRevalidation(page)
    }
    
    await page.waitForTimeout(1000)
  }
  
  console.log(`‚ùå Artifact "${artifactTitle}" did not appear even with SWR revalidation within ${timeout}ms`)
  return false
}

/**
 * @description –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SWR –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @feature –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 */

/**
 * @description –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SWR endpoint
 * @param mutate SWR mutate —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ useSWR hook
 * @param endpoint API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export function createSWRUpdater(mutate: Function, endpoint: string) {
  return async () => {
    console.log(`üîÑ Refreshing SWR cache for: ${endpoint}`)
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è revalidation —Å optimistic updates
      await mutate(undefined, { revalidate: true })
      console.log(`‚úÖ SWR cache refreshed successfully for: ${endpoint}`)
      return true
    } catch (error) {
      console.error(`‚ùå Failed to refresh SWR cache for ${endpoint}:`, error)
      return false
    }
  }
}

/**
 * @description –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 * @param mutateFunctions –ú–∞—Å—Å–∏–≤ mutate —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö endpoints
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export async function refreshArtifactLists(mutateFunctions: Function[]): Promise<boolean> {
  console.log(`üîÑ Refreshing ${mutateFunctions.length} artifact lists...`)
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.all(
      mutateFunctions.map(async (mutate) => {
        try {
          await mutate(undefined, { revalidate: true })
          return true
        } catch (error) {
          console.error('‚ùå Individual mutate failed:', error)
          return false
        }
      })
    )
    
    const successCount = results.filter(Boolean).length
    console.log(`‚úÖ Successfully refreshed ${successCount}/${mutateFunctions.length} artifact lists`)
    
    return successCount > 0
  } catch (error) {
    console.error('‚ùå Failed to refresh artifact lists:', error)
    return false
  }
}

/**
 * @description –°–æ–∑–¥–∞–µ—Ç debounced —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SWR (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
 * @param mutate SWR mutate —Ñ—É–Ω–∫—Ü–∏—è
 * @param delay –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000ms)
 * @returns Debounced —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export function createDebouncedSWRUpdater(mutate: Function, delay = 1000) {
  let timeoutId: NodeJS.Timeout | null = null
  
  return () => {
    if (timeoutId) {
      clearTimeout(timeoutId)
    }
    
    timeoutId = setTimeout(async () => {
      console.log('üîÑ Executing debounced SWR refresh...')
      try {
        await mutate(undefined, { revalidate: true })
        console.log('‚úÖ Debounced SWR refresh completed')
      } catch (error) {
        console.error('‚ùå Debounced SWR refresh failed:', error)
      }
    }, delay)
  }
}

/**
 * @description Hooks-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 * @param useSWRResult –†–µ–∑—É–ª—å—Ç–∞—Ç useSWR hook ({ mutate, ... })
 * @returns –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export function useElegantRefresh(useSWRResult: { mutate: Function }) {
  const { mutate } = useSWRResult
  
  return async () => {
    console.log('üîÑ Elegant refresh triggered...')
    try {
      await mutate(undefined, { 
        revalidate: true,
        populateCache: true,
        rollbackOnError: true
      })
      console.log('‚úÖ Elegant refresh completed')
      return true
    } catch (error) {
      console.error('‚ùå Elegant refresh failed:', error)
      return false
    }
  }
}

// END OF: tests/helpers/swr-revalidation.ts
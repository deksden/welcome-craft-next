/**
 * @file tests/helpers/e2e-refresh.helper.ts
 * @description E2E helper –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ —Ç–µ—Å—Ç–∞—Ö
 * @version 2.1.0
 * @date 2025-06-27
 * @updated BUG-035 FINAL FIX: –î–æ–±–∞–≤–ª–µ–Ω—ã credentials –∏ X-Test-Environment header –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ browser-side fetch
 */

/** HISTORY:
 * v2.1.0 (2025-06-27): BUG-035 FINAL FIX - –î–æ–±–∞–≤–ª–µ–Ω—ã credentials:'include' –∏ X-Test-Environment header –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ createArtifactWithElegantRefresh
 * v2.0.0 (2025-06-27): BUG-035 FIX - –ü–µ—Ä–µ–ø–∏—Å–∞–Ω createArtifactWithElegantRefresh –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è browser-side fetch –≤–º–µ—Å—Ç–æ page.request.post() –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ automatic refresh headers
 * v1.0.0 (2025-06-27): –°–æ–∑–¥–∞–Ω helper –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ window events –∏ SWR revalidation –≤ E2E —Ç–µ—Å—Ç–∞—Ö
 */

import type { Page } from '@playwright/test'

/**
 * @description –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á–µ—Ä–µ–∑ window events
 * @param page Playwright page instance
 * @param options –û–ø—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns Promise<void>
 */
export async function triggerElegantRefreshInBrowser(
  page: Page, 
  options?: {
    operation?: 'create' | 'update' | 'delete'
    artifactId?: string
    showNotification?: boolean
  }
): Promise<void> {
  const { operation = 'create', artifactId, showNotification = false } = options || {}
  
  console.log('üîÑ Triggering elegant refresh in browser for E2E test...')
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ refresh
  await page.evaluate(async ({ operation, artifactId, showNotification }) => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º window event –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const refreshEvent = new CustomEvent('artifact-list-refresh', {
      detail: { 
        timestamp: Date.now(), 
        source: 'e2e-test',
        operation,
        artifactId
      }
    })
    
    window.dispatchEvent(refreshEvent)
    console.log('üì° Window refresh event dispatched from E2E test')
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π SWR refresh –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    try {
      const globalSWRCache = (window as any).__SWR_CACHE__
      if (globalSWRCache) {
        // Invalidate –∫–ª—é—á–µ–≤—ã–µ endpoints
        const endpoints = [
          '/api/artifacts?page=1',
          '/api/artifacts',
          'artifacts-sidebar'
        ]
        
        for (const endpoint of endpoints) {
          if (globalSWRCache.delete) {
            globalSWRCache.delete(endpoint)
          }
        }
        
        console.log('‚úÖ SWR cache invalidated from E2E test')
      }
    } catch (error) {
      console.log('‚ö†Ô∏è SWR cache invalidation failed in E2E test:', error)
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º focus event –¥–ª—è revalidation
    const focusEvent = new Event('focus')
    window.dispatchEvent(focusEvent)
    
  }, { operation, artifactId, showNotification })
  
  // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ events
  await page.waitForTimeout(2000)
  
  console.log('‚úÖ Elegant refresh triggered in browser')
}

/**
 * @description –°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —á–µ—Ä–µ–∑ API –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 * @param page Playwright page instance
 * @param artifactData –î–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
 * @returns Promise<boolean> - success status
 */
export async function createArtifactWithElegantRefresh(
  page: Page,
  artifactData: {
    id: string
    kind: string
    title: string
    content: string
  }
): Promise<boolean> {
  const { id, kind, title, content } = artifactData
  
  console.log(`üé¨ Creating artifact "${title}" with elegant refresh...`)
  
  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BUG-035 FINAL: –ò—Å–ø–æ–ª—å–∑—É–µ–º browser-side fetch –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ headers –∏ credentials
    const success = await page.evaluate(async ({ id, kind, title, content }) => {
      try {
        console.log('üåê Browser: Making authenticated fetch request to create artifact...')
        
        const response = await fetch(`/api/artifact?id=${id}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º X-Test-Environment header - –æ–Ω –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ endpoints
          },
          credentials: 'include',  // –í–ê–ñ–ù–û: –≤–∫–ª—é—á–∞–µ–º cookies –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          body: JSON.stringify({ kind, title, content })
        })
        
        console.log('üåê Browser: Response status:', response.status)
        
        if (!response.ok) {
          console.error('‚ùå Browser: Failed to create artifact:', response.status)
          const errorText = await response.text()
          console.error('‚ùå Browser: Error details:', errorText)
          return false
        }
        
        console.log('‚úÖ Browser: Artifact created successfully via fetch')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh headers 
        const shouldRefresh = response.headers.get('X-Trigger-Refresh') === 'true'
        const operation = response.headers.get('X-Refresh-Operation')
        const artifactId = response.headers.get('X-Refresh-Artifact-Id')
        
        console.log('üîç Browser: Refresh headers:', { shouldRefresh, operation, artifactId })
        
        if (shouldRefresh) {
          console.log('üîÑ Browser: Triggering manual refresh event...')
          
          // Manually trigger refresh event –ø–æ—Å–∫–æ–ª—å–∫—É patched fetch –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ E2E
          const refreshEvent = new CustomEvent('artifact-list-refresh', {
            detail: { 
              timestamp: Date.now(), 
              source: 'e2e-browser-fetch',
              operation: operation || 'create',
              artifactId: artifactId || id
            }
          })
          
          window.dispatchEvent(refreshEvent)
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º focus event –¥–ª—è SWR revalidation
          setTimeout(() => {
            const focusEvent = new Event('focus')
            window.dispatchEvent(focusEvent)
          }, 500)
          
          console.log('‚úÖ Browser: Manual refresh events dispatched')
        }
        
        return true
        
      } catch (error) {
        console.error('‚ùå Browser: Error in fetch request:', error)
        return false
      }
    }, { id, kind, title, content })
    
    if (success) {
      console.log('‚úÖ Artifact created successfully with browser-side elegant refresh')
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º server-side refresh trigger
      await triggerElegantRefreshInBrowser(page, {
        operation: 'create',
        artifactId: id,
        showNotification: false
      })
      
      return true
    } else {
      console.log('‚ùå Failed to create artifact via browser-side fetch')
      return false
    }
    
  } catch (error) {
    console.log('‚ùå Error creating artifact with elegant refresh:', error)
    return false
  }
}

/**
 * @description –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ fetch –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ refresh –≤ E2E —Ç–µ—Å—Ç–∞—Ö
 * @param page Playwright page instance
 * @returns Promise<void>
 */
export async function setupE2EFetchRefreshHandler(page: Page): Promise<void> {
  console.log('üîß Setting up E2E fetch refresh handler...')
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  await page.addInitScript(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
    const originalFetch = window.fetch
    
    // –ü–∞—Ç—á–∏–º fetch –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ refresh headers
    window.fetch = async (input, init) => {
      try {
        const response = await originalFetch(input, init)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º headers –¥–ª—è refresh
        const shouldRefresh = response.headers.get('X-Trigger-Refresh') === 'true'
        
        if (shouldRefresh) {
          console.log('üîÑ E2E: Detected refresh headers, triggering update...')
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º window event
          const refreshEvent = new CustomEvent('artifact-list-refresh', {
            detail: { 
              timestamp: Date.now(), 
              source: 'e2e-fetch-handler',
              operation: response.headers.get('X-Refresh-Operation') || 'update',
              artifactId: response.headers.get('X-Refresh-Artifact-Id')
            }
          })
          
          window.dispatchEvent(refreshEvent)
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
          setTimeout(() => {
            const focusEvent = new Event('focus')
            window.dispatchEvent(focusEvent)
          }, 500)
        }
        
        return response
        
      } catch (error) {
        console.error('‚ùå Error in E2E fetch handler:', error)
        throw error
      }
    }
    
    console.log('‚úÖ E2E fetch refresh handler installed')
  })
  
  console.log('‚úÖ E2E fetch refresh handler setup completed')
}

// END OF: tests/helpers/e2e-refresh.helper.ts
/**
 * @file lib/ai/fixtures-provider.ts
 * @description AI Fixtures Provider - "lossless" –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
 * @version 2.0.0
 * @date 2025-07-02
 * @updated –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –≤ lossless –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ stream chunks
 */

/** HISTORY:
 * v2.0.0 (2025-07-02): –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ lossless –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ fullResponse –∏ streamChunks, stream.tee() –¥–ª—è –∑–∞–ø–∏—Å–∏
 * v1.0.0 (2025-06-18): –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è AI fixtures –¥–ª—è —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { readFile, writeFile, mkdir, } from 'node:fs/promises'
import { join, dirname } from 'node:path'
// Optional import for AI SDK provider types - fallback to any if not available
type LanguageModelV1 = any
type LanguageModelV1StreamPart = any
import type { WorldId } from '@/tests/helpers/worlds.config'

/**
 * @description –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã AI Fixtures Provider
 */
export type FixtureMode = 'record' | 'replay' | 'passthrough' | 'record-or-replay'

/**
 * @description –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–∏–º
 */
export type FixtureOutputType = 'full' | 'stream'

/**
 * @description –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (lossless –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
 */
export interface AIFixture {
  /** –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∏–∫—Å—Ç—É—Ä—ã */
  id: string
  /** –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ */
  name: string
  /** ID Use Case */
  useCaseId?: string
  /** ID –º–∏—Ä–∞ */
  worldId?: WorldId
  /** –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (prompt, settings) */
  input: {
    prompt: string // –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ messages
    model: string
    settings?: Record<string, any>
    context?: any
  }
  /** –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (response) */
  output: {
    type: FixtureOutputType // 'full' –¥–ª—è generateText, 'stream' –¥–ª—è streamText
    // –î–ª—è generateText/generateObject - —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç GenerateTextResult
    fullResponse?: any
    // –î–ª—è streamText/streamObject - —Ö—Ä–∞–Ω–∏—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ LanguageModelV1StreamPart
    streamChunks?: any[]
    timestamp: string
    duration: number
  }
  /** –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */
  metadata: {
    createdAt: string
    hash: string // –•–µ—à –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    tags?: string[]
  }
}

/**
 * @description –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI Fixtures Provider
 */
export interface FixturesConfig {
  /** –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã */
  mode: FixtureMode
  /** –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä */
  fixturesDir: string
  /** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π */
  autoCreateDirs: boolean
  /** –î–µ–±–∞–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ */
  debug: boolean
  /** Timeout –¥–ª—è –∑–∞–ø–∏—Å–∏ (–º—Å) */
  recordTimeout: number
  /** –í–∫–ª—é—á–∏—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ */
  enableHashing: boolean
}

/**
 * @description AI Fixtures Provider - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è AI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
 * 
 * @feature –¢—Ä–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: record, replay, passthrough
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
 * @feature –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Use Cases –∏ Worlds –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @feature –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 */
export class AIFixturesProvider {
  private config: FixturesConfig
  private fixturesCache: Map<string, AIFixture> = new Map()
  
  constructor(config: Partial<FixturesConfig> = {}) {
    this.config = {
      mode: (process.env.AI_FIXTURES_MODE as FixtureMode) || 'passthrough',
      fixturesDir: config.fixturesDir || join(process.cwd(), 'tests/fixtures/ai'),
      autoCreateDirs: config.autoCreateDirs ?? true,
      debug: config.debug ?? (process.env.NODE_ENV === 'test'),
      recordTimeout: config.recordTimeout ?? 30000,
      enableHashing: config.enableHashing ?? true,
      ...config
    }
    
    this.log(`ü§ñ AI Fixtures Provider initialized:`, {
      mode: this.config.mode,
      fixturesDir: this.config.fixturesDir
    })
  }

  /**
   * @description –°–æ–∑–¥–∞—Ç—å –æ–±–µ—Ä—Ç–∫—É –Ω–∞–¥ AI –º–æ–¥–µ–ª—å—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fixtures
   * 
   * @param originalModel - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å
   * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç (Use Case, World)
   * @returns Wrapped –º–æ–¥–µ–ª—å —Å fixtures –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
   */
  public wrapModel(
    originalModel: LanguageModelV1,
    context: {
      useCaseId?: string
      worldId?: WorldId
      fixturePrefix?: string
    } = {}
  ): LanguageModelV1 {
    const self = this
    
    return {
      specificationVersion: 'v1',
      provider: originalModel.provider,
      modelId: originalModel.modelId,
      
      async doGenerate(options: any) {
        const startTime = Date.now()
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ñ–∏–∫—Å—Ç—É—Ä—ã
        const fixtureId = self.generateFixtureId(options, context)
        
        if (self.config.mode === 'replay') {
          // –†–µ–∂–∏–º replay - –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É
          const fixture = await self.loadFixture(fixtureId, context)
          if (fixture) {
            self.log(`üîÅ Replaying fixture: ${fixtureId}`)
            if (fixture.output.type !== 'full') {
              throw new Error(`Expected 'full' fixture type for doGenerate, got '${fixture.output.type}'`)
            }
            return fixture.output.fullResponse
          } else {
            throw new Error(`Fixture not found: ${fixtureId}. Run tests in 'record' mode first.`)
          }
        }
        
        if (self.config.mode === 'passthrough') {
          // –†–µ–∂–∏–º passthrough - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
          self.log(`‚ö° Passthrough mode: ${fixtureId}`)
          return await originalModel.doGenerate(options)
        }
        
        if (self.config.mode === 'record-or-replay') {
          // –†–µ–∂–∏–º record-or-replay - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É, replay –∏–ª–∏ record
          const fixture = await self.loadFixture(fixtureId, context)
          if (fixture) {
            // –ï—Å–ª–∏ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –µ–µ (replay)
            self.log(`üîÅ Replaying fixture: ${fixtureId}`)
            if (fixture.output.type !== 'full') {
              throw new Error(`Expected 'full' fixture type for doGenerate, got '${fixture.output.type}'`)
            }
            return fixture.output.fullResponse
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç - –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º (record)
            self.log(`üìù Recording new fixture on-the-fly: ${fixtureId}`)
            
            const result = await Promise.race([
              originalModel.doGenerate(options),
              new Promise<never>((_, reject) => 
                setTimeout(() => reject(new Error('AI request timeout')), self.config.recordTimeout)
              )
            ])
            
            const duration = Date.now() - startTime
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É —Å –ø–æ–ª–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
            await self.saveFixture(fixtureId, {
              input: {
                prompt: self.extractPrompt(options),
                model: originalModel.modelId,
                settings: self.extractSettings(options),
                context
              },
              output: {
                type: 'full',
                fullResponse: result, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–ï–°–¨ –æ–±—ä–µ–∫—Ç —Ü–µ–ª–∏–∫–æ–º
                timestamp: new Date().toISOString(),
                duration
              }
            }, context)
            
            return result
          }
        }
        
        if (self.config.mode === 'record') {
          // –†–µ–∂–∏–º record - –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          self.log(`üìù Recording fixture: ${fixtureId}`)
          
          const result = await Promise.race([
            originalModel.doGenerate(options),
            new Promise<never>((_, reject) => 
              setTimeout(() => reject(new Error('AI request timeout')), self.config.recordTimeout)
            )
          ])
          
          const duration = Date.now() - startTime
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É —Å –ø–æ–ª–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
          await self.saveFixture(fixtureId, {
            input: {
              prompt: self.extractPrompt(options),
              model: originalModel.modelId,
              settings: self.extractSettings(options),
              context
            },
            output: {
              type: 'full',
              fullResponse: result, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–ï–°–¨ –æ–±—ä–µ–∫—Ç —Ü–µ–ª–∏–∫–æ–º
              timestamp: new Date().toISOString(),
              duration
            }
          }, context)
          
          return result
        }
        
        throw new Error(`Unknown AI fixtures mode: ${self.config.mode}`)
      },

      async doStream(options: any) {
        const startTime = Date.now()
        const fixtureId = self.generateFixtureId(options, context)
        
        if (self.config.mode === 'replay') {
          // –†–µ–∂–∏–º replay - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º stream
          const fixture = await self.loadFixture(fixtureId, context)
          if (fixture) {
            self.log(`üîÅ Replaying stream fixture: ${fixtureId}`)
            if (fixture.output.type !== 'stream') {
              throw new Error(`Expected 'stream' fixture type for doStream, got '${fixture.output.type}'`)
            }
            return self.createStreamFromChunks(fixture.output.streamChunks || [])
          } else {
            throw new Error(`Stream fixture not found: ${fixtureId}. Run tests in 'record' mode first.`)
          }
        }
        
        if (self.config.mode === 'passthrough') {
          // –†–µ–∂–∏–º passthrough - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
          self.log(`‚ö° Passthrough stream mode: ${fixtureId}`)
          return await originalModel.doStream(options)
        }
        
        if (self.config.mode === 'record-or-replay') {
          // –†–µ–∂–∏–º record-or-replay - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É, replay –∏–ª–∏ record
          const fixture = await self.loadFixture(fixtureId, context)
          if (fixture) {
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º stream –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
            self.log(`üîÅ Replaying stream fixture: ${fixtureId}`)
            if (fixture.output.type !== 'stream') {
              throw new Error(`Expected 'stream' fixture type for doStream, got '${fixture.output.type}'`)
            }
            return self.createStreamFromChunks(fixture.output.streamChunks || [])
          } else {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π stream
            self.log(`üìù Recording stream fixture: ${fixtureId}`)
            return await self.recordStream(fixtureId, options, originalModel, context, startTime)
          }
        }
        
        if (self.config.mode === 'record') {
          // –†–µ–∂–∏–º record - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º stream
          self.log(`üìù Recording stream fixture: ${fixtureId}`)
          return await self.recordStream(fixtureId, options, originalModel, context, startTime)
        }
        
        throw new Error(`Unknown AI fixtures mode: ${self.config.mode}`)
      }
    }
  }

  /**
   * @description –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∏–∫—Å—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private generateFixtureId(
    options: any, 
    context: { useCaseId?: string; worldId?: WorldId; fixturePrefix?: string }
  ): string {
    const prompt = this.extractPrompt(options)
    const model = options.model || 'unknown'
    
    if (this.config.enableHashing) {
      // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω–æ–≥–æ ID
      const hash = this.simpleHash(prompt + model + JSON.stringify(context))
      const prefix = context.fixturePrefix || context.useCaseId || 'ai'
      return `${prefix}-${hash}`
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      const timestamp = Date.now()
      const prefix = context.fixturePrefix || context.useCaseId || 'ai'
      return `${prefix}-${timestamp}`
    }
  }

  /**
   * @description –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
   */
  private simpleHash(str: string): string {
    let hash = 0
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i)
      hash = ((hash << 5) - hash) + char
      hash = hash & hash // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(36)
  }

  /**
   * @description –ò–∑–≤–ª–µ–∫–∞–µ—Ç prompt –∏–∑ –æ–ø—Ü–∏–π AI –º–æ–¥–µ–ª–∏
   */
  private extractPrompt(options: any): string {
    if (options.prompt) return options.prompt
    if (options.messages) {
      return options.messages.map((m: any) => `${m.role}: ${m.content}`).join('\n')
    }
    return JSON.stringify(options)
  }

  /**
   * @description –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–ø—Ü–∏–π AI –º–æ–¥–µ–ª–∏
   */
  private extractSettings(options: any): Record<string, any> {
    const { prompt, messages, ...settings } = options
    return settings
  }

  /**
   * @description –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ AI –º–æ–¥–µ–ª–∏
   */
  private extractContent(result: any): string {
    if (result.text) return result.text
    if (result.content) return result.content
    if (result.choices?.[0]?.message?.content) {
      return result.choices[0].message.content
    }
    return JSON.stringify(result)
  }

  /**
   * @description –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–∫—Å—Ç—É—Ä—É –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  private async loadFixture(
    fixtureId: string, 
    context: { useCaseId?: string; worldId?: WorldId } = {}
  ): Promise<AIFixture | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (this.fixturesCache.has(fixtureId)) {
      const cached = this.fixturesCache.get(fixtureId)
      return cached || null
    }
    
    try {
      const filePath = this.getFixtureFilePath(fixtureId, context)
      const fileContent = await readFile(filePath, 'utf-8')
      const fixture: AIFixture = JSON.parse(fileContent)
      
      // –ö–µ—à–∏—Ä—É–µ–º
      this.fixturesCache.set(fixtureId, fixture)
      
      return fixture
    } catch (error) {
      this.log(`‚ö†Ô∏è  Failed to load fixture ${fixtureId}:`, error)
      return null
    }
  }

  /**
   * @description –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–∫—Å—Ç—É—Ä—É –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  private async saveFixture(
    fixtureId: string,
    data: {
      input: AIFixture['input']
      output: AIFixture['output']
    },
    context: { useCaseId?: string; worldId?: WorldId } = {}
  ): Promise<void> {
    const fixture: AIFixture = {
      id: fixtureId,
      name: `AI Fixture: ${fixtureId}`,
      useCaseId: context.useCaseId,
      worldId: context.worldId,
      input: data.input,
      output: data.output,
      metadata: {
        createdAt: new Date().toISOString(),
        hash: this.simpleHash(JSON.stringify(data.input)),
        tags: context.useCaseId ? [context.useCaseId] : undefined
      }
    }
    
    try {
      const filePath = this.getFixtureFilePath(fixtureId, context)
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (this.config.autoCreateDirs) {
        await mkdir(dirname(filePath), { recursive: true })
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
      await writeFile(filePath, JSON.stringify(fixture, null, 2), 'utf-8')
      
      // –ö–µ—à–∏—Ä—É–µ–º
      this.fixturesCache.set(fixtureId, fixture)
      
      this.log(`üíæ Fixture saved: ${filePath}`)
    } catch (error) {
      this.log(`‚ùå Failed to save fixture ${fixtureId}:`, error)
      throw error
    }
  }

  /**
   * @description –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–∏–∫—Å—Ç—É—Ä—ã
   */
  private getFixtureFilePath(
    fixtureId: string, 
    context: { useCaseId?: string; worldId?: WorldId } = {}
  ): string {
    let subdir = ''
    
    if (context.useCaseId) {
      subdir = join('use-cases', context.useCaseId)
    } else if (context.worldId) {
      subdir = join('worlds', context.worldId)
    } else {
      subdir = 'general'
    }
    
    return join(this.config.fixturesDir, subdir, `${fixtureId}.json`)
  }

  /**
   * @description –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç stream —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º stream.tee()
   */
  private async recordStream(
    fixtureId: string,
    options: any,
    originalModel: LanguageModelV1,
    context: { useCaseId?: string; worldId?: WorldId; fixturePrefix?: string },
    startTime: number
  ): Promise<{ stream: ReadableStream<LanguageModelV1StreamPart> }> {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π stream
    const { stream } = await originalModel.doStream(options)
    
    // –†–∞–∑–¥–µ–ª—è–µ–º stream –Ω–∞ –¥–≤–∞: –æ–¥–∏–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –æ–¥–∏–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
    const [streamForClient, streamForRecording] = stream.tee()
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º stream –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const clientResult = { stream: streamForClient }
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º stream
    ;(async () => {
      const recordedChunks: any[] = []
      const reader = streamForRecording.getReader()
      
      try {
        while (true) {
          const { done, value } = await reader.read()
          if (done) break
          recordedChunks.push(value)
        }
        
        const duration = Date.now() - startTime
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É —Å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —á–∞–Ω–∫–∞–º–∏
        await this.saveFixture(fixtureId, {
          input: {
            prompt: this.extractPrompt(options),
            model: originalModel.modelId,
            settings: this.extractSettings(options),
            context
          },
          output: {
            type: 'stream',
            streamChunks: recordedChunks, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
            timestamp: new Date().toISOString(),
            duration
          }
        }, context)
        
        this.log(`üíæ Stream fixture recorded: ${fixtureId} (${recordedChunks.length} chunks)`)
      } catch (error) {
        this.log(`‚ùå Failed to record stream fixture ${fixtureId}:`, error)
      } finally {
        reader.releaseLock()
      }
    })()
    
    return clientResult
  }

  /**
   * @description –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π ReadableStream –∏–∑ –º–∞—Å—Å–∏–≤–∞ —á–∞–Ω–∫–æ–≤
   */
  private createStreamFromChunks(chunks: any[]): { stream: ReadableStream<LanguageModelV1StreamPart> } {
    return {
      stream: new ReadableStream({
        start(controller) {
          // –ü—Ä–æ–∏—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞–Ω–∫–∞–º
          for (const chunk of chunks) {
            controller.enqueue(chunk)
          }
          controller.close()
        }
      })
    }
  }


  /**
   * @description –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
   */
  private log(message: string, ...args: any[]): void {
    if (this.config.debug) {
      console.log(`[AI-Fixtures] ${message}`, ...args)
    }
  }

  /**
   * @description –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä
   */
  public getStats(): {
    mode: FixtureMode
    cacheSize: number
    fixturesDir: string
  } {
    return {
      mode: this.config.mode,
      cacheSize: this.fixturesCache.size,
      fixturesDir: this.config.fixturesDir
    }
  }

  /**
   * @description –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ñ–∏–∫—Å—Ç—É—Ä
   */
  public clearCache(): void {
    this.fixturesCache.clear()
    this.log('üßπ Fixtures cache cleared')
  }
}

/**
 * @description –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI Fixtures Provider
 */
export const aiFixturesProvider = new AIFixturesProvider()

/**
 * @description –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è wrapped AI –º–æ–¥–µ–ª–∏
 * 
 * @param model - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç Use Case –∏ World
 * @returns Wrapped –º–æ–¥–µ–ª—å —Å fixtures –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 */
export function withAIFixtures(
  model: LanguageModelV1,
  context: {
    useCaseId?: string
    worldId?: WorldId
    fixturePrefix?: string
  } = {}
): LanguageModelV1 {
  return aiFixturesProvider.wrapModel(model, context)
}

// END OF: lib/ai/fixtures-provider.ts
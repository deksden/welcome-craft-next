/**
 * @file lib/ai/providers.enhanced.ts
 * @description Enhanced AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI Fixtures –¥–ª—è —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI Fixtures Provider —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ (Phase 3)
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è enhanced provider —Å AI fixtures –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 */

import { customProvider } from 'ai'
import { google } from '@ai-sdk/google'
import { xai } from '@ai-sdk/xai'
import { isTestEnvironment } from '../constants'
import {
  artifactModel,
  chatModel,
  reasoningModel,
  titleModel,
} from './models.test'
import { aiFixturesProvider, withAIFixtures } from './fixtures-provider'
import type { WorldId } from '@/tests/helpers/worlds.config'

/**
 * @description –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI Fixtures - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –º–æ–¥–µ–ª–∏
 */
interface AIContext {
  useCaseId?: string
  worldId?: WorldId
  fixturePrefix?: string
  operation?: string // 'chat', 'artifact-create', 'artifact-update', etc.
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å enhanced –º–æ–¥–µ–ª—å —Å AI fixtures –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * 
 * @param baseModel - –ë–∞–∑–æ–≤–∞—è AI –º–æ–¥–µ–ª—å
 * @param modelId - ID –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç Use Case –∏ World
 * @returns Enhanced –º–æ–¥–µ–ª—å —Å fixtures
 */
function createEnhancedModel(baseModel: any, modelId: string, context: AIContext = {}) {
  // –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fixtures
  if (process.env.AI_FIXTURES_MODE && process.env.AI_FIXTURES_MODE !== 'passthrough') {
    return withAIFixtures(baseModel, {
      ...context,
      fixturePrefix: context.fixturePrefix || modelId
    })
  }
  
  // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
  return baseModel
}

/**
 * @description Enhanced –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å AI Fixtures –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * 
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI Fixtures –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 * @feature –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Use Case –∏ World –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @feature –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 */
export function createEnhancedProvider(context: AIContext = {}) {
  const baseModels = isTestEnvironment ? {
    'chat-model': chatModel,
    'chat-model-reasoning': reasoningModel,
    'title-model': titleModel,
    'artifact-model': artifactModel,
    'omni-image-model': artifactModel,
  } : {
    'chat-model': google('gemini-2.5-flash-preview-05-20'),
    'chat-model-reasoning': google('gemini-2.0-flash'),
    'title-model': google('gemini-2.0-flash'),
    'artifact-model': google('gemini-2.5-flash-preview-05-20'),
    'omni-image-model': google('gemini-2.0-flash-preview-image-generation'),
  }

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –≤ AI Fixtures
  const enhancedModels = Object.entries(baseModels).reduce((acc, [key, model]) => {
    acc[key] = createEnhancedModel(model, key, {
      ...context,
      operation: key // –î–æ–±–∞–≤–ª—è–µ–º operation –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    })
    return acc
  }, {} as Record<string, any>)

  return customProvider({
    languageModels: enhancedModels,
    imageModels: isTestEnvironment ? {} : {
      'small-model': xai.image('grok-2-image'),
    },
  })
}

/**
 * @description –ì–ª–æ–±–∞–ª—å–Ω—ã–π enhanced –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
 */
export const myEnhancedProvider = createEnhancedProvider()

/**
 * @description –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Use Case
 * 
 * @param useCaseId - ID Use Case –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param worldId - ID World –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @returns –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 */
export function createUseCaseProvider(useCaseId: string, worldId?: WorldId) {
  return createEnhancedProvider({
    useCaseId,
    worldId,
    fixturePrefix: useCaseId
  })
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∏—Ä–∞
 * 
 * @param worldId - ID World –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @returns –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 */
export function createWorldProvider(worldId: WorldId) {
  return createEnhancedProvider({
    worldId,
    fixturePrefix: `world-${worldId}`
  })
}

/**
 * @description Utilities –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI Fixtures –≤ —Ç–µ—Å—Ç–∞—Ö
 */
export const aiFixturesUtils = {
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã AI Fixtures
   */
  setMode(mode: 'record' | 'replay' | 'passthrough') {
    process.env.AI_FIXTURES_MODE = mode
    console.log(`ü§ñ AI Fixtures mode set to: ${mode}`)
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä
   */
  getStats() {
    return aiFixturesProvider.getStats()
  },

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ñ–∏–∫—Å—Ç—É—Ä
   */
  clearCache() {
    aiFixturesProvider.clearCache()
  },

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è Use Case
   */
  startRecording(useCaseId: string, worldId?: WorldId) {
    this.setMode('record')
    console.log(`üìù Started recording AI fixtures for Use Case: ${useCaseId}`, 
                worldId ? `in World: ${worldId}` : '')
  },

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è Use Case
   */
  startReplay(useCaseId: string, worldId?: WorldId) {
    this.setMode('replay')
    console.log(`üîÅ Started replaying AI fixtures for Use Case: ${useCaseId}`, 
                worldId ? `in World: ${worldId}` : '')
  },

  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å AI Fixtures (passthrough —Ä–µ–∂–∏–º)
   */
  disable() {
    this.setMode('passthrough')
    console.log(`‚ö° AI Fixtures disabled - using real AI models`)
  }
}

/**
 * @description Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI Fixtures –≤ —Ç–µ—Å—Ç–∞—Ö
 * 
 * @feature –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º
 * @feature –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Playwright —Ç–µ—Å—Ç–∞–º–∏
 */
export function initializeAIFixturesForTest() {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const mode = process.env.AI_FIXTURES_MODE as 'record' | 'replay' | 'passthrough'
  const useCaseId = process.env.CURRENT_USE_CASE_ID
  const worldId = process.env.CURRENT_WORLD_ID as WorldId
  
  if (mode && mode !== 'passthrough') {
    aiFixturesUtils.setMode(mode)
    
    if (useCaseId) {
      console.log(`üéØ AI Fixtures initialized for Use Case: ${useCaseId}`)
    }
    
    if (worldId) {
      console.log(`üåç AI Fixtures initialized for World: ${worldId}`)
    }
  }
  
  return {
    mode: mode || 'passthrough',
    useCaseId,
    worldId,
    provider: createEnhancedProvider({ useCaseId, worldId })
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
if (isTestEnvironment && (process.env.AI_FIXTURES_MODE || process.env.CURRENT_USE_CASE_ID)) {
  initializeAIFixturesForTest()
}

// END OF: lib/ai/providers.enhanced.ts
/**
 * @file lib/db/world-queries.ts
 * @description Enhanced database queries —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏—Ä–æ–≤
 * @version 1.0.0
 * @date 2025-06-18
 * @updated –û–±–µ—Ä—Ç–∫–∏ –Ω–∞–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ queries —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π world_id —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */

/** HISTORY:
 * v1.0.0 (2025-06-18): –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è world-aware queries –¥–ª—è Phase 2
 */

import { and, eq, isNull, desc, asc } from 'drizzle-orm'
import { db } from './index'
import { user, chat, artifact, message, suggestion } from './schema'
import { 
  getCurrentWorldContext, 
  createWorldFilter, 
  addWorldId,
  type WorldContext 
} from './world-context'

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –∏–∑–æ–ª—è—Ü–∏–∏ –º–∏—Ä–∞
 * 
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ world_id
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞
 */
export async function getWorldUsers(context: WorldContext = getCurrentWorldContext()) {
  const filter = createWorldFilter(context)
  
  return await db
    .select()
    .from(user)
    .where(eq(user.world_id, filter.world_id))
    .orderBy(asc(user.email))
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
 * 
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –º–∏—Ä–µ, –∏–Ω–∞—á–µ null
 */
export async function getWorldUserById(
  userId: string, 
  context: WorldContext = getCurrentWorldContext()
) {
  const filter = createWorldFilter(context)
  
  const users = await db
    .select()
    .from(user)
    .where(and(
      eq(user.id, userId),
      eq(user.world_id, filter.world_id)
    ))
    .limit(1)
  
  return users[0] || null
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º world_id
 * 
 * @param userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
export async function createWorldUser(
  userData: { email: string; password?: string },
  context: WorldContext = getCurrentWorldContext()
) {
  const dataWithWorld = addWorldId(userData, context)
  
  const [newUser] = await db
    .insert(user)
    .values(dataWithWorld)
    .returning()
  
  return newUser
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –º–∏—Ä–∞
 * 
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –ß–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º –º–∏—Ä–µ
 */
export async function getWorldUserChats(
  userId: string,
  context: WorldContext = getCurrentWorldContext()
) {
  const filter = createWorldFilter(context)
  
  return await db
    .select()
    .from(chat)
    .where(and(
      eq(chat.userId, userId),
      eq(chat.world_id, filter.world_id),
      isNull(chat.deletedAt)
    ))
    .orderBy(desc(chat.createdAt))
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
 * 
 * @param chatId - ID —á–∞—Ç–∞
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –ß–∞—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –º–∏—Ä–µ
 */
export async function getWorldChatById(
  chatId: string,
  context: WorldContext = getCurrentWorldContext()
) {
  const filter = createWorldFilter(context)
  
  const chats = await db
    .select()
    .from(chat)
    .where(and(
      eq(chat.id, chatId),
      eq(chat.world_id, filter.world_id),
      isNull(chat.deletedAt)
    ))
    .limit(1)
  
  return chats[0] || null
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º world_id
 * 
 * @param chatData - –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –°–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
 */
export async function createWorldChat(
  chatData: { 
    title: string
    userId: string
    createdAt: Date
    published_until?: Date | null
  },
  context: WorldContext = getCurrentWorldContext()
) {
  const dataWithWorld = addWorldId(chatData, context)
  
  const [newChat] = await db
    .insert(chat)
    .values(dataWithWorld)
    .returning()
  
  return newChat
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –º–∏—Ä–∞
 * 
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º –º–∏—Ä–µ
 */
export async function getWorldUserArtifacts(
  userId: string,
  context: WorldContext = getCurrentWorldContext()
) {
  const filter = createWorldFilter(context)
  
  return await db
    .select()
    .from(artifact)
    .where(and(
      eq(artifact.userId, userId),
      eq(artifact.world_id, filter.world_id),
      isNull(artifact.deletedAt)
    ))
    .orderBy(desc(artifact.createdAt))
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–∏
 * 
 * @param artifactId - ID –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
 * @param createdAt - Timestamp –≤–µ—Ä—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è latest)
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –º–∏—Ä–µ
 */
export async function getWorldArtifactById(
  artifactId: string,
  createdAt?: Date,
  context: WorldContext = getCurrentWorldContext()
) {
  const filter = createWorldFilter(context)
  
  let query = db
    .select()
    .from(artifact)
    .where(and(
      eq(artifact.id, artifactId),
      eq(artifact.world_id, filter.world_id),
      isNull(artifact.deletedAt)
    ))
  
  if (createdAt) {
    query = query.where(eq(artifact.createdAt, createdAt))
  } else {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
    query = query.orderBy(desc(artifact.createdAt))
  }
  
  const artifacts = await query.limit(1)
  return artifacts[0] || null
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º world_id
 * 
 * @param artifactData - –î–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
 */
export async function createWorldArtifact(
  artifactData: {
    id?: string
    title: string
    kind: 'text' | 'code' | 'image' | 'sheet' | 'site'
    userId: string
    authorId?: string
    content_text?: string
    content_url?: string
    content_site_definition?: any
    summary?: string
    createdAt: Date
  },
  context: WorldContext = getCurrentWorldContext()
) {
  const dataWithWorld = addWorldId(artifactData, context)
  
  const [newArtifact] = await db
    .insert(artifact)
    .values(dataWithWorld)
    .returning()
  
  return newArtifact
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –º–∏—Ä–∞
 * 
 * @param chatId - ID —á–∞—Ç–∞
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –º–∏—Ä–µ
 */
export async function getWorldChatMessages(
  chatId: string,
  context: WorldContext = getCurrentWorldContext()
) {
  const filter = createWorldFilter(context)
  
  return await db
    .select()
    .from(message)
    .where(and(
      eq(message.chatId, chatId),
      eq(message.world_id, filter.world_id)
    ))
    .orderBy(asc(message.createdAt))
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º world_id
 * 
 * @param messageData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –°–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export async function createWorldMessage(
  messageData: {
    chatId: string
    role: string
    parts: any
    attachments: any
    createdAt: Date
  },
  context: WorldContext = getCurrentWorldContext()
) {
  const dataWithWorld = addWorldId(messageData, context)
  
  const [newMessage] = await db
    .insert(message)
    .values(dataWithWorld)
    .returning()
  
  return newMessage
}

/**
 * @description –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞
 * 
 * @feature –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ cleanup –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
 * @param worldId - ID –º–∏—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
 * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */
export async function cleanupWorldData(worldId: string) {
  console.log(`üßπ Cleaning up world data: ${worldId}`)
  
  // –£–¥–∞–ª—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const deletedMessages = await db
    .delete(message)
    .where(eq(message.world_id, worldId))
    .returning({ id: message.id })
  
  const deletedSuggestions = await db
    .delete(suggestion)
    .where(eq(suggestion.world_id, worldId))
    .returning({ id: suggestion.id })
  
  const deletedArtifacts = await db
    .delete(artifact)
    .where(eq(artifact.world_id, worldId))
    .returning({ id: artifact.id })
  
  const deletedChats = await db
    .delete(chat)
    .where(eq(chat.world_id, worldId))
    .returning({ id: chat.id })
  
  const deletedUsers = await db
    .delete(user)
    .where(eq(user.world_id, worldId))
    .returning({ id: user.id })
  
  const stats = {
    users: deletedUsers.length,
    chats: deletedChats.length,
    artifacts: deletedArtifacts.length,
    messages: deletedMessages.length,
    suggestions: deletedSuggestions.length
  }
  
  console.log(`‚úÖ World ${worldId} cleanup complete:`, stats)
  return stats
}

/**
 * @description –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–ª—è—Ü–∏—é –º–∏—Ä–∞ - –Ω–µ—Ç cross-contamination
 * 
 * @feature Debug —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–ª—è—Ü–∏–∏
 * @param worldId - ID –º–∏—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏—Ä–µ
 */
export async function validateWorldIsolation(worldId: string) {
  const stats = {
    users: await db.select().from(user).where(eq(user.world_id, worldId)),
    chats: await db.select().from(chat).where(eq(chat.world_id, worldId)),
    artifacts: await db.select().from(artifact).where(eq(artifact.world_id, worldId)),
    messages: await db.select().from(message).where(eq(message.world_id, worldId)),
    suggestions: await db.select().from(suggestion).where(eq(suggestion.world_id, worldId))
  }
  
  console.log(`üîç World ${worldId} isolation check:`, {
    users: stats.users.length,
    chats: stats.chats.length,
    artifacts: stats.artifacts.length,
    messages: stats.messages.length,
    suggestions: stats.suggestions.length
  })
  
  return stats
}

// END OF: lib/db/world-queries.ts
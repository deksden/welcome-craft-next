/**
 * @file lib/db/world-context.ts
 * @description –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
 * @version 1.3.0
 * @date 2025-06-29
 * @updated PHOENIX PROJECT Step 1 - APP_STAGE —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è test environment
 */

/** HISTORY:
 * v1.3.0 (2025-06-29): PHOENIX PROJECT Step 1 - –ó–∞–º–µ–Ω–∞ NODE_ENV –ª–æ–≥–∏–∫–∏ –Ω–∞ APP_STAGE (LOCAL/BETA/PROD) –≤ getWorldContextFromRequest
 * v1.2.0 (2025-06-28): UNIFIED COOKIE ARCHITECTURE - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ, —É–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö cookies
 * v1.1.0 (2025-06-28): –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –ú–ò–†–ù–û–ô –°–ò–°–¢–ï–ú–´ - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ cookies (test-session ‚Üí world_id ‚Üí world_id_fallback ‚Üí test-world-id)
 * v1.0.0 (2025-06-18): –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è world context –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { cookies } from 'next/headers.js'
import type { WorldId } from '@/tests/helpers/worlds.config'

/**
 * @description –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á cookie –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏—Ä–∞ (–≤ —Å–æ—Å—Ç–∞–≤–µ test-session)
 */
export const WORLD_COOKIE_KEY = 'test-session'

/**
 * @description –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ world cookie (4 —á–∞—Å–∞)
 */
export const WORLD_COOKIE_TTL = 4 * 60 * 60 * 1000

/**
 * @description –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
export interface WorldContext {
  /** ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏—Ä–∞ –∏–ª–∏ null –¥–ª—è production */
  worldId: WorldId | null
  /** –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ */
  isTestMode: boolean
  /** –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö */
  isolationPrefix: string | null
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞ –∏–∑ cookies (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * 
 * @feature Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ cookies –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
 * @feature –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ production (null world_id)
 * @returns –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ DB –∑–∞–ø—Ä–æ—Å–∞—Ö
 */
export function getCurrentWorldContextSync(): WorldContext {
  // –í —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º production –∫–æ–Ω—Ç–µ–∫—Å—Ç
  return {
    worldId: null,
    isTestMode: false,
    isolationPrefix: null
  }
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞ –∏–∑ cookies (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * 
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏—Ä–∞
 * @feature –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ production (null world_id)
 * @returns –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ DB –∑–∞–ø—Ä–æ—Å–∞—Ö
 */
export async function getCurrentWorldContext(): Promise<WorldContext> {
  let worldId: WorldId | null = null
  
  try {
    // APP_STAGE-based environment detection (PHOENIX PROJECT)
    const stage = process.env.APP_STAGE || 'PROD'
    if (stage === 'LOCAL' || stage === 'BETA') {
      const cookieStore = await cookies()
      const worldCookie = cookieStore.get(WORLD_COOKIE_KEY)
      
      if (worldCookie?.value) {
        worldId = worldCookie.value as WorldId
      }
    }
  } catch (error) {
    // –í server components cookies() –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    // –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ worldId –æ—Å—Ç–∞–µ—Ç—Å—è null (production mode)
    console.log('World context: cookies not available, using production mode')
  }
  
  const isTestMode = worldId !== null
  const isolationPrefix = worldId ? `test-${worldId}` : null
  
  return {
    worldId,
    isTestMode,
    isolationPrefix
  }
}

/**
 * @description –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∏—Ä —á–µ—Ä–µ–∑ cookie
 * 
 * @feature –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑–æ–ª—è—Ü–∏–∏
 * @param worldId - ID –º–∏—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, null –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
 */
export async function setWorldContext(worldId: WorldId | null): Promise<void> {
  const cookieStore = await cookies()
  
  if (worldId) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å TTL
    cookieStore.set(WORLD_COOKIE_KEY, worldId, {
      httpOnly: false, // –î–æ—Å—Ç—É–ø –∏–∑ JavaScript –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      secure: false, // HTTP –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      sameSite: 'lax',
      maxAge: WORLD_COOKIE_TTL,
      path: '/'
    })
  } else {
    // –£–¥–∞–ª—è–µ–º cookie
    cookieStore.delete(WORLD_COOKIE_KEY)
  }
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å WHERE —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ world_id
 * 
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞ (–ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ getCurrentWorldContext)
 * @returns –û–±—ä–µ–∫—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Drizzle WHERE —É—Å–ª–æ–≤–∏—è—Ö
 */
export function createWorldFilter(context?: WorldContext) {
  if (!context || !context.isTestMode) {
    // Production mode - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –±–µ–∑ world_id
    return { world_id: null }
  } else {
    // Test mode - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∏—Ä–∞
    return { world_id: context.worldId }
  }
}

/**
 * @description –î–æ–±–∞–≤–∏—Ç—å world_id –∫ –¥–∞–Ω–Ω—ã–º –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ –ë–î
 * 
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π
 * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞
 * @returns –î–∞–Ω–Ω—ã–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º world_id
 */
export function addWorldId<T extends Record<string, any>>(
  data: T, 
  context?: WorldContext
): T & { world_id: string | null } {
  return {
    ...data,
    world_id: context?.worldId || null
  }
}

/**
 * @description –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
 * 
 * @feature –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ cross-world –¥–æ—Å—Ç—É–ø–∞
 * @param recordWorldId - world_id –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
 * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞
 * @returns true –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
 */
export function canAccessRecord(
  recordWorldId: string | null, 
  context?: WorldContext
): boolean {
  if (!context || !context.isTestMode) {
    // Production mode - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ production –¥–∞–Ω–Ω—ã–º
    return recordWorldId === null
  } else {
    // Test mode - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –¥–∞–Ω–Ω—ã–º —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞
    return recordWorldId === context.worldId
  }
}

/**
 * @description Middleware helper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –º–∏—Ä–∞
 * 
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –≤ API routes
 * @feature –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —á—Ç–µ–Ω–∏—è cookies –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –º–∏—Ä–æ–≤
 * @param request - Next.js Request –æ–±—ä–µ–∫—Ç
 * @returns –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
 */
export function getWorldContextFromRequest(request: Request): WorldContext {
  let worldId: WorldId | null = null
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º world_id –∏–∑ cookie –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    const cookieHeader = request.headers.get('cookie')
    
    // Enhanced test environment detection to match middleware
    const hasPlaywrightPort = !!process.env.PLAYWRIGHT_PORT
    const stage = process.env.APP_STAGE || 'PROD'
    const isTestEnv = process.env.NODE_ENV === 'test' || 
                      process.env.PLAYWRIGHT === 'true' || 
                      hasPlaywrightPort ||
                      stage === 'LOCAL' || 
                      stage === 'BETA'
    const isWorldUIEnabled = process.env.ENABLE_TEST_WORLDS_UI === 'true'
    
    console.log('üåç getWorldContextFromRequest DEBUG:', {
      hasCookieHeader: !!cookieHeader,
      stage,
      isTestEnv,
      isWorldUIEnabled,
      APP_STAGE: process.env.APP_STAGE,
      ENABLE_TEST_WORLDS_UI: process.env.ENABLE_TEST_WORLDS_UI
    })
    
    if (cookieHeader && (isTestEnv || isWorldUIEnabled)) {
      const cookies = cookieHeader.split(';').reduce((acc, cookie) => {
        const [key, value] = cookie.trim().split('=')
        acc[key] = value
        return acc
      }, {} as Record<string, string>)
      
      console.log('üåç Available cookies:', Object.keys(cookies))
      
      // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: —á–∏—Ç–∞–µ–º worldId –∏–∑ test-session cookie
      if (cookies[WORLD_COOKIE_KEY]) {
        try {
          const sessionData = JSON.parse(decodeURIComponent(cookies[WORLD_COOKIE_KEY]))
          if (sessionData.worldId) {
            worldId = sessionData.worldId as WorldId
            console.log('üåç Found worldId in test-session:', worldId)
          }
        } catch (error) {
          console.warn('üåç Failed to parse test-session cookie:', error)
        }
      }
      
      // Fallback - –ø—Ä–æ–±—É–µ–º test-session-fallback  
      if (!worldId && cookies['test-session-fallback']) {
        try {
          const sessionData = JSON.parse(decodeURIComponent(cookies['test-session-fallback']))
          if (sessionData.worldId) {
            worldId = sessionData.worldId as WorldId
            console.log('üåç Found worldId in test-session-fallback:', worldId)
          }
        } catch (error) {
          console.warn('üåç Failed to parse test-session-fallback cookie:', error)
        }
      }
    }
  } catch (error) {
    console.warn('Failed to parse world context from request:', error)
  }
  
  const isTestMode = worldId !== null
  const isolationPrefix = worldId ? `test-${worldId}` : null
  
  console.log('üåç Final world context:', {
    worldId,
    isTestMode,
    isolationPrefix
  })
  
  return {
    worldId,
    isTestMode,
    isolationPrefix
  }
}

/**
 * @description –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∏—Ä–∞
 */
export function debugWorldContext(context?: WorldContext): void {
  console.log('üåç World Context Debug:', {
    worldId: context?.worldId,
    isTestMode: context?.isTestMode,
    isolationPrefix: context?.isolationPrefix,
    nodeEnv: process.env.NODE_ENV,
    playwrightTest: process.env.PLAYWRIGHT_TEST
  })
}

// END OF: lib/db/world-context.ts
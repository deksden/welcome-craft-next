/**
 * @file lib/db/dynamic-world-context.ts
 * @description PHOENIX PROJECT - Dynamic World Context —Å database-driven –º–∏—Ä–∞–º–∏
 * @version 1.0.0
 * @date 2025-06-29
 * @updated PHOENIX PROJECT Step 3 - Database-driven world management –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
 */

/** HISTORY:
 * v1.0.0 (2025-06-29): PHOENIX PROJECT Step 3 - –°–æ–∑–¥–∞–Ω–∏–µ dynamic world context –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WorldMeta –ë–î
 */

import { db } from '@/lib/db'
import { worldMeta } from '@/lib/db/schema'
import { eq, and } from 'drizzle-orm'
import type { WorldMeta } from '@/lib/db/schema'
import type { WorldId } from '@/tests/helpers/worlds.config'

/**
 * @description –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞ —Å database-driven –¥–∞–Ω–Ω—ã–º–∏
 */
export interface DynamicWorldContext {
  /** ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏—Ä–∞ –∏–ª–∏ null –¥–ª—è production */
  worldId: WorldId | null
  /** –í–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ */
  isTestMode: boolean
  /** –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö */
  isolationPrefix: string | null
  /** –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ä–µ –∏–∑ –ë–î (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞) */
  worldMeta?: WorldMeta
  /** –û–∫—Ä—É–∂–µ–Ω–∏–µ –º–∏—Ä–∞ */
  environment: 'LOCAL' | 'BETA' | 'PROD'
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å dynamic world context —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
 * 
 * @feature PHOENIX PROJECT - Database-driven world resolution
 * @feature –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ APP_STAGE
 * @feature –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏—Ä–æ–≤ –∫–∞–∫ fallback
 * @param worldId - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π ID –º–∏—Ä–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è
 * @returns Dynamic World Context —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ WorldMeta –ë–î
 */
export async function getDynamicWorldContext(
  worldId?: WorldId | null
): Promise<DynamicWorldContext> {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ APP_STAGE
  const stage = process.env.APP_STAGE || 'PROD'
  const environment = stage as 'LOCAL' | 'BETA' | 'PROD'
  const isTestEnv = stage === 'LOCAL' || stage === 'BETA'
  
  // –í production –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –∫–æ–Ω—Ç–µ–∫—Å—Ç
  if (!isTestEnv && !worldId) {
    return {
      worldId: null,
      isTestMode: false,
      isolationPrefix: null,
      environment
    }
  }

  let resolvedWorldId: WorldId | null = worldId || null
  let worldMetaRecord: WorldMeta | undefined

  try {
    // –ï—Å–ª–∏ –º–∏—Ä –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ cookies
    if (!resolvedWorldId && isTestEnv) {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å cookie resolution –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ world-context.ts
      // –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      resolvedWorldId = null
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∏—Ä–∞ –∏–∑ –ë–î –µ—Å–ª–∏ ID –∏–∑–≤–µ—Å—Ç–µ–Ω
    if (resolvedWorldId) {
      const [worldRecord] = await db
        .select()
        .from(worldMeta)
        .where(
          and(
            eq(worldMeta.id, resolvedWorldId),
            eq(worldMeta.isActive, true),
            eq(worldMeta.environment, environment)
          )
        )
        .limit(1)

      if (worldRecord) {
        worldMetaRecord = worldRecord
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await db
          .update(worldMeta)
          .set({ 
            lastUsedAt: new Date(),
            usageCount: worldRecord.usageCount + 1
          })
          .where(eq(worldMeta.id, resolvedWorldId))

        console.log(`üåç PHOENIX: Loaded world '${resolvedWorldId}' from database`, {
          name: worldRecord.name,
          environment: worldRecord.environment,
          usageCount: worldRecord.usageCount + 1
        })
      } else {
        console.warn(`üåç PHOENIX: World '${resolvedWorldId}' not found in database or inactive`)
        resolvedWorldId = null
      }
    }

  } catch (error) {
    console.error('üåç PHOENIX: Error loading world from database:', error)
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ë–î –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback context
    resolvedWorldId = null
  }

  const isTestMode = resolvedWorldId !== null
  const isolationPrefix = resolvedWorldId ? `test-${resolvedWorldId}` : null

  return {
    worldId: resolvedWorldId,
    isTestMode,
    isolationPrefix,
    worldMeta: worldMetaRecord,
    environment
  }
}

/**
 * @description –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * 
 * @feature PHOENIX PROJECT - Environment-aware world listing
 * @param category - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (UC, REGRESSION, etc.)
 * @param activeOnly - –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Ä—ã
 * @returns –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Ä–æ–≤
 */
export async function getAvailableWorlds(
  category?: string,
  activeOnly = true
): Promise<WorldMeta[]> {
  try {
    const stage = process.env.APP_STAGE || 'PROD'
    const environment = stage as 'LOCAL' | 'BETA' | 'PROD'

    const conditions = [
      eq(worldMeta.environment, environment)
    ]

    if (activeOnly) {
      conditions.push(eq(worldMeta.isActive, true))
    }

    if (category) {
      conditions.push(eq(worldMeta.category, category))
    }

    const worlds = await db
      .select()
      .from(worldMeta)
      .where(and(...conditions))
      .orderBy(worldMeta.name)

    console.log(`üåç PHOENIX: Retrieved ${worlds.length} available worlds`, {
      environment,
      category,
      activeOnly
    })

    return worlds

  } catch (error) {
    console.error('üåç PHOENIX: Error retrieving available worlds:', error)
    return []
  }
}

/**
 * @description –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∏—Ä –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
 * 
 * @feature PHOENIX PROJECT - Runtime world creation
 * @param worldDefinition - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∏—Ä–∞
 * @returns –°–æ–∑–¥–∞–Ω–Ω—ã–π WorldMeta record
 */
export async function createDynamicWorld(worldDefinition: {
  id: string
  name: string
  description: string
  users: any[]
  artifacts: any[]
  chats: any[]
  settings: any
  category?: string
  tags?: string[]
}): Promise<WorldMeta> {
  try {
    const stage = process.env.APP_STAGE || 'PROD'
    const environment = stage as 'LOCAL' | 'BETA' | 'PROD'

    const newWorld = {
      ...worldDefinition,
      environment,
      dependencies: [],
      isActive: true,
      isTemplate: false,
      autoCleanup: true,
      cleanupAfterHours: 24,
      version: '1.0.0',
      isolationLevel: 'FULL' as const,
      tags: worldDefinition.tags || [],
      category: worldDefinition.category || 'GENERAL',
    }

    const [created] = await db
      .insert(worldMeta)
      .values(newWorld)
      .returning()

    console.log(`üåç PHOENIX: Created dynamic world '${created.id}'`, {
      name: created.name,
      environment: created.environment
    })

    return created

  } catch (error) {
    console.error('üåç PHOENIX: Error creating dynamic world:', error)
    throw error
  }
}

/**
 * @description –£–¥–∞–ª–∏—Ç—å –º–∏—Ä –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * 
 * @feature PHOENIX PROJECT - World cleanup and removal
 * @param worldId - ID –º–∏—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns Success status
 */
export async function cleanupWorld(worldId: string): Promise<boolean> {
  try {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å world_id –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    // (User, Chat, Message_v2, Artifact, Suggestion)
    
    // –ü–æ–∫–∞ —á—Ç–æ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å –≤ WorldMeta
    await db
      .delete(worldMeta)
      .where(eq(worldMeta.id, worldId))

    console.log(`üåç PHOENIX: Cleaned up world '${worldId}'`)
    return true

  } catch (error) {
    console.error(`üåç PHOENIX: Error cleaning up world '${worldId}':`, error)
    return false
  }
}

// END OF: lib/db/dynamic-world-context.ts
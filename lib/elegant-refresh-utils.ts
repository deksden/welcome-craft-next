/**
 * @file lib/elegant-refresh-utils.ts
 * @description –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –±–µ–∑ page.reload()
 * @version 1.0.0
 * @date 2025-06-27
 * @updated –°–æ–∑–¥–∞–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ—Å–ª–µ API –æ–ø–µ—Ä–∞—Ü–∏–π
 */

/** HISTORY:
 * v1.0.0 (2025-06-27): –°–æ–∑–¥–∞–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

/**
 * @description –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 * @feature –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
 * @feature –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ window events –∏ SWR revalidation
 * @param options –û–ø—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export async function triggerArtifactListRefresh(options?: {
  source?: string
  artifactId?: string
  operation?: 'create' | 'update' | 'delete'
  showNotification?: boolean
}): Promise<void> {
  const { 
    source = 'api-operation', 
    artifactId, 
    operation = 'create',
    showNotification = false
  } = options || {}
  
  console.log(`üîÑ Triggering global artifact list refresh (${operation} from ${source})...`)
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º custom event –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª—É—à–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const refreshEvent = new CustomEvent('artifact-list-refresh', {
      detail: { 
        timestamp: Date.now(),
        source,
        artifactId,
        operation,
        showNotification
      }
    })
    
    window.dispatchEvent(refreshEvent)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º focus event –¥–ª—è SWR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å revalidateOnFocus
    setTimeout(() => {
      window.dispatchEvent(new Event('focus'))
    }, 100)
    
    console.log(`‚úÖ Global artifact list refresh triggered successfully`)
    
  } catch (error) {
    console.error(`‚ùå Failed to trigger global artifact list refresh:`, error)
  }
}

/**
 * @description –•–µ–ª–ø–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö API –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
 * @param response Response –æ–±—ä–µ–∫—Ç –æ—Ç fetch API
 * @param operation –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param artifactData –î–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function handlePostArtifactOperation(
  response: Response,
  operation: 'create' | 'update' | 'delete',
  artifactData?: { id?: string; title?: string }
): Promise<void> {
  if (response.ok) {
    console.log(`‚úÖ Artifact ${operation} successful, triggering list refresh...`)
    
    await triggerArtifactListRefresh({
      source: 'api-success',
      artifactId: artifactData?.id,
      operation,
      showNotification: true
    })
  } else {
    console.error(`‚ùå Artifact ${operation} failed with status:`, response.status)
  }
}

/**
 * @description Server Action —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * @param success –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param operation –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param artifactData –î–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
 */
export async function handlePostServerAction(
  success: boolean,
  operation: 'create' | 'update' | 'delete',
  artifactData?: { id?: string; title?: string }
): Promise<void> {
  if (success) {
    console.log(`‚úÖ Server action ${operation} successful, triggering list refresh...`)
    
    await triggerArtifactListRefresh({
      source: 'server-action',
      artifactId: artifactData?.id,
      operation,
      showNotification: false // Server actions –æ–±—ã—á–Ω–æ —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    })
  }
}

/**
 * @description Debounced –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
class DebouncedRefreshManager {
  private timeoutId: NodeJS.Timeout | null = null
  private pendingRefreshes: Array<{
    source: string
    artifactId?: string
    operation: 'create' | 'update' | 'delete'
  }> = []

  /**
   * @description –î–æ–±–∞–≤–ª—è–µ—Ç refresh –≤ –æ—á–µ—Ä–µ–¥—å —Å debounce
   * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã refresh
   * @param delay –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  public schedule(
    options: {
      source?: string
      artifactId?: string
      operation?: 'create' | 'update' | 'delete'
    },
    delay = 1000
  ): void {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    this.pendingRefreshes.push({
      source: options.source || 'debounced',
      artifactId: options.artifactId,
      operation: options.operation || 'create'
    })

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
    if (this.timeoutId) {
      clearTimeout(this.timeoutId)
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π timeout
    this.timeoutId = setTimeout(async () => {
      await this.executePendingRefreshes()
    }, delay)
  }

  private async executePendingRefreshes(): Promise<void> {
    if (this.pendingRefreshes.length === 0) return

    console.log(`üîÑ Executing ${this.pendingRefreshes.length} debounced refreshes...`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    const operations = this.pendingRefreshes.reduce((acc, refresh) => {
      acc[refresh.operation] = (acc[refresh.operation] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π refresh
    await triggerArtifactListRefresh({
      source: 'debounced-batch',
      operation: 'update', // –û–±—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è batch
      showNotification: true
    })

    console.log(`‚úÖ Debounced refresh completed for operations:`, operations)

    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    this.pendingRefreshes = []
    this.timeoutId = null
  }
}

export const debouncedRefreshManager = new DebouncedRefreshManager()

/**
 * @description Convenience —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è debounced refresh
 */
export function scheduleArtifactListRefresh(options?: {
  source?: string
  artifactId?: string
  operation?: 'create' | 'update' | 'delete'
  delay?: number
}): void {
  const { delay = 1000, ...refreshOptions } = options || {}
  debouncedRefreshManager.schedule(refreshOptions, delay)
}

// END OF: lib/elegant-refresh-utils.ts
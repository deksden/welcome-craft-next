/**
 * @file lib/artifact-content-utils.ts
 * @description UC-10 COMPATIBILITY LAYER - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
 * @version 2.0.1
 * @date 2025-06-28
 * @updated BUG-043 FIX: –£–ª—É—á—à–µ–Ω error handling –≤ normalizeArtifactForAPI + –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ undefined kind
 */

import type { Artifact as ArtifactSchema } from '@/lib/db/schema'
import type { Artifact as ArtifactClient } from '@/lib/db/types'
import type { ArtifactKind, ArtifactApiResponse } from '@/lib/types'

/**
 * BACKWARD COMPATIBILITY: –≠–º—É–ª—è—Ü–∏—è getDisplayContent –¥–ª—è —Å—Ç–∞—Ä—ã—Ö sparse columns
 * TODO: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è UC-10 —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ artifact-tools.ts
 */
export function getDisplayContent(artifact: ArtifactSchema): string {
  // –í UC-10 –∫–æ–Ω—Ç–µ–Ω—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö, –Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ actual content –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ artifact-tools
  return ''
}

/**
 * BACKWARD COMPATIBILITY: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ –ë–î –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
 * –í UC-10 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ content –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ artifact-tools
 */
export async function normalizeArtifactForAPI(dbArtifact: ArtifactSchema | ArtifactClient): Promise<ArtifactApiResponse> {
  let content = ''
  
  try {
    // UC-10: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const { loadArtifact } = await import('@/artifacts/kinds/artifact-tools')
    const loadedContent = await loadArtifact(dbArtifact.kind, dbArtifact.id, dbArtifact.createdAt)
    
    if (loadedContent) {
      // –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ content –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
      switch (dbArtifact.kind) {
        case 'text':
          // textTool.load –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º content
          content = loadedContent.content || ''
          break
        case 'code':
          // codeTool.load –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
          content = typeof loadedContent === 'string' ? loadedContent : ''
          break
        case 'image':
          content = loadedContent.url || ''
          break
        case 'site':
          content = JSON.stringify(loadedContent.siteDefinition || {})
          break
        case 'sheet':
          content = loadedContent.content || ''
          break
        default:
          // –î–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
          content = typeof loadedContent === 'string' ? loadedContent : JSON.stringify(loadedContent)
      }
    } else {
      console.warn(`üîç BUG-043 DEBUG: No content found for artifact ${dbArtifact.id} (${dbArtifact.kind}), but continuing with empty content`)
      content = ''
    }
  } catch (error) {
    console.error(`üîç BUG-043 DEBUG: Error loading artifact content for ${dbArtifact.id} (${dbArtifact.kind}):`, error)
    // CRITICAL: Fallback —Å –ø—É—Å—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, –Ω–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ metadata –≤–∫–ª—é—á–∞—è kind
    content = ''
  }
  
  // Handle both schema (snake_case) and client (camelCase) types
  const worldId = 'worldId' in dbArtifact ? dbArtifact.worldId : (dbArtifact as any).world_id
  const publicationState = 'publicationState' in dbArtifact ? dbArtifact.publicationState : (dbArtifact as any).publication_state || []
  
  const result = {
    id: dbArtifact.id,
    createdAt: dbArtifact.createdAt,
    title: dbArtifact.title,
    summary: dbArtifact.summary,
    kind: dbArtifact.kind,
    userId: dbArtifact.userId,
    authorId: dbArtifact.authorId,
    deletedAt: dbArtifact.deletedAt,
    worldId,
    publicationState,
    content
  }
  
  console.log(`üîç BUG-043 DEBUG: normalizeArtifactForAPI returning:`, {
    id: result.id,
    title: result.title,
    kind: result.kind,
    hasContent: !!result.content,
    allKeys: Object.keys(result)
  })
  
  return result
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
 */
export function validateArtifactContent(content: string, kind: ArtifactKind): {
  isValid: boolean
  error?: string
} {
  if (!content) {
    return { isValid: false, error: 'Content is required' }
  }

  switch (kind) {
    case 'text':
    case 'code':
    case 'sheet':
      return { isValid: true }
    
    case 'image':
      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
      try {
        new URL(content)
        return { isValid: true }
      } catch {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º data: URL –¥–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (content.startsWith('data:image/')) {
          return { isValid: true }
        }
        return { 
          isValid: false, 
          error: 'Image content must be a valid URL or data URI' 
        }
      }
    
    case 'site':
      try {
        JSON.parse(content)
        return { isValid: true }
      } catch {
        return { 
          isValid: false, 
          error: 'Site content must be valid JSON' 
        }
      }
    
    default:
      return { isValid: false, error: `Unknown artifact kind: ${kind}` }
  }
}
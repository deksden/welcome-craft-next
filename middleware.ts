/**
 * @file middleware.ts
 * @description Middleware –¥–ª—è –º—É–ª—å—Ç–∏–¥–æ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã WelcomeCraft
 * @version 2.1.0
 * 
 * –ú–£–õ–¨–¢–ò–î–û–ú–ï–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
 * - app.localhost:port - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
 *   Routes: /app/* (–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏–∑ / –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ app.localhost)
 *   Auth: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ NextAuth.js –∏–ª–∏ test-session
 *   
 * - localhost:port - –ø—É–±–ª–∏—á–Ω—ã–π —Å–∞–π—Ç (landing page)
 *   Routes: /site/* (–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏–∑ / –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ localhost)
 *   Auth: –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
 * 
 * –í–ê–ñ–ù–û: Cookies –∏ auth session –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–∂–¥—É –¥–æ–º–µ–Ω–∞–º–∏!
 * –í —Ç–µ—Å—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è test-session cookies —Å domain='.localhost'  
 * 
 * –ò–°–¢–û–†–ò–Ø:
 * v2.1.0 (2025-06-25): –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º admin –¥–æ–º–µ–Ω–∞ –≤ production —Ä–µ–∂–∏–º–µ –¥–ª—è localhost
 * v2.0.0 (2025-06-15): –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö sessions, —É–ª—É—á—à–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
 * v1.0.0: –ë–∞–∑–æ–≤–∞—è –º—É–ª—å—Ç–∏–¥–æ–º–µ–Ω–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
 */

import { type NextRequest, NextResponse } from 'next/server'
import { getToken } from 'next-auth/jwt'
import { isDevelopmentEnvironment } from './lib/constants'

export async function middleware (request: NextRequest) {
  const url = request.nextUrl
  const hostname = request.headers.get('host') ?? 'localhost:3000'

  // World context logging - detailed diagnostics with fallback support
  let worldCookie = request.cookies.get('world_id')
  const fallbackWorldCookie = request.cookies.get('world_id_fallback')
  
  // Get all cookie names for diagnostics
  const allCookieNames: string[] = []
  request.cookies.getAll().forEach(cookie => {
    allCookieNames.push(cookie.name)
  })
  
  // Use fallback if main cookie is not available
  if (!worldCookie && fallbackWorldCookie) {
    worldCookie = fallbackWorldCookie
    console.log('üåç Using fallback world cookie')
  }
  
  console.log('üåç MIDDLEWARE DIAGNOSTIC:', {
    pathname: url.pathname,
    hostname,
    worldCookie: worldCookie ? worldCookie.value : 'NOT_FOUND',
    fallbackWorldCookie: fallbackWorldCookie ? fallbackWorldCookie.value : 'NOT_FOUND',
    allCookieNames,
    cookieCount: allCookieNames.length
  })
  
  if (worldCookie) {
    console.log(`üåç Request to ${url.pathname} in world: ${worldCookie.value}`)
  } else {
    console.log(`üåç Request to ${url.pathname} - NO WORLD COOKIE (checked both world_id and world_id_fallback)`)
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í production —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å app.localhost —Å –ø–æ—Ä—Ç–æ–º
  const isProductionRemote = process.env.NODE_ENV === 'production' && !hostname.includes('localhost')
  const isAppDomain = isProductionRemote
    ? hostname === 'app.welcome-onboard.ru'
    : hostname.startsWith('app.localhost')

  // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  if (isAppDomain) {
    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ ---
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,
    // –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –µ–µ, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—è —Ç–æ–∫–µ–Ω.
    if (url.pathname === '/login' || url.pathname === '/register') {
      url.pathname = `/app${url.pathname}`
      return NextResponse.rewrite(url)
    }
    // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π cookie –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    const testHeader = request.headers.get('X-Test-Environment');
    const hasPlaywrightPort = !!process.env.PLAYWRIGHT_PORT;
    const isTestEnv = process.env.NODE_ENV === 'test' || 
                      process.env.PLAYWRIGHT === 'true' || 
                      testHeader === 'playwright' ||
                      hasPlaywrightPort; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º –µ—Å–ª–∏ –µ—Å—Ç—å PLAYWRIGHT_PORT
    
    let token = null;
    
    if (isTestEnv) {
      // –í —Ç–µ—Å—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ cookies (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–¥–æ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
      // –°–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π cookie –¥–ª—è .localhost –¥–æ–º–µ–Ω–∞
      let testSession = request.cookies.get('test-session');
      // Fallback - cookie –±–µ–∑ domain –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (!testSession) {
        testSession = request.cookies.get('test-session-fallback');
      }

      if (testSession) {
        try {
          const sessionData = JSON.parse(testSession.value);
          if (sessionData.user && new Date(sessionData.expires) > new Date()) {
            // –≠–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É NextAuth —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            token = {
              sub: sessionData.user.id,
              email: sessionData.user.email,
              name: sessionData.user.name,
              type: sessionData.user.type,
              exp: Math.floor(new Date(sessionData.expires).getTime() / 1000)
            };
            console.log('‚úÖ Test session token created for:', sessionData.user.email);
          }
        } catch (error) {
          console.log('‚ùå Error parsing test session:', error);
        }
      } else {
        console.log('‚ö†Ô∏è No test session cookies found in middleware');
      }
    }
    
    // Fallback to regular NextAuth token if no test session
    if (!token) {
      token = await getToken({
        req: request,
        secret: process.env.AUTH_SECRET,
        secureCookie: !isDevelopmentEnvironment,
      });
    }

    // –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ü–∏–∫–ª –¥–ª—è /login
    if (!token) {
      const redirectUrl = encodeURIComponent(request.url)
      return NextResponse.redirect(new URL(`/login?callbackUrl=${redirectUrl}`, request.url))
    }

    if (token.type === 'regular' && ['/login', '/register'].includes(url.pathname)) {
      // –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /login –≤—ã—à–µ,
      // –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
      return NextResponse.redirect(new URL('/', request.url))
    }

    // –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é app –¥–ª—è –º—É–ª—å—Ç–∏–¥–æ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    url.pathname = `/app${url.pathname}`
    return NextResponse.rewrite(url)
  }

  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π —Å–∞–π—Ç)
  url.pathname = `/site${url.pathname}`
  return NextResponse.rewrite(url)
}

export const config = {
  // –ò—Å–∫–ª—é—á–∞–µ–º –í–°–ï api —Ä–æ—É—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
  ],
}

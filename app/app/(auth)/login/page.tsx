/**
 * @file app/(auth)/login/page.tsx
 * @description –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @version 1.2.0
 * @date 2025-06-18
 * @updated –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø—Ü–∏—è "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ü—Ä–æ–¥–∞–∫—à–Ω)" –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞.
 */

/** HISTORY:
 * v1.2.0 (2025-06-18): –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø—Ü–∏—è "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ü—Ä–æ–¥–∞–∫—à–Ω)" –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∏—Ä–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω BUG-008.
 * v1.1.0 (2025-06-18): –î–æ–±–∞–≤–ª–µ–Ω world selector –ø—Ä–∏ ENABLE_TEST_WORLDS_UI=true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 * v1.0.1 (2025-06-07): –ó–∞–º–µ–Ω–µ–Ω router.refresh() –Ω–∞ router.push('/') –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞.
 * v1.0.0 (2025-05-25): –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è.
 */
'use client'

import Link from 'next/link'
import { useRouter } from 'next/navigation.js'
import { useActionState, useEffect, useState } from 'react'
import { toast } from '@/components/toast'

import { AuthForm } from '@/components/auth-form'
import { SubmitButton } from '@/components/submit-button'

import { login, type LoginActionState } from '../actions'
import { QuickLoginPanel } from '@/components/phoenix/quick-login-panel'

// World selector for testing
const WORLDS = {
  PRODUCTION: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ü—Ä–æ–¥–∞–∫—à–Ω)',
  CLEAN_USER_WORKSPACE: '–ß–∏—Å—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
  SITE_READY_FOR_PUBLICATION: '–°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', 
  CONTENT_LIBRARY_BASE: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
  DEMO_PREPARATION: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞',
  ENTERPRISE_ONBOARDING: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥'
} as const

type WorldId = keyof typeof WORLDS

// World selection UI enabled for LOCAL and BETA stages only
const isTestWorldsUIEnabled = process.env.NEXT_PUBLIC_APP_STAGE === 'LOCAL' || 
  process.env.NEXT_PUBLIC_APP_STAGE === 'BETA'

export default function Page () {
  const router = useRouter()

  const [email, setEmail] = useState('')
  const [isSuccessful, setIsSuccessful] = useState(false)
  const [selectedWorld, setSelectedWorld] = useState<WorldId>('PRODUCTION')

  const [state, formAction] = useActionState<LoginActionState, FormData>(
    login,
    {
      status: 'idle',
    },
  )

  useEffect(() => {
    if (state.status === 'failed') {
      toast({
        type: 'error',
        description: 'Invalid credentials!',
      })
    } else if (state.status === 'invalid_data') {
      toast({
        type: 'error',
        description: 'Failed validating your submission!',
      })
    } else if (state.status === 'success') {
      setIsSuccessful(true)
      // –ü—Ä—è–º–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π
      router.push('/')
    }
  }, [state.status, router])

  const handleSubmit = (formData: FormData) => {
    setEmail(formData.get('email') as string)
    
    // Add selected world to form data for testing
    if (isTestWorldsUIEnabled) {
      // Don't send world_id for PRODUCTION mode to keep null for production users
      if (selectedWorld !== 'PRODUCTION') {
        formData.append('world_id', selectedWorld)
      }
    }
    
    formAction(formData)
  }

  return (
    <div className="flex h-dvh w-screen items-start pt-12 md:pt-0 md:items-center justify-center bg-background">
      <div className="w-full max-w-6xl overflow-hidden flex gap-8 items-start">
        {/* Phoenix Quick Login Panel for development - Left side */}
        {isTestWorldsUIEnabled && (
          <div className="w-full max-w-md">
            <QuickLoginPanel />
          </div>
        )}
        
        {/* Main login form - Right side */}
        <div className="w-full max-w-md overflow-hidden rounded-2xl flex flex-col gap-12">
          <div className="flex flex-col items-center justify-center gap-2 px-4 text-center sm:px-16">
            <h3 className="text-xl font-semibold dark:text-zinc-50">Sign In</h3>
            <p className="text-sm text-gray-500 dark:text-zinc-400">
              Use your email and password to sign in
            </p>
          </div>
          <AuthForm action={handleSubmit} defaultEmail={email}>
            {/* World selector for testing */}
            {isTestWorldsUIEnabled && (
              <div className="space-y-2 mb-4">
                <label htmlFor="world-select" className="block text-sm font-medium text-gray-700 dark:text-zinc-300">
                  üåç –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
                </label>
                <select
                  id="world-select"
                  value={selectedWorld}
                  onChange={(e) => setSelectedWorld(e.target.value as WorldId)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:border-zinc-600 dark:bg-zinc-800 dark:text-zinc-200"
                >
                  {Object.entries(WORLDS).map(([id, name]) => (
                    <option key={id} value={id}>
                      {name}
                    </option>
                  ))}
                </select>
                <p className="text-xs text-gray-500 dark:text-zinc-400">
                  –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –º–∏—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                </p>
              </div>
            )}
            
            <SubmitButton isSuccessful={isSuccessful}>Sign in</SubmitButton>
            <p className="text-center text-sm text-gray-600 mt-4 dark:text-zinc-400">
              {'Don\'t have an account? '}
              <Link
                href="/register"
                className="font-semibold text-gray-800 hover:underline dark:text-zinc-200"
              >
                Sign up
              </Link>
              {' for free.'}
            </p>
          </AuthForm>
        </div>
      </div>
    </div>
  )
}

// END OF: app/(auth)/login/page.tsx

/**
 * @file app/api/artifacts/recent/route.ts
 * @description API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @version 1.4.0
 * @date 2025-06-28
 * @updated BUG-043 FIX: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥ —Å async mapping - normalizeArtifactForAPI —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Promise.all
 * 
 * üìö **API Documentation:** See `.memory-bank/guides/api-documentation.md#get-apiartifactsrecent`
 * ‚ö†Ô∏è **–í–ê–ñ–ù–û:** –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –ª–æ–≥–∏–∫–∏ - –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ò Use Cases!
 */

import { type NextRequest, NextResponse } from 'next/server'
import { auth } from '@/app/app/(auth)/auth'
import { getTestSession } from '@/lib/test-auth'
import { getRecentArtifactsByUserId, getUserArtifactFilterPreference, resolveUserIdFromSession } from '@/lib/db/queries'
import { getWorldContextFromRequest } from '@/lib/db/world-context'
import { ChatSDKError } from '@/lib/errors'
import type { ArtifactKind } from '@/lib/types' // <-- –ò–ó–ú–ï–ù–ï–ù –ò–ú–ü–û–†–¢

export const dynamic = 'force-dynamic'

export async function GET (request: NextRequest) {
  try {
    let session = await auth()
    if (!session?.user) {
      session = await getTestSession()
    }
    if (!session?.user?.id) {
      return new ChatSDKError('unauthorized:api', 'User not authenticated.').toResponse()
    }

    const { searchParams } = new URL(request.url)
    const limitParam = searchParams.get('limit')
    const kind = searchParams.get('kind') as ArtifactKind | undefined

    const limit = limitParam ? Number.parseInt(limitParam, 10) : 5

    if (Number.isNaN(limit) || limit <= 0 || limit > 20) {
      return new ChatSDKError('bad_request:api', 'Invalid limit parameter. Must be between 1 and 20.').toResponse()
    }

    // Get world context from request cookies
    const worldContext = getWorldContextFromRequest(request);
    
    // üöÄ COLLABORATIVE SYSTEM: Resolve real user ID and get filter preference
    const realUserId = await resolveUserIdFromSession(session.user.id, session.user.email || undefined);
    const showOnlyMyArtifacts = await getUserArtifactFilterPreference(realUserId);
    
    console.log('üåç API /artifacts/recent using world context:', {
      sessionUserId: session.user.id,
      realUserId,
      userEmail: session.user.email,
      worldContext,
      limit,
      kind,
      showOnlyMyArtifacts
    });

    // Use enhanced getRecentArtifactsByUserId with collaborative filtering
    const recentArtifacts = await getRecentArtifactsByUserId({ 
      userId: realUserId, // üöÄ Use resolved real user ID
      limit, 
      kind,
      worldContext,
      showOnlyMyArtifacts // üöÄ Pass user preference
    });
    
    console.log('üåç API /artifacts/recent returned artifacts:', {
      count: recentArtifacts.length,
      worldContext
    });

    // Normalize artifacts for API response (add unified content field)
    const { normalizeArtifactForAPI } = await import('@/lib/artifact-content-utils')
    const normalizedArtifacts = await Promise.all(recentArtifacts.map(normalizeArtifactForAPI))
    
    console.log('üîç BUG-043 DEBUG: API /artifacts/recent returning:', {
      count: normalizedArtifacts.length,
      sample: normalizedArtifacts[0] ? {
        id: normalizedArtifacts[0].id,
        title: normalizedArtifacts[0].title,
        kind: normalizedArtifacts[0].kind,
        hasContent: !!normalizedArtifacts[0].content,
        allKeys: Object.keys(normalizedArtifacts[0])
      } : null
    })

    return NextResponse.json(normalizedArtifacts)

  } catch (error) {
    if (error instanceof ChatSDKError) {
      return error.toResponse()
    }
    console.error('SYS_API_ARTIFACTS_RECENT: Unexpected error', error)
    return new ChatSDKError('bad_request:api', 'An unexpected error occurred while fetching recent artifacts.').toResponse()
  }
}

// END OF: app/api/artifacts/recent/route.ts

/**
 * @file app/api/dev/load-world/route.ts
 * @description API endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏—Ä–∞ –≤ dev –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * @version 1.0.0
 * @date 2025-06-28
 * @updated –°–æ–∑–¥–∞–Ω–∏–µ API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–æ–≤ –∏–∑ DevWorldSelector
 */

/** HISTORY:
 * v1.0.0 (2025-06-28): –°–æ–∑–¥–∞–Ω–∏–µ API endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤ –≤ –ë–î
 */

import { type NextRequest, NextResponse } from 'next/server'
import { getWorldDefinition, validateWorld } from '@/tests/helpers/worlds.config'
import type { WorldId } from '@/tests/helpers/worlds.config'

export async function POST(request: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  if (process.env.NODE_ENV !== 'development') {
    return NextResponse.json({ error: 'Not allowed in production' }, { status: 403 })
  }

  try {
    const { worldId } = await request.json()

    if (!worldId) {
      return NextResponse.json({ error: 'worldId is required' }, { status: 400 })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏—Ä–∞
    try {
      validateWorld(worldId as WorldId)
    } catch (error) {
      return NextResponse.json({ 
        error: 'Invalid world', 
        details: error instanceof Error ? error.message : String(error)
      }, { status: 400 })
    }

    const worldDef = getWorldDefinition(worldId as WorldId)

    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SeedEngine –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Maria Garcia –µ—Å–ª–∏ —ç—Ç–æ CONTENT_LIBRARY_BASE –º–∏—Ä
    if (worldId === 'CONTENT_LIBRARY_BASE') {
      try {
        const { createUser } = await import('@/lib/db/queries')
        const mariaUser = worldDef.users[0] // user-maria
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É)
        try {
          await createUser(mariaUser.email, 'temp-password')
          console.log('‚úÖ User Maria Garcia created:', mariaUser)
        } catch (userError) {
          console.log('‚ÑπÔ∏è User Maria Garcia already exists:', userError)
        }
        
        // TODO: –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã Maria —Å world_id = CONTENT_LIBRARY_BASE
        console.log('üì¶ Need to create', worldDef.artifacts.length, 'artifacts for Maria Garcia')
        
      } catch (error) {
        console.error('‚ùå Failed to load Maria Garcia data:', error)
      }
    }
    
    return NextResponse.json({
      success: true,
      message: 'World loading initiated',
      world: {
        id: worldDef.id,
        name: worldDef.name,
        description: worldDef.description,
        usersCount: worldDef.users.length,
        artifactsCount: worldDef.artifacts.length,
        chatsCount: worldDef.chats.length
      },
      note: 'Basic user creation implemented. Full artifact seeding coming in Phase 2'
    })

  } catch (error) {
    console.error('World loading failed:', error)
    return NextResponse.json({ 
      error: 'World loading failed',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}

// END OF: app/api/dev/load-world/route.ts
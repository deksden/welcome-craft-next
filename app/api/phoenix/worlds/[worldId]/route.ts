/**
 * @file app/api/phoenix/worlds/[worldId]/route.ts
 * @description PHOENIX PROJECT - API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ—Å—Ç–æ–≤—ã–º –º–∏—Ä–æ–º
 * @version 1.0.0
 * @date 2025-06-29
 * @updated PHOENIX PROJECT Step 3 - Individual World Management API
 */

/** HISTORY:
 * v1.0.0 (2025-06-29): PHOENIX PROJECT Step 3 - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞
 */

import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'
import { worldMeta } from '@/lib/db/schema'
import { eq } from 'drizzle-orm'

interface RouteParams {
  params: Promise<{
    worldId: string
  }>
}

/**
 * GET /api/phoenix/worlds/[worldId] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∏—Ä–∞
 * 
 * @feature PHOENIX PROJECT - Dynamic World Retrieval
 * @param worldId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∏—Ä–∞
 * @returns WorldMeta record –∏–ª–∏ 404
 */
export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    const { worldId } = await params

    const [world] = await db
      .select()
      .from(worldMeta)
      .where(eq(worldMeta.id, worldId))
      .limit(1)

    if (!world) {
      return NextResponse.json(
        { 
          success: false, 
          error: `World '${worldId}' not found` 
        },
        { status: 404 }
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º lastUsedAt –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    await db
      .update(worldMeta)
      .set({ 
        lastUsedAt: new Date(),
        usageCount: world.usageCount + 1
      })
      .where(eq(worldMeta.id, worldId))

    console.log(`üåç PHOENIX API: Retrieved world '${worldId}'`, {
      name: world.name,
      environment: world.environment,
      usageCount: world.usageCount + 1
    })

    return NextResponse.json({
      success: true,
      data: { ...world, usageCount: world.usageCount + 1 }
    })

  } catch (error) {
    const { worldId } = await params
    console.error(`‚ùå PHOENIX API: Error retrieving world '${worldId}':`, error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to retrieve world',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

/**
 * PUT /api/phoenix/worlds/[worldId] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏—Ä–∞
 * 
 * @feature PHOENIX PROJECT - Dynamic World Updates
 * @param worldId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∏—Ä–∞
 * @returns Updated WorldMeta record
 */
export async function PUT(request: NextRequest, { params }: RouteParams) {
  try {
    const { worldId } = await params
    const body = await request.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [existingWorld] = await db
      .select()
      .from(worldMeta)
      .where(eq(worldMeta.id, worldId))
      .limit(1)

    if (!existingWorld) {
      return NextResponse.json(
        { 
          success: false, 
          error: `World '${worldId}' not found` 
        },
        { status: 404 }
      )
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {
      updatedAt: new Date()
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedFields = [
      'name', 'description', 'users', 'artifacts', 'chats', 'settings',
      'dependencies', 'isActive', 'isTemplate', 'autoCleanup', 'cleanupAfterHours',
      'environment', 'isolationLevel', 'tags', 'category', 'version'
    ]

    for (const field of allowedFields) {
      if (body[field] !== undefined) {
        updateData[field] = body[field]
      }
    }

    const [updatedWorld] = await db
      .update(worldMeta)
      .set(updateData)
      .where(eq(worldMeta.id, worldId))
      .returning()

    console.log(`üåç PHOENIX API: Updated world '${worldId}'`, {
      name: updatedWorld.name,
      updatedFields: Object.keys(updateData)
    })

    return NextResponse.json({
      success: true,
      data: updatedWorld,
      message: `World '${worldId}' updated successfully`
    })

  } catch (error) {
    const { worldId } = await params
    console.error(`‚ùå PHOENIX API: Error updating world '${worldId}':`, error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to update world',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

/**
 * DELETE /api/phoenix/worlds/[worldId] - –£–¥–∞–ª–µ–Ω–∏–µ –º–∏—Ä–∞
 * 
 * @feature PHOENIX PROJECT - Dynamic World Deletion
 * @param worldId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∏—Ä–∞
 * @returns Success confirmation
 */
export async function DELETE(request: NextRequest, { params }: RouteParams) {
  try {
    const { worldId } = await params

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [existingWorld] = await db
      .select()
      .from(worldMeta)
      .where(eq(worldMeta.id, worldId))
      .limit(1)

    if (!existingWorld) {
      return NextResponse.json(
        { 
          success: false, 
          error: `World '${worldId}' not found` 
        },
        { status: 404 }
      )
    }

    // –£–¥–∞–ª—è–µ–º –º–∏—Ä
    await db
      .delete(worldMeta)
      .where(eq(worldMeta.id, worldId))

    console.log(`üåç PHOENIX API: Deleted world '${worldId}'`, {
      name: existingWorld.name,
      environment: existingWorld.environment
    })

    return NextResponse.json({
      success: true,
      message: `World '${worldId}' deleted successfully`,
      deletedWorld: {
        id: existingWorld.id,
        name: existingWorld.name
      }
    })

  } catch (error) {
    const { worldId } = await params
    console.error(`‚ùå PHOENIX API: Error deleting world '${worldId}':`, error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to delete world',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

// END OF: app/api/phoenix/worlds/[worldId]/route.ts